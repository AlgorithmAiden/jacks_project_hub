{"lastUpdate":1717738633786,"outputHash":"0c5aa548475d2df88fddbdb408de4703","numberOfLines":2236,"uniqueLines":["* * !-> toggles","let codeLines = {}","fs.rmdirSync('./liveServer', { recursive: true, force: true })","let html = ''","<div class=\"title\">","reject(`Error: ${error.message}`)","<script src=\"./backgroundManager.js\"></script>","console.log('Done in ', Date.now() - start, ' ms')","const emptyString = new Array(2 ** 16).fill(' ').join('')","if (fs.lstatSync(`../${projectDiv}`).isDirectory())","delete saveData[key]","}, []).filter(part => part != '')","dontPath.push(line)","process.exit()","function smartCopyDir(from, to) {","if (outputHashChanged || missingMainPreview || changedPosts.length || postsMissingPreview.length)","const path = require('path')","${preview}","dontCount.push(line)","const lastFileHashes = mem.lastFileHashes ?? {}","for (const file of fs.readFileSync(path))","const changedPosts = []","const fileHashes = mem.fileHashes","<meta charset=\"UTF-8\">","html += '</div>'","if (scale == 1)","//has to be set after the first update so the first background will always get loaded","* * [path] [size] -> size is relative to the div, so a size of 1 would fill the space, or a size of .5 could fit two videos side by side","smartRemoveExtra('./output', ['.git', 'backgrounds', 'posts', 'backgroundManager.js', 'firaCode.ttf', 'index.html', 'mem.json', 'postStyles.css', 'siteStyles.css', 'updateStats.js', 'preview.png'])","grid[tailX][tailY] -= 25","paddles[1] -= Math.max(-3, Math.min(3, paddles[1] - (balls[0].y - (paddleSize - 1) / 2)))","const y = Math.floor(Math.random() * grid[0].length)",".video_wrapper:hover {","setTimeout(run, 100)","balls.sort((a, b) => (a.sx * width + a.x) - (b.sx * width + b.x))","(() => {","ctx.fillStyle = `rgb(0,${255 - firework.radius * (205 / firework.maxRadius)},0)`","} else commitMessage = `${totalChanges} changes: ${changes.join(', ')}`","needWords = false","else colum.unshift([''])","strike: false","let out = []","function setupFolder() {","if (removedFiles.length > 0) changes.push(`removed ${removedFiles.length} file${removedFiles.length == 1 ? '' : 's'}: ${removedFiles.join(', ')}`)","for (let index = snake.length - 1; index > 0; index--) {","balls[i].lx = balls[i].x","fs.rmSync(`./output/posts/${name}/${file}`, { recursive: true, force: true })","})))","ctx.fillText(item[0], x * fontSize, (y - offsets[x]) * fontSize)","offsets[index] = word.length","let tailX = snake[snake.length - 1].x","if (lastFolderModificationTimes[path] != maxMTime) changed = true",".then(response => response.json())","italic: false,","* * global -> sets the global default, this is the default used to generate the local (the default always used) default, also sets the local default","if (totalChanges == 0) {","process.on('exit', close)","if (!fs.existsSync('./output')) fs.mkdirSync('./output')","if (preview != undefined)","fs.readdirSync('./output/posts').forEach(post => {","if (ball.y == Math.floor(height / fontSize) - 2) ball.sy = -1","<div id=\"overlay\">","case 1:","* * !-> resets the full style to the default style","</div>","words = words.split(' ').filter(word => word != '')","paddleSize = Math.round(height / fontSize / 3 / 2) * 2 + 1","let loadedBackgrounds = []","if (part.length == 0)","if (!loadedBackgrounds.includes(backgroundPaths[backgroundIndex])) await new Promise(r => {","postsUpdated[post] = Date.now()","// Check if .git directory exists, if not, initialize a new repository","* * !-> sets color to the default color","* * !-> defaults to 1","script.type = 'module'","<div id=\"content\">","snake[0].y--","fs.mkdirSync('./liveServer')","const maxUps = 60","resolve(stdout || stderr)","loadedBackgrounds.push(backgroundPaths[backgroundIndex])","return [...acc, part]","if (stats.isDirectory() && !ignoredPaths.count.includes(fullPath)) {","smartMakeDir('./output/backgrounds')","specialChars.forEach(char =>","const ignoredPaths = (() => {","ctx.fillText(distance < firework.radius ? '0' : '1', x * fontSize, y * fontSize)","width = canvas.width = window.innerWidth","console.log('Screenshotting main page.')","snake[index] = { ...snake[index - 1] }","if (currentBackground.stop != undefined) await currentBackground.stop(canvas, ctx)","grid = [[]]","smartCopyFile(`${postPath}/${file}`, `./output/posts/${name}/${file}`)","await execAsync(`git checkout main`, { cwd: './' })","// Add all changes to staging","let headX = snake[0].x","to change the style, add |[] with tags and values inside, this sets the style for everything after, until changes.","overflow: hidden auto;","}).on('error', () => { })","recurse(`${path}/${file}`)","ctx.fillText('0', x * fontSize, y * fontSize)","function err(message) {","@font-face {","return (hash & maxInt32) / maxInt32","} else if (stat.isFile() && !ignoredPaths.scan.includes(fullPath) && item !== 'preview.png') {","let addedFiles = []","fireworks.splice(index, 1)","console.log(3)","word.forEach((char, index) => colum.unshift([word[word.length - index - 1], color]))","const exists = fs.existsSync(to)","await page.evaluate(() => {","html = html.replace('<!-- post link -->', markup.translate(fs.readFileSync(`${postPath}/script.txt`, 'utf8')))","<meta property=\"twitter:title\" content=\"meta title link\" />","const missingMainPreview = !fs.existsSync('./output/preview.png')","let snakes = []","} else if ((firework.counter = (firework.counter + 1) % firework.speed) == 0) firework.radius++","if (lastWidth != window.innerWidth || lastHeight != innerHeight)","fs.rmSync(`${to}/${file}`, { recursive: true, force: true })","if (!['script.txt', 'title.txt', 'preview.txt'].includes(file)) {","* * left | center | right","let offsets = []","* bold: -> sets whether text will be bold","function generatePost(postPath) {","if (!allowed.includes(file)) {","for (const file of fs.readdirSync(to))","const line = uniqueLines[lineNumber - 1]","await page.reload({ waitUntil: ['networkidle0'], bypassCache: true })","process.on('SIGINT', close)","export function stop() {","ctx.font = `${fontSize}px 'Fira Code'`","const maxInt32 = Math.pow(2, 31) - 1","<!DOCTYPE html>","let lastFirework = 0","markup = rawMarkup.split('\\r\\n').filter(line => line.slice(0, 10) != '|[COMMENT]').join('').split('|[').filter(part => part != '').map(part => {","if (line.slice(0, 26) == '//includeInHomeBackgrounds')","items.forEach(item => {","* * !-> sets align to the default align","await new Promise((resolve, reject) => {","part = part.filter(item => item != '')","console.log(data.toString())","let changes = []","ctx.textBaseline = 'top'","* code: -> sets whether text will be code using <code></code>","words = data.uniqueLines.join(' ')","let headY = snake[0].y","console.log(file)","grid = [...grid, ...new Array(Math.ceil(width / fontSize)).fill(0).map(() => [])].splice(0, Math.ceil(width / fontSize) + 1).map(colum => [...colum, ...new Array(Math.ceil(height / fontSize)).fill(0)].splice(0, Math.ceil(height / fontSize) + 1))","if (page == undefined) {","for (let y = -1; y < height / fontSize + 1; y++) {","ctx.fillStyle = `rgb(0,${lineColors[line]},0)`","position: fixed;","fs.writeFileSync('../mem.json', JSON.stringify(mem), 'utf8')","<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">","headless: false,","x: Math.floor(Math.random() * grid.length),","if (firework.radius == firework.maxRadius) {","let uniqueLines, lineColors, fontWidth, numberOfUniqueLines","scanDirectory(fullPath)","scan(`${to}/${file}`, `${from}/${file}`)","lineColors = data.uniqueLines.reduce((acc, line) => ({ ...acc, [line]: stringToNumberHash(line) * 205 + 50 }), {})","html = html.split('meta title link').join(`${name} - Jack's project hub`)","fs.writeFileSync('./output/backgroundManager.js', `const backgroundPaths = ${JSON.stringify(backgroundPaths)};\\r\\n${fs.readFileSync('./siteBackgroundManager.js', 'utf8')}`, 'utf8')","* * !-> just adds <br>","numberOfUniqueLines = data.uniqueLines.length","margin-bottom: 10px","* * [number] -> (viewport width + viewport height) / 2 * [number], [number] is in the range [number] >= 0.02","while (backgroundPaths.length > 1 && backgroundPaths[0] == lastPath)","part = part.reduce((acc, part) => {","paddles.forEach((paddle, index) => {",".catch(error => {","return out.join('; ') + ';'","html = html.replace('<!-- posts link -->', postPaths.map(postPath => generatePostCard(postPath)).join('\\n '))","if (words == undefined)","* italic: -> sets whether text will be italic","await page.setViewport(await page.evaluate(() => ({","if (currentBackground.start != undefined) await currentBackground.start(canvas, ctx)","smartCopyFile('./postStyles.css', './output/postStyles.css')","const prefix = path.slice(0, 1)","for (let i = 0; i < Math.random() * 25; i++) {","ctx.fillRect(0, 0, width, height)","function scanDir(path) {","fs.readdirSync(postPath).forEach(file => {","mem.orderedLines = getOrderedLinesOfCode()","function fillGrid(canvas, ctx) {","export function update(canvas, ctx) {","} else if (prefix == '1') {","smartCopyFile(`${from}/${file}`, `${to}/${file}`)","console.log(`stdout: ${stdout}`)","* * !-> sets the default style to the current style","<div id=\"stats\">","balls[i].sy = Math.floor(Math.random() * 2) * 2 - 1","const lastPath = backgroundPaths[backgroundPaths.length - 1]","src: url('../../firaCode.ttf') format('truetype');","else if (lowerProp == 'strike') {","filter: blur(5px) saturate(.5);","font-size: xx-large","setupFolder()","fs.writeFileSync('./mem.json', JSON.stringify(mem), 'utf8')","showMarkup: false,","const nextProp = props[index + 1] ?? emptyString","video {","let paths = fs.readFileSync('./ignoredPaths.txt', 'utf8').split('\\r\\n')","grid = [...grid, ...new Array(Math.ceil(width / fontSize)).fill(0).map(() => [])].splice(0, Math.ceil(width / fontSize) + 1).map(colum => [...colum, ...new Array(Math.ceil(height / fontSize)).fill(0).map(() => Math.floor(Math.random() * 255))].splice(0, Math.ceil(height / fontSize) + 1))","if (ball.x == Math.floor(width / fontSize) - 2) ball.sx = -1","return combinedHash.digest('hex')","/**","if (fs.statSync(`${from}/${file}`).isDirectory())","const fileHash = hashFileContents(fullPath)","let lastAlign","let columns = []","await execAsync(`git checkout -b main`, { cwd: './' })","for (let x of [0, Math.floor(width / fontSize - 1)]) {","// function wrapFunction(func, prefunc) {","await execAsync('git push -f origin main', { cwd: './' })","const { exec } = require('child_process')","if (part.indexOf('(') > -1)","let snake = snakes[Math.floor(Math.random() * snakes.length)]","console.log('Killed children')","let blurred = false","#titleText {","<link rel=\"stylesheet\" href=\"./siteStyles.css\">","snake[0].x--","padding: 10px;","let div = document.createElement('div')","color: #0000;","export function start(canvas) {","addStat(div, `Current hash: <code>${mem.postHashes[postName]}</code>`)","function recurseDir(currentPath) {","columns.forEach((colum, index) => drip(colum, index))","let backgroundStarted = 0","a !-> in the second column indicates the action that happens if non of the other options are there","canvas.style.filter = 'blur(0px)'","<script>","html = html.split('meta image link').join(`https://jacks-project-hub.vercel.app/posts/${name}/preview.png`)","const files = fs.readdirSync(directory)","backgroundStarted = Date.now()","if (!fs.existsSync(`${from}/${file}`) && !['backgroundManager.js', 'index.html', 'preview.png'].includes(file))","for (let y = 0; y < height / fontSize; y++) {","let text = nextLine + props","font-family: 'Fira Code';","// fs.cpSync('./output', './liveServer')","lastUpdate = Date.now()","style.color = ('#' + lca(nextProp, 1) + lca(nextProp, 3) + lca(nextProp, 5)).toLowerCase()","trys++","const linesPerSec = fontSize == 50 ? 5 : 10","else if (nextProp.length == 9) //is in format #rrggbbaa","for (const file of fs.readdirSync(from))","hashSum.update(fileBuffer)","// fs.copyFileSync = wrapFunction(fs.copyFileSync, (...args) => console.log('copy', ...args))","async function close() {","const digits = nextProp.toLowerCase().slice(lca(nextProp, 3) == 'a' ? 5 : 4).split(')')[0].split(',').map(digit => Math.max(0, Math.min(255, Math.round(Number(digit.trim())))).toString(16).padStart(2, '0')).filter((digit, index) => digit != 'ff' || index != 3)","max-width: 80%;","grid[snake[0].x][snake[0].y] += 50","const lineNumber = numberOfUniqueLines - (Math.floor(offset) - y + numberOfUniqueLines) % numberOfUniqueLines","html += `<div style=\"text-align:${style.align};\">`","*/","<!-- <meta property=\"og:description\" content=\"meta description link\" /> -->","display: block;","div.innerHTML = text","<!-- Twitter -->","if (Date.now() - lastFirework >= 1000) {","if (lowerProp == 'color') {","font-weight: normal;","if (ls(nextProp, 0, 1) == '#') { //must be hex",";","out.push(`font-weight:${value ? 'bold' : 'normal'}`)","html = html.replace('<!-- title markup link -->', title)","style.color = nextProp.toLowerCase()","return postPaths","fillColumns()","mem.postsUpdated = postsUpdated","commitMessage = commitMessage.charAt(0).toUpperCase() + commitMessage.slice(1)","resolve(server)","process.stdout.on('data', (data) => {","if (cssRules.length == 1) //take the ; into account","<!-- <meta property=\"twitter:description\" content=\"meta description link\" /> -->","removedFiles.push(key)","#titleDiv {","async function reloadPage() {","// Ensure the main branch exists","}).flat(1).reduce((acc, part) => {","} else if (offsets[index] > 0) offsets[index]--","while (specialChars.some(char => words.includes(char)))","* * rgb([r],[g],[b]) -> each value is in the range 0-255","window.markup = {","total += fs.readFileSync(fullPath, 'utf8').split('\\r\\n').length","if (uniqueLines != undefined) {","recurse('./temp')","await page.screenshot({ path: `./output/posts/${post}/preview.png` })","<meta name=\"title\" content=\"Jack's project hub\" />","* * rgba([r],[g],[b])","})()","const name = postPath.split('blogPost_')[1]","Object.keys(lastFileHashes).forEach(key => {","ctx.fillText(('|' + line).slice(0, lineLength), lineOffset, textY)","else acc = [...acc, part]","if (background.start != undefined) await background.start(canvas, ctx)","function script() {","if (!codeLines.includes(item))","const prop = props[index]","export function start(canvas,ctx) {","do backgroundPaths.sort(() => Math.random() * 2 - 1)","console.log('Website generated in', Date.now() - start, 'ms')","height: window.screen.height","<meta property=\"og:image\" content=\"meta image link\" />","postPaths.forEach(postPath => generatePost(postPath))","style.color = '#' + digits.reduce((acc, digit) => acc + digit.charAt(0), '')","if (style.showMarkup)","await background.update(canvas, ctx)","if (ls(nextProp, 4, 5) == 'f') //check if alpha is needed","saveAndCopyStats(true)","ctx.fillText(lineNumber, (lineOffset - String(lineNumber).length * fontWidth) / 2, textY)","const server = exec('http-server ./output -p 8080', (error, stdout, stderr) => {","const page = await browser.newPage()","console.log(1)","<div id=\"returnButton\">","if (prefix == '0') {","#backgroundCanvas.blur {","the first tag clump sets the color to green (#0f0), the second clump resets color to the default","* space: -> adds [number] spaces using '&nbsp;' after","if (headY > 0 && (snake[2].y != headY - 1 || trys > 50)) {","<a href=\"../../\">Home</a>","fs.accessSync(path.join('./', '.git'))","if (lastFileHashes[key] == undefined)","if (fs.existsSync(`./output/posts/${name}/${file}`))","size: 'medium',","} else if (ls(nextProp, 0, 3) == 'rgb') {","await page.goto(`http://localhost:8080/index.html`);","const count = Math.round(Number(nextProp))","const backgroundPaths = []","nextLine += new Array(this.tabSize).fill('&nbsp;').join('')","<!-- Open Graph / Facebook -->","balls.forEach(ball =>","let cycle = true","} else","html,","lastAlign = style.align","offsets[index]--","mem.lastUpdate = Date.now()","style.color = nextProp.slice(0, 7).toLowerCase()","style.code = !style.code","else if (key == 'italic')","<meta name=\"title\" content=\"meta title link\" />","padding: 25px;","else if (lowerProp == 'fold') {","if (nextProp.toLowerCase() == 'global')","const server = await new Promise((resolve, reject) => {","if (count > 0 && !isNaN(count))","const backgroundPaths = [\"./posts/Making a custom blog/background.js\",\"./backgrounds/fireworks.js\",\"./backgrounds/hiddenSnakes.js\",\"./backgrounds/pong.js\",\"./backgrounds/rain.js\",\"./backgrounds/randomSymbols.js\",\"./backgrounds/uniqueCode.js\"];","if (acc.slice(acc.length - 2) == '; ' && part == '') return acc","server = exec('http-server ./liveServer -p 8080', (error, stdout, stderr) => {","const div = document.getElementById('stats')","process.chdir('C:\\\\Users\\\\jack\\\\Home\\\\Programming\\\\blog projects\\\\blog generator')","if (outputHashChanged || missingMainPreview) {","const lineLength = Math.ceil((width - lineOffset) / fontWidth)","await execAsync(`git commit -m \"${commitMessage}\"`, { cwd: './' })","smartCopyFile('./updateHomeStats.js', './output/updateStats.js')","function generateMainPage(postPaths) {","backgroundIndex = (backgroundIndex + 1) % backgroundPaths.length","the text is evaluated from beginning to end, any text being rendered using the current style.","process.chdir('.\\\\output')","await page.goto(`http://localhost:8080/index.html`)","console.log('No changes')","style.showMarkup = false","lastFolderModificationTimes[path] = maxMTime","ctx.fillRect(0, 0, canvas.width, canvas.height)","item = item.trim()","let dontCount = []","const browser = await puppeteer.launch()","fs.writeFileSync('./output/index.html', html, 'utf8')","let words","values in the second column with a [] signify that you put a value there (but don't include the [])","Object.keys(fileHashes).forEach(key => {","let inPar = false","colum.forEach((item, y) => {","if (stat.isDirectory() && !ignoredPaths.scan.includes(fullPath)) {","ctx.fillRect(headX * fontSize, headY * fontSize, fontSize, fontSize)","fontWidth = ctx.measureText('0').width","while (rawMarkup.includes(`fold_${foldId}`))","mem.postHashes = postHashes","style.bold = !style.bold","// }","Object.keys(defaultStyle).forEach(key => style[key] = defaultStyle[key])","columns = []","<meta name=\"description\" content=\"meta description link\" />","width: 80%;","for example: to create 'before green it was boring' with 'green' being green you could use the following markup:","height = canvas.height = window.innerHeight","setupLiveBackgrounds(postPaths)","<head>","const start = Date.now()","'padding:0',","recurseDir(startPath)","html += `fold_${foldId}`","function cssRuleFromStyles(defaultStyle, style, scale = 1) {","let needWords = false","let dontPath = []","const offset = Date.now() / (1000 / linesPerSec)","wrapperStyle += [","fs.rmSync(`${path}/${file}`, { recursive: true, force: true })","`","const content = html.split(`fold_${fold.id}`)[1]","let lastUpdate = 0","you can put ] anywhere, and unless it is closing a tag area it will render.","else if (key == 'strike')","if (stat.isDirectory() && !ignoredPaths.path.includes(fullPath)) {","[...wrapper.getElementsByClassName('folder')].forEach(folder => {","function scanDirectory(directory) {","if (!exists || fs.statSync(from).mtime.getTime() !== fs.statSync(to).mtime.getTime()) {","const http = require('http')","fs.writeFileSync('./output/mem.json', JSON.stringify(siteMem), 'utf8')","let balls = new Array(fontSize == 50 ? 2 : 5).fill(0)","const newHash = getFolderHash('./output')","item = item.split(' ').join(' ')","else if (lowerProp == 'code') {","for (const file of fs.readdirSync(path)) {","let changedFiles = []","nextLine += `|[${props.join(' ')}]`","* * !-> toggles strikethrough","addStat(div, `First published: <code>${Math.floor((Date.now() - mem.postsCreated[postName]) / 86400000)}</code> days ago`)","nextLine = ''","tags are found by scanning for |[ and reading until ], and are separated by spaces.","* * #[rgba]","(await page.target().createCDPSession()).send('Network.clearBrowserCache')","style.size = `${Number(nextProp)}px`","folds.push({","let fileContent = fs.readFileSync(path, 'utf8').split('\\r\\n')","if (acc[acc.length - 1] !== item) acc.push(item)","grid = [...grid, ...new Array(Math.ceil(width / fontSize)).fill(0).map(() => [])].splice(0, Math.ceil(width / fontSize) + 1).map(colum => [...colum, ...new Array(Math.ceil(height / fontSize)).fill(50)].splice(0, Math.ceil(height / fontSize) + 1))","process.on('SIGTERM', close)","else if (lastFileHashes[key] != fileHashes[key])","#stats {","for (let y = 0; y < height / fontSize; y++)","let outputHashChanged = false","acc[acc.length - 1] += ' ' + part","else if (lowerProp == 'image') {","counter: 0,","Custom blog","await generateLinkPreviews()","console.error(`exec error: ${error}`)","out.push(`color:${value}`)","if (file != '.git') fs.cpSync(`./output/${file}`, `./liveServer/${file}`)","inPar = part.indexOf(')') == -1 && inPar","* color: -> sets the text color to the most efficient hex value that represents prop 1","addStat(div, `Current hash: <code>${mem.outputHash}</code>`)","reject(err)","await execAsync(`git remote add origin https://github.com/AlgorithmAiden/jacks_project_hub.git`, { cwd: './' })","if (style.code) text = `<code>${text}</code>`","html = html.slice(0, html.indexOf(`fold_${fold.id}`))","return new Promise((resolve, reject) => {","html += `<span style=\"${cssRules}\">${text}</span>`","page = await browser.newPage()","// fs.writeFileSync = wrapFunction(fs.writeFileSync, (to) => console.log('write', to))","<meta property=\"og:description\" content=\"meta description link\" />","transition: filter 1s ease-in-out;","blurred = false","function fillGrid(canvas,ctx) {","color: #fff;","<meta property=\"og:type\" content=\"website\" />","if (error) {","scanDir(path)","style.strike = true","<meta property=\"twitter:url\" content=\"https://jacks-project-hub.vercel.app/\" />","y: Math.floor(Math.random() * grid[0].length),","before |[color #0f0]green|[color] it was boring","fs.readFileSync(`${postPath}/background.js`, 'utf8').split('\\r\\n').forEach(line => {","background-color: #000;","(async () => {","fetch('../../mem.json')","commitMessage = changes[0]","width: window.screen.width,","style.align = defaultStyle.align","html += `<br><img src=\"./${nextProp}\" alt=\"${nextProp}\" style=\"width:${Number(props[index + 2] * 100)}%\">`","args: ['--start-fullscreen']","translate(rawMarkup, scale = 1) {","out.push(`font-style:${value ? 'italic' : 'normal'}`)","document.head.appendChild(script)","* * [property] -> sets [property] to the default [property]","break","const wrapper = document.currentScript.parentNode","async function run() {","* reset:","folder(event) {","let hash = 0","function readFile(path) {","* * off | false","ball.lx = ball.x","} else if (stats.isFile() && !ignoredPaths.count.includes(fullPath))","let defaultStyle = { ...this.defaultStyle }","for (let key of ['lastScan', 'lastUpdate', 'outputHash', 'numberOfLines', 'uniqueLines', 'orderedLines', 'postsUpdated', 'postsCreated', 'postHashes']) siteMem[key] = mem[key]","for (let i = 0; i < height * 2; i += fontSize)","//the script injected into the output html","* * [number]","z-index: 1;","const stats = fs.statSync(`${path}/${file}`)","if (defaultStyle[key] != style[key]) {","else if (key == 'size')","case 2:","out.push(`text-decoration: ${value ? 'line-through' : 'none'}`)","<!-- posts link -->","paths.forEach(path => {","cycle = (backgroundPaths.length > 1)","const open = children[1].style.display == 'none'","for (let i = 0; i < paddleSize; i++) {","<!-- title markup link -->","while (!hasMoved) {","}","${text}","const textY = (y + offset % 1) * fontSize","for (const file of ['script.txt', 'title.txt', 'preview.txt'])","color: '#0f0',","fs.rmSync(`./output/posts/${file}`, { recursive: true, force: true })","nextLine += `<script src=\"${nextProp}\"></script>`","cursor: pointer;","}, 2500)","const scriptString = script.toString().slice(25).split('\\r\\n').reduce((acc, part) => acc + '; ' + part.split('//')[0], '').split('').reduce((acc, part, index, arr) => {","html += text","const items = fs.readdirSync(currentPath)","function findPostPaths() {","style.color = '#' + digits.reduce((acc, digit) => acc + digit, '')","const puppeteer = require('puppeteer')","if (postsCreated[post] == undefined)","let paddleSize","filter: blur(0) saturate(1);","grid[x][y] = Math.floor(Math.random() * 255)","nextLine += new Array(count).fill('&nbsp;').join('')","} catch (err) { failed = true }","<div id=\"post\">","else if (lowerProp == 'default') {","<!-- Primary Meta Tags -->","if (typeof part == 'string')","* * [path] -> where to find the script","'width:100%',","hash = str.charCodeAt(i) + ((hash << 5) - hash)","const color = `rgb(0,${Math.round(Math.random() * 205) + 50},0)`","* * !-> toggles code text","hasMoved = true","if (offsets[index] == 0) {","let style = { ...defaultStyle }","export function start(canvas, ctx) {","const process = exec('node generateWebsite.js', (error, stdout, stderr) => {","if (Math.abs(x - firework.x) + Math.abs(y - firework.y) <= firework.radius) {","if (fs.statSync(`${postPath}/${file}`).isDirectory())","${content}","#backgroundCanvas {","style.bold = false","<div id=\"titleText\">","fs.writeFileSync(`./output/posts/${name}/index.html`, html, 'utf8')","const chars = '`~!@#$%^&*()_-+={[}]|\\\\:;\"\\'<,>.?/'.split('')","body {","document.addEventListener('DOMContentLoaded', () => {","function saveMem(mem) {","* script: -> embeds a piece of live code","const stat = fs.statSync(fullPath)","else if (lowerProp == 'reset') {","style.italic = false","changedFiles.push(key)","for (let i = 0; i < str.length; i++) {","function hashFileContents(filePath) {","if (part == ' ' && acc.charAt(acc.length - 1) == ' ')","<title>Jack's project hub</title>","function stringToNumberHash(str) {","ctx.fillRect(x * fontSize, y * fontSize, fontSize, fontSize)","}, '').split('{; ').join('{').split('; }').join('}').split('; ').reduce((acc, part) => {","const distance = Math.abs(x - firework.x) + Math.abs(y - firework.y) + 1","let foldId = folds.length + 1","process.on('uncaughtException', close)","function scan(to, from) {","style.color = ls(str, 0, 4)","filter: blur(25px) brightness(0);","cleanPostsFolder(postPaths)","else if (lowerProp == 'bold') {","if (key == 'color')","for (let x = Math.max(firework.x - firework.radius, 0); x < Math.min(firework.x + firework.radius, grid.length); x++)","* tabs: -> adds [number] spaces * tabSize (defaults to 3) after","else if (lowerProp == 'size') {","function drip(colum, index) {","margin: 0;","codeLines.push(item)","if (fs.existsSync(`${postPath}/background.js`)) {","} else if (prefix == '2') {","const line = path.slice(2)","let maxMTime = 0","total += countLinesOfCode(fullPath)","if (background.update != undefined) {","<meta property=\"twitter:description\" content=\"meta description link\" />","<meta property=\"og:url\" content=\"meta url link\" />","flex-wrap: wrap;","// return (...args) => {","style.italic = true","<html lang=\"en\">","}, [])","fireworks.push({","img,","const lineOffset = String(numberOfUniqueLines).length * fontWidth","let needScript = false","nextLine += `<div style=\"display:block; height:${Number(nextProp)}em; line-height:${Number(nextProp)}em;\"></div>`","let total = 0","style.showMarkup = true","const crypto = require('crypto')","for (const file of fs.readdirSync(path))","* * #[rrggbb]","<div ${fold.open ? '' : 'style=\"display:none;\"'}>","<div id=\"returnToTopButton\">","ctx.fillStyle = 'rgb(0,50,0)'","return new Promise(async resolve => {","for (const path of postPaths) {","* video: -> embeds a video in the next line","//used so I can check nextProp without it existing","tags are evaluated by order they appear, in a |[].",".post .title {",".video_wrapper {","const ls = (str, start, stop) => str.slice(start, stop).toLowerCase()","for (let y = Math.max(firework.y - firework.radius, 0); y < Math.min(firework.y + firework.radius, grid[0].length); y++)","const specialChars = '`~!@#$%^&*()_-+={[}]|\\\\:;\"\\'<,>.?/1234567890'.split('')","let server, browser, page","// func(...args)","if (stderr) {","} catch (error) {","border: 5px solid #15661566;","ctx.fillStyle = `rgb(0,${grid[x][y]},0)`","ctx.fillStyle = '#0f0'","lastFirework = Date.now()","colum = colum.splice(Math.ceil(height / fontSize) + offsets[index])","const ctx = canvas.getContext('2d')","await browser.close()","html += `<br><video src=\"./${nextProp}\" controls alt=\"${nextProp}\" style=\"width:${Number(props[index + 2] * 100)}%\"></video>`","tabSize: 3,","markup.forEach(props => {","// Commit the changes","<script src=\"./updateStats.js\"></script>","* * xx-small | x-small | smaller | small | medium | large | larger | x-large | xx-large -> uses the default sizes","await page.screenshot({ path: './output/preview.png' })","balls[i].ly = balls[i].y","balls.unshift(balls.pop())","text = `<span style=\"${cssRules}\">${text}</span>`","if (headY + 1 < grid[0].length && (snake[2].y != headY + 1 || trys > 50)) {","<link rel=\"stylesheet\" href=\"../../postStyles.css\">","let changed = false","if (cycle && Date.now() - backgroundStarted >= minTimePerBackground) {","}, '')","height: 1000","const hashSum = crypto.createHash('md5')","canvas.style.transition = 'all 0s'","style.code = true","ctx.fillStyle = '#000'","if (['left', 'center', 'right'].includes(nextProp.toLowerCase()))","const script = document.createElement('script')","needWords = true","style.strike = !style.strike","if (path.slice(0, 2) == '//') return","function addStat(parent, text) {","Object.keys(style).forEach(key => {","if (Number(nextProp) > 0)","to render a |[ you can put |[|, this will not read tags like normal.","if (digits.every(digit => digit.charAt(0) == digit.charAt(1)))",".video_wrapper span {","}, 100)","await runGenerateWebsite()","addStat(div, `Last updated: <code>${Math.floor((Date.now() - mem.postsUpdated[postName]) / 86400000)}</code> days ago`)","if (stats.isDirectory()) scanDir(`${path}/${file}`)","const count = Math.round(Number(nextProp) * this.tabSize)","let backgroundIndex = -1","console.log('2')","balls[i].y = Math.round(height / fontSize / 2) + Math.round((Math.random() * 2 - 1) * (height / fontSize / 3))","* * [path] [size] -> size is relative to the div, so a size of 1 would fill the space, or a size of .5 could fit two images side by side","fetch('./mem.json')","if (headX > 0 && (snake[2].x != headX - 1 || trys > 50)) {","<span onclick=\"window.scroll({top:0,left:0,behavior:'smooth'})\">Return to top</span>","uniqueLines = data.uniqueLines","width: 95%;","width: 2000,","children[0].innerHTML = children[0].innerHTML.replace(open ? 'open' : 'close', open ? 'close' : 'open')","if (lca(nextProp, 1) == lca(nextProp, 2) && lca(nextProp, 3) == lca(nextProp, 4) && lca(nextProp, 5) == lca(nextProp, 6) && lca(nextProp, 7) == lca(nextProp, 8)) //check if the color can be shortened","const blurTime = 1000 * 1","html = html.split('meta url link').join(`https://jacks-project-hub.vercel.app/posts/${name}/`)","smartCopyDir(`${from}/${file}`, `${to}/${file}`)","const stats = fs.statSync(fullPath)","server.on('error', (err) => {","#overlay {","children[1].style.display = open ? '' : 'none'","return changed","case 0:","<meta property=\"twitter:title\" content=\"Jack's project hub\" />","font-style: normal;","}, [])) {","<div class=\"post\" onclick=\"window.location.href='./posts/Making a custom blog/'\">\n <div class=\"title\">\n \n <div class=\"markup\" style=\"color:#fff; font-style:normal; font-weight:normal; font-size:calc(xx-large * 0.25); text-decoration: none;margin:0; padding:0; word-wrap:break-word; width:100%; height:100%;\">\n <div style=\"text-align:center;\">Making a <span style=\"color:#0f0; font-weight:bold;\"><code>|[custom]</code></span> blog</div>\n </div>\n \n </div>\n \n <div class=\"preview\">\n \n <div class=\"markup\" style=\"color:#0f0; font-style:normal; font-weight:normal; font-size:small; text-decoration: none;margin:0; padding:0; word-wrap:break-word; width:100%; height:100%;\">\n <div style=\"text-align:center;\">I like to create posts, but have never found a good platform to do so.<br>Follow along as I create my own blog site, complete with custom markup, live backgrounds, and more!</div>\n </div>\n \n </div>\n </div>","maxMTime = Math.max(maxMTime, stats.mtime.getTime())","padding: 0;","try {","const minTimePerBackground = 1000 * 30","saveMem(mem)","readFile(fullPath)","function setupLiveBackgrounds(postPaths) {","snake[0].x++","html += `","for (let y = Math.max(firework.y - firework.radius, 0); y < Math.min(firework.y + firework.radius, grid[0].length); y++) {","position: absolute;","fireworks.forEach((firework, index) => {","speed: Math.ceil(Math.random() * 10)","throw new Error(`Error parsing markup: ${message}`)","console.log('Screenshots taken.')","if (cssRules.length != 1)","console.log(commitMessage)","else if (Number(nextProp) > 0)","out.push(`font-size:calc(${value} * ${scale})`)","* charAt + toLowerCase","} else {","if (style.align != lastAlign) {","for (let i = 0; i < balls.length; i++) {","let tailY = snake[snake.length - 1].y","} catch {","dontScan.push(line)","if (res.statusCode === 200) {","const canvas = document.getElementById('backgroundCanvas')","const cssRules = cssRuleFromStyles(defaultStyle, fold.style, scale)","return JSON.parse(fs.readFileSync('./mem.json', 'utf8'))","lastFolderModificationTimes = {}","'height:100%'","if (nextProp.slice(7, 9).toLowerCase() == 'ff') //check if alpha is needed","else if (key == 'bold')","if (nextLine != '') {","background-color: #6669;","// prefunc(...args)","min-height: 100vm;","open: nextProp.toLowerCase() == 'open'","let html = `<div class=\"post\" onclick=\"window.location.href='./posts/${name}/'\">`","if (ball.y == 0) ball.sy = 1","let grid = [[]]","function mixPaths() {","requestAnimationFrame(() => setTimeout(update, 1000 / maxUps - (Date.now() - lastUpdate)))","height: 100%;","return `","balls[i] = {}","border: 2px solid #333;","if (postHashes[post] != oldPostHashes[post]) {","<meta property=\"og:title\" content=\"meta title link\" />","const fontSize = (/android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i).test(navigator.userAgent || navigator.vendor || window.opera) ? 50 : 25","const fullPath = path.join(directory, file)","<!-- will autofill on website load -->","updated = true","if (!postPaths.includes(file))","let combinedHash = crypto.createHash('md5')","html += `<span style=\"${cssRules}\">${nextLine}</span>`","if (addedFiles.length > 0) changes.push(`added ${addedFiles.length} file${addedFiles.length == 1 ? '' : 's'}: ${addedFiles.join(', ')}`)","ctx.fillText('0', tailX * fontSize, tailY * fontSize)","ctx.fillStyle = `rgb(0,${grid[tailX][tailY]},0)`","Object.keys(style).forEach(key => defaultStyle[key] = style[key])","let preview","Object.keys(style).forEach(key => this.defaultStyle[key] = style[key])","* * [path] !-> defaults to 1","max-width: 100%;","await execAsync(`git init`, { cwd: './' })","ctx.fillRect(tailX * fontSize, tailY * fontSize, fontSize, fontSize)","* * !-> closes a fold","console.log(path, allowed, file, `${path}/${file}`)","let nextGlobalId = 0 //used for anything that needs a unique identifier","else if (fs.statSync(`${to}/${file}`).isDirectory())","switch (Math.floor(Math.random() * 4)) {","* * rgba([r],[g],[b],[a])","].join('; ') + ';'","if (fs.existsSync(`${postPath}/title.txt`)) title = markup.translate(fs.readFileSync(`${postPath}/title.txt`, 'utf8'))","balls[i].x = Math.round(width / fontSize / 2) + Math.round((i - balls.length / 2 + .5) * width / fontSize / balls.length / 2)","if (lastAlign != undefined)","<div id=\"titleDiv\">","while (part.some(part => part.includes(' ')))","let lastFolderModificationTimes = {}","if (inPar)","fs.readdirSync('./output').forEach(file => {","if (lca(nextProp, 1) == lca(nextProp, 2) && lca(nextProp, 3) == lca(nextProp, 4) && lca(nextProp, 5) == lca(nextProp, 6)) //check if the color can be shortened","* * open | close -> starts a fold that is open | closed at start","words = words.split(char).join(' ')","margin: 10px;","return part","top: 0;","let trys = 0","return acc","console.error(`stderr: ${stderr}`)","postPaths = postPaths.map(post => post.split('blogPost_')[1])","* * #[rrggbbaa]","canvas.classList.remove('blur')","const cssRules = cssRuleFromStyles(defaultStyle, style, scale)","else err(`invalid hex code`)","const open = getValue(`id_${folder.dataset.id}`)","err('invalid rgb')","for (let index = 0; index < props.length; index++) {","let paddles = [0, 0]","transition: all .25s ease-in-out","if (!exists)","* * [number] -> creates a break and then inserts a blank line of [number] lines in height, then second break","run()","await execAsync(`git add .`, { cwd: './' })","left: 50%;","<div class=\"folder\" data-id=${nextGlobalId++}>","</html>","if (distance <= firework.radius) {","#post {","<body>","combinedHash.update(fileHash)","const dirs = [{ x: 0, y: 0 }, { x: 1, y: 0 }, { x: -1, y: 0 }, { x: 0, y: 1 }, { x: 0, y: -1 }]","} else if (stat.isFile() && !ignoredPaths.path.includes(fullPath))","fileContent.forEach(item => {","if (nextProp.length == 4) //is in format #rgb","dirs.forEach(dir => {","recurseDir(fullPath)","<title><!-- title name link --></title>","balls.forEach(ball => {","smartCopyFile('./siteStyles.css', './output/siteStyles.css')","for (const post of [...changedPosts, ...postsMissingPreview].sort().reduce((acc, item) => {","html += `<br><img src=\"./${nextProp}\" alt=\"${nextProp}\">`","* fold: -> creates foldable content, with all content until the fold close being inside (fold triggers a break)","* break: -> used to make new lines","max-width: 50%;","<div class=\"preview\">","changedPosts.push(post)","let failed = false","if (['open', 'close'].includes(nextProp.toLowerCase())) {","const postHashes = fs.readdirSync('./output/posts').reduce((acc, post) => ({ ...acc, [post]: getFolderHash(`./output/posts/${post}`) }), {})","needScript = true","update()","const value = style[key]","function smartCopyFile(from, to) {","function setValue(key, value) {","const fs = require('fs')","async function generateLinkPreviews() {","console.error('Error pushing changes to GitHub:', error)","else if (nextProp.length == 5) //is in format #rgba","paddles.map(() => Math.round(height / fontSize / 2))","browser = await puppeteer.launch({","const postsCreated = mem.postsCreated ?? {}","function getOrderedLinesOfCode() {","const postPaths = []","ctx.fillStyle = 'rgb(0,255,0)'","else if (nextProp.length == 7) //is in format #rrggbb","<!-- <meta name=\"description\" content=\"meta description link\" /> -->","ctx.fillRect(x * fontSize, 0, fontSize, height)","mem.numberOfLines = countLinesOfCode()","ball.ly = ball.y","//some helper functions to make more readable code","async function update() {","inPar = part.indexOf('(') > part.indexOf(')')","flex-direction: column;","if (!failed)","font-family: 'Fira Code', monospace;","scan(`./output/posts/${name}`, postPath)","padding: 1px;","#content {","function smartRemoveExtra(path, allowed) {","lastAlign = undefined //to make the next line trigger a new block","getOutputPaths(fullPath, out)","reject(`Stderr: ${stderr}`)","function fillColumns() {","if (fs.existsSync(`${postPath}/preview.txt`)) preview = markup.translate(fs.readFileSync(`${postPath}/preview.txt`, 'utf8'))","const oldPostHashes = mem.postHashes ?? {}","if (lastWidth != window.innerWidth || lastHeight != innerHeight) {","<meta property=\"twitter:image\" content=\"meta image link\" />","id: foldId,","const fullPath = path.join(currentPath, item)","const markup = require('./markup.js')","function getUniqueLinesOfCode() {","return html","let commitMessage","addedFiles.push(key)","let [lastWidth, lastHeight] = [0, 0]","window.dispatchEvent(new Event('resize'))","* COMMENT: -> \"comments\" out the line, must be alone in the tag bracket, and the first thing in the line: |[COMMENT]","* slice + toLowerCase","smartMakeDir('./output/posts')","const background = await import('./background.js')","padding: 5px;","function getMem() {","fs.copyFileSync(from, to)","<!-- post link -->","function countLinesOfCode(directory = './', lineCount = 0) {","const fold = folds.pop()","function runGenerateWebsite() {","return Promise.resolve()","scanDirectory('./')","style.size = nextProp.toLowerCase()","align-items: center;","if (Math.random() < .1) {","} else if (prefix == '3') {","for (let x = 0; x < width / fontSize; x++)","if (headX + 1 < grid.length && (snake[2].x != headX + 1 || trys > 50)) {","const interval = setInterval(() => {","if (Object.keys(defaultStyle).includes(nextProp.toLowerCase()))","if (fs.existsSync(`${postPath}/title.txt`)) title = markup.translate(fs.readFileSync(`${postPath}/title.txt`, 'utf8'), 1 / 4)","snakes = new Array(3).fill(0).map(() => new Array(25).fill(0).map(() => ({ x: Math.floor(Math.random() * grid.length), y: Math.floor(Math.random() * grid[0].length) })))","color: #0f0;","out.push(`font-size:${value}`)","if (fs.statSync(`${path}/${file}`).isDirectory())","let text = `|[click to ${fold.open ? 'close' : 'open'}]`","color: #0f0","snake[0].y++","await page.goto(`http://localhost:8080//posts/${post}/index.html`);","let codeLines = []","style.bold = true","#posts {","radius: 1,","function generatePostCard(postPath) {","currentBackground = await import(backgroundPaths[backgroundIndex])","function execAsync(command, options) {","the tags are below, items in the first column are the keywords, items in the second column are values to be used.","return","nextLine += '&nbsp;'","return { scan: dontScan, count: dontCount, path: dontPath }","#returnButton {","if (fileHashes[key] == undefined)","console.log('done')","return out","if (['xx-small', 'x-small', 'smaller', 'small', 'medium', 'large', 'larger', 'x-large', 'xx-large'].includes(nextProp.toLowerCase()))","* align: -> sets which direction text should align (changing align triggers a break)","const totalChanges = addedFiles.length + changedFiles.length + removedFiles.length","text-decoration: underline;","if (currentBackground.update != undefined) await currentBackground.update(canvas, ctx)","let mem = JSON.parse(fs.readFileSync('./mem.json', 'utf8'))","script.onload = r","return acc + part + '; '","ctx.fillText('0', (ball.lx + dir.x) * fontSize, (ball.ly + dir.y) * fontSize)","let removedFiles = []","width: 100%;","resolve()","values in the second column with a ?[] signify that the value is optional","let [width, height] = [0, 0]","margin: 50px 0 50px 0;","</body>","let title = name","if (changedFiles.length > 0) changes.push(`changed ${changedFiles.length} file${changedFiles.length == 1 ? '' : 's'}: ${changedFiles.join(', ')}`)","})","if (needWords) {","if (changes.length == 1) {","* * rgb([r],[g],[b],[a])","parent.appendChild(div)","code {","function getValue(key) {","<meta property=\"twitter:card\" content=\"summary_large_image\" />","acc[acc.length - 1] += part","columns = [...columns, ...new Array(Math.ceil(width / fontSize)).fill(0).map(() => [])].splice(0, Math.ceil(width / fontSize))","const lca = (str, i) => str.charAt(i).toLowerCase()","reject(error)","const mem = getMem()","ctx.fillStyle = `rgb(0,${grid[headX][headY]},0)`","lastWidth = window.innerWidth","if (acc.length > 0 && typeof acc[acc.length - 1] == 'string') {","else if (lowerProp == 'align') {","<meta property=\"twitter:image\" content=\"https://jacks-project-hub.vercel.app/preview.png\" />","</script>","generateMainPage(postPaths)","};","setTimeout(() => {","ctx.fillText('1', index * Math.floor(width / fontSize - 1) * fontSize, (paddle + i) * fontSize)","src: url('./firaCode.ttf') format('truetype');","fs.readdirSync('../').forEach(projectDiv => {","// stat update script link","ctx.fillText('1', headX * fontSize, headY * fontSize)","fs.mkdirSync(path.dirname(to), { recursive: true, force: true })","align: 'left',","html += `<br><video src=\"./${nextProp}\" controls alt=\"${nextProp}\"></video>`","* * #[rgb] -> each range is in the value 0-f in base 16","let html = fs.readFileSync('./output/index.html', 'utf8')","<div style=\"cursor: pointer; text-align:${fold.style.align};\" onclick=\"window.markup.folder(event)\">","return hashSum.digest('hex')","console.error('Error fetching mem for stats:', error)","if (words == undefined) return","mixPaths()","<canvas id=\"backgroundCanvas\"></canvas>","* size: -> sets the text size","<meta property=\"twitter:url\" content=\"meta url link\" />","if (index >= arr.length - 3) return acc","display: flex;","'word-wrap:break-word',","","text-align: center;","console.log('Generating website')","<div id=\"title\">","<meta property=\"og:image\" content=\"https://jacks-project-hub.vercel.app/preview.png\" />","style.color = defaultStyle.color","style.italic = !style.italic","event.stopPropagation()","export function update(canvas,ctx) {","if (ball.x == 0) ball.sx = 1","html = html.replace('<!-- title name link -->', name)","smartCopyFile('./postBackgroundManager.js', `./output/posts/${name}/backgroundManager.js`)","resolve(stdout)","balls[i].sx = Math.floor(Math.random() * 2) * 2 - 1","* showMarkup: -> sets whether the markup tags will be hidden (defaults to false)","postPaths.push(`../${projectDiv}/${projectItem}`)","process.stderr.on('data', (data) => {","fs.mkdirSync(path)","case 3:","mem.uniqueLines = getUniqueLinesOfCode()","mem.postsCreated = postsCreated","style[nextProp.toLowerCase()] = defaultStyle[nextProp.toLowerCase()]","style.size = defaultStyle.size","border: 5px solid #3339;",".then(mem => {","fs.readdirSync(`../${projectDiv}`).forEach(projectItem => {","if (style.code) nextLine = `<code>${nextLine}</code>`","This markup uses tags in |[] clumps mixed with text to style.","if (mem.outputHash != newHash) {","else if (['off', 'false'].includes(nextProp.toLowerCase()))",".then(data => {","html += nextLine","server.kill()","if (fs.lstatSync(`../${projectDiv}/${projectItem}`).isDirectory() && projectItem.split('blogPost_')[0] == '')","<div id=\"posts\">","smartCopyDir(`${postPath}/${file}`, `./output/posts/${name}/${file}`, { recursive: true })",")","</head>","* * !-> sets size to the default size","* * !-> toggles bold text","const changed = checkForChanges()","if (props.length > index + 1 && Number(props[index + 2]) > 0 && Number(props[index + 2] != 1))","* * !-> toggles italics","let currentBackground = {}","if (stats.isDirectory() && !ignoredPaths.scan.includes(fullPath)) {","exec(command, options, (error, stdout, stderr) => {","<meta property=\"og:title\" content=\"Jack's project hub\" />","style.showMarkup = !style.showMarkup","fillGrid(canvas, ctx)","const x = Math.floor(Math.random() * grid.length)","mem.outputHash = newHash","for (const file of fs.readdirSync('./output/posts'))","ctx.fillRect((ball.lx + dir.x) * fontSize, (ball.ly + dir.y) * fontSize, fontSize, fontSize)","outputHashChanged = true","fs.rmSync(path, { recursive: true, force: true })","let siteMem = {}","function resetCanvas(canvas, ctx) {","if (cycle && minTimePerBackground - (Date.now() - backgroundStarted) <= blurTime && !blurred) {","offsets = []","if (Math.random() < .1) drip(colum, index)","// Force push the changes to the remote repository","ball.y += ball.sy","${title}","let dontScan = []","smartCopyFile('./firaCode.ttf', './output/firaCode.ttf')","foldId++","const postsUpdated = mem.postsUpdated ?? {}","nextLine += '<br>'","let html = fs.readFileSync('./blankPost.html', 'utf8')","<meta property=\"og:url\" content=\"https://jacks-project-hub.vercel.app/\" />","let wrapperStyle = cssRuleFromStyles({}, defaultStyle, scale)","await page.waitForSelector('#backgroundCanvas')","console.error(data.toString())","@media (max-aspect-ratio: 1/1) {","else if (lowerProp == 'space') {","const fileBuffer = fs.readFileSync(filePath)","smartCopyDir('./mainPageBackgrounds', './output/backgrounds')","files.forEach(file => {","paddles[0] -= Math.max(-3, Math.min(3, paddles[0] - (balls[0].y - (paddleSize - 1) / 2)))","style.align = nextProp.toLowerCase()","html = html.split('meta description link').join(String(fs.readFileSync(`${postPath}/preview.txt`, 'utf-8')).slice(0, 100) + '...')","await reloadPage()","ball.x += ball.sx","background-color: #3336;","postPaths.forEach(async postPath => {","console.log('Taking preview screenshots.')","columns.forEach((colum, x) => {","ctx.fillStyle = item[1]","resetCanvas(canvas, ctx)","if (!fs.existsSync(path))","#returnToTopButton span {","transform: translate(-50%, -50%);","else","style.code = false","ctx.fillRect(index * Math.floor(width / fontSize - 1) * fontSize, paddle * fontSize, fontSize, paddleSize * fontSize)","backgroundPaths.push(`./posts/${postPath.split('blogPost_')[1]}/background.js`)","html = html.replace('// stat update script link', `const postName = '${name}'\\r\\n${fs.readFileSync('./updatePostStats.js', 'utf8')}`.split('\\r\\n').join('\\r\\n '))","const postPaths = findPostPaths()","if (typeof props == 'string') {","* * on | true","codeLines[path].push(item)","#returnButton>a {","canvas.classList.add('blur')","function saveAndCopyStats(updateLines) {","function recurse(path) {","if (updateLines) {","while (item.split(' ').length > 1)","function smartMakeDir(path) {","} catch (err) { }","ctx.fillRect((ball.x + dir.x) * fontSize, (ball.y + dir.y) * fontSize, fontSize, fontSize)","smartCopyFile('./blankSite.html', './output/index.html')","return total","console.log(`Screenshotting post: ${post}`)","ctx.fillText('1', (ball.x + dir.x) * fontSize, (ball.y + dir.y) * fontSize)","smartRemoveExtra('./output/backgrounds', backgroundPaths.map(path => path.slice(14)))","addStat(div, `Created out of <code>${mem.numberOfLines}</code> lines of code`)","style.strike = false","function cleanPostsFolder(postPaths) {","border: 2px solid #0f06;","style.color = ('#' + lca(nextProp, 1) + lca(nextProp, 3) + lca(nextProp, 5) + lca(nextProp, 7)).toLowerCase()","object-fit:fill;","code: false,","blurred = true","* strike: -> sets whether text will have strikethrough","else if (lowerProp == 'break') {","'margin:0',","smartMakeDir(`./output/posts/${name}`)","mem.fileHashes = getOutputPaths().map(path => path).reduce((acc, path) => ({ ...acc, [path.replace('output', '.')]: hashFileContents(path) }), {})","justify-content: center;","const folder = event.target.closest('.folder')","script.src = backgroundPaths[backgroundIndex]","saveData[key] = value","if (part.slice(0, 1) == '|') return '|[' + part.slice(1)","<div class=\"markup\" style=\"${wrapperStyle}\">${needScript ? `\\r\\n<script>${scriptString}</script>` : ''}","else if (lowerProp == 'script' && nextProp != undefined) {","fillGrid(canvas,ctx)","} else if (stats.isFile() && !ignoredPaths.scan.includes(fullPath))","if (changed) {","function getFolderHash(startPath) {","const postsMissingPreview = fs.readdirSync('./output/posts').filter(post => !fs.existsSync(`./output/posts/${post}/preview.png`))","offsets = [...offsets, ...new Array(Math.ceil(width / fontSize)).fill(0)].splice(0, Math.ceil(width / fontSize))","document.addEventListener('DOMContentLoaded', async () => {","ctx.fillText(chars[grid[x][y] % chars.length], x * fontSize, y * fontSize)","else if (lowerProp == 'italic') {","${html}","function getOutputPaths(currentPath = './output', out = []) {","console.log('\\nChange detected')","const word = (words[Math.floor(Math.random() * words.length)] + ' ').split('')","if (backgroundIndex == 0) mixPaths()","const lowerProp = prop.toLowerCase()","return (sessionStorage.getItem('markup') != undefined ? JSON.parse(sessionStorage.getItem('markup')) : {})[key]","return codeLines","* default: -> changes the default used for many tags, but does not change the default retrospectively","codeLines[path] = []","backgroundPaths.push(...fs.readdirSync('./mainPageBackgrounds').map(path => `./backgrounds/${path}`))","setValue(`id_${folder.dataset.id}`, open)","codeLines = codeLines.sort(() => Math.random() * 2 - 1)",".post {","out.push(fullPath)","sessionStorage.setItem('markup', JSON.stringify(saveData))","left: 0;","let hasMoved = false","border: 5px solid #0f06;","else if (lowerProp == 'showmarkup') {","defaultStyle: {","postsCreated[post] = Date.now()","clearInterval(interval)","if (window.markup == undefined) {","bold: false,","},","columns.forEach((colum, index) => {","let nextLine = ''","part = part.map(part => part.split(' ')).flat()","let folds = []","return acc + part","background-color: #0006;","if (part.includes(']')) return [[part.slice(0, part.indexOf(']'))], part.slice(part.indexOf(']') + 1)]","if (getValue(`id_${folder.dataset.id}`) != undefined) {","if (['on', 'true'].includes(nextProp.toLowerCase()))","let saveData = sessionStorage.getItem('markup') != undefined ? JSON.parse(sessionStorage.getItem('markup')) : {}","top: 50%;","else if (lowerProp == 'video') {","else if (lowerProp == 'tab') {","module.exports = {","style: { ...style },","addStat(div, `Last updated: <code>${Math.floor((Date.now() - mem.lastUpdate) / 86400000)}</code> days ago`)","let fireworks = []","function removeKey(key) {","const children = folder.children","maxRadius: Math.ceil(Math.random() * 15 + 10),","font-size: 2em;","lastHeight = window.innerHeight","function checkForChanges() {","http.get('http://localhost:8080', (res) => {","#returnToTopButton {","mem.lastFileHashes = fileHashes","* image: -> embeds an image in the next line"],"orderedLines":{"blankPost.html":["<!DOCTYPE html>","<html lang=\"en\">","<title><!-- title name link --></title>","","<head>","    <meta charset=\"UTF-8\">","    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">","    <link rel=\"stylesheet\" href=\"../../postStyles.css\">","    <script src=\"./backgroundManager.js\"></script>","","    <!-- Primary Meta Tags -->","    <meta name=\"title\" content=\"meta title link\" />","    <meta name=\"description\" content=\"meta description link\" />","","    <!-- Open Graph / Facebook -->","    <meta property=\"og:type\" content=\"website\" />","    <meta property=\"og:url\" content=\"meta url link\" />","    <meta property=\"og:title\" content=\"meta title link\" />","    <meta property=\"og:description\" content=\"meta description link\" />","    <meta property=\"og:image\" content=\"meta image link\" />","","    <!-- Twitter -->","    <meta property=\"twitter:card\" content=\"summary_large_image\" />","    <meta property=\"twitter:url\" content=\"meta url link\" />","    <meta property=\"twitter:title\" content=\"meta title link\" />","    <meta property=\"twitter:description\" content=\"meta description link\" />","    <meta property=\"twitter:image\" content=\"meta image link\" />","</head>","","<body>","    <canvas id=\"backgroundCanvas\"></canvas>","    <div id=\"overlay\">","        <div id=\"content\">","            <div id=\"title\">","                <!-- title markup link -->","            </div>","            <div id=\"stats\">","                <!-- will autofill on website load -->","                <script>","                    // stat update script link","                </script>","            </div>","            <div id=\"returnButton\">","                <a href=\"../../\">Home</a>","            </div>","            <div id=\"post\">","                <!-- post link -->","            </div>","            <div id=\"returnToTopButton\">","                <span onclick=\"window.scroll({top:0,left:0,behavior:'smooth'})\">Return to top</span>","            </div>","        </div>","    </div>","</body>","","</html>"],"blankSite.html":["<!DOCTYPE html>","<html lang=\"en\">","<title>Jack's project hub</title>","","<head>","    <meta charset=\"UTF-8\">","    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">","    <link rel=\"stylesheet\" href=\"./siteStyles.css\">","    <script src=\"./backgroundManager.js\"></script>","    <script src=\"./updateStats.js\"></script>","","    <!-- Primary Meta Tags -->","    <meta name=\"title\" content=\"Jack's project hub\" />","    <!-- <meta name=\"description\" content=\"meta description link\" /> -->","","    <!-- Open Graph / Facebook -->","    <meta property=\"og:type\" content=\"website\" />","    <meta property=\"og:url\" content=\"https://jacks-project-hub.vercel.app/\" />","    <meta property=\"og:title\" content=\"Jack's project hub\" />","    <!-- <meta property=\"og:description\" content=\"meta description link\" /> -->","    <meta property=\"og:image\" content=\"https://jacks-project-hub.vercel.app/preview.png\" />","","    <!-- Twitter -->","    <meta property=\"twitter:card\" content=\"summary_large_image\" />","    <meta property=\"twitter:url\" content=\"https://jacks-project-hub.vercel.app/\" />","    <meta property=\"twitter:title\" content=\"Jack's project hub\" />","    <!-- <meta property=\"twitter:description\" content=\"meta description link\" /> -->","    <meta property=\"twitter:image\" content=\"https://jacks-project-hub.vercel.app/preview.png\" />","</head>","","<body>","    <canvas id=\"backgroundCanvas\"></canvas>","    <div id=\"overlay\">","        <div id=\"content\">","            <div id=\"titleDiv\">","                <div id=\"titleText\">","                    Custom blog","                </div>","                <div id=\"stats\">","                    <!-- will autofill on website load -->","                </div>","            </div>","            <div id=\"posts\">","                <!-- posts link -->","            </div>","        </div>","    </div>","</body>","","</html>"],"deploy.js":["const fs = require('fs')","const path = require('path')","const { exec } = require('child_process')","    ;","(async () => {","    function execAsync(command, options) {","        return new Promise((resolve, reject) => {","            exec(command, options, (error, stdout, stderr) => {","                if (error) {","                    reject(error)","                } else {","                    resolve(stdout || stderr)","                }","            })","        })","    }","","    process.chdir('C:\\\\Users\\\\jack\\\\Home\\\\Programming\\\\blog projects\\\\blog generator')","","    let mem = JSON.parse(fs.readFileSync('./mem.json', 'utf8'))","","    const fileHashes = mem.fileHashes","    const lastFileHashes = mem.lastFileHashes ?? {}","","    let addedFiles = []","    let changedFiles = []","    let removedFiles = []","","    Object.keys(fileHashes).forEach(key => {","        if (lastFileHashes[key] == undefined)","            addedFiles.push(key)","        else if (lastFileHashes[key] != fileHashes[key])","            changedFiles.push(key)","    })","    Object.keys(lastFileHashes).forEach(key => {","        if (fileHashes[key] == undefined)","            removedFiles.push(key)","    })","","    const totalChanges = addedFiles.length + changedFiles.length + removedFiles.length","    if (totalChanges == 0) {","        console.log('No changes')","        return","    }","","    let changes = []","    if (addedFiles.length > 0) changes.push(`added ${addedFiles.length} file${addedFiles.length == 1 ? '' : 's'}: ${addedFiles.join(', ')}`)","    if (changedFiles.length > 0) changes.push(`changed ${changedFiles.length} file${changedFiles.length == 1 ? '' : 's'}: ${changedFiles.join(', ')}`)","    if (removedFiles.length > 0) changes.push(`removed ${removedFiles.length} file${removedFiles.length == 1 ? '' : 's'}: ${removedFiles.join(', ')}`)","","    let commitMessage","","    if (changes.length == 1) {","        commitMessage = changes[0]","        commitMessage = commitMessage.charAt(0).toUpperCase() + commitMessage.slice(1)","    } else commitMessage = `${totalChanges} changes: ${changes.join(', ')}`","","    process.chdir('.\\\\output')","","    try {","        // Check if .git directory exists, if not, initialize a new repository","        try {","            fs.accessSync(path.join('./', '.git'))","        } catch {","            await execAsync(`git init`, { cwd: './' })","            await execAsync(`git remote add origin https://github.com/AlgorithmAiden/jacks_project_hub.git`, { cwd: './' })","        }","","        // Ensure the main branch exists","        try {","            await execAsync(`git checkout -b main`, { cwd: './' })","        } catch {","            await execAsync(`git checkout main`, { cwd: './' })","        }","","        // Add all changes to staging","        await execAsync(`git add .`, { cwd: './' })","","        // Commit the changes","        await execAsync(`git commit -m \"${commitMessage}\"`, { cwd: './' })","","        // Force push the changes to the remote repository","        await execAsync('git push -f origin main', { cwd: './' })","","        console.log(commitMessage)","","        mem.lastFileHashes = fileHashes","        fs.writeFileSync('../mem.json', JSON.stringify(mem), 'utf8')","    } catch (error) {","        console.error('Error pushing changes to GitHub:', error)","    }","})()"],"generateWebsite.js":["const fs = require('fs')","const path = require('path')","const crypto = require('crypto')","const markup = require('./markup.js')","const puppeteer = require('puppeteer')","const { exec } = require('child_process')","const http = require('http')","","","// function wrapFunction(func, prefunc) {","//     return (...args) => {","//         prefunc(...args)","//         func(...args)","//     }","// }","","// fs.writeFileSync = wrapFunction(fs.writeFileSync, (to) => console.log('write', to))","// fs.copyFileSync = wrapFunction(fs.copyFileSync, (...args) => console.log('copy', ...args))","","const ignoredPaths = (() => {","    let dontScan = []","    let dontCount = []","    let dontPath = []","    let paths = fs.readFileSync('./ignoredPaths.txt', 'utf8').split('\\r\\n')","    paths.forEach(path => {","        if (path.slice(0, 2) == '//') return","        const prefix = path.slice(0, 1)","        const line = path.slice(2)","        if (prefix == '0') {","            dontScan.push(line)","            dontCount.push(line)","            dontPath.push(line)","        } else if (prefix == '1') {","            dontCount.push(line)","        } else if (prefix == '2') {","            dontScan.push(line)","        } else if (prefix == '3') {","            dontScan.push(line)","            dontCount.push(line)","        }","    })","    return { scan: dontScan, count: dontCount, path: dontPath }","})()","","function smartCopyFile(from, to) {","    const exists = fs.existsSync(to)","    if (!exists || fs.statSync(from).mtime.getTime() !== fs.statSync(to).mtime.getTime()) {","        if (!exists)","            fs.mkdirSync(path.dirname(to), { recursive: true, force: true })","        fs.copyFileSync(from, to)","    }","}","","function smartMakeDir(path) {","    if (!fs.existsSync(path))","        fs.mkdirSync(path)","}","","function smartCopyDir(from, to) {","    for (const file of fs.readdirSync(from))","        if (fs.statSync(`${from}/${file}`).isDirectory())","            smartCopyDir(`${from}/${file}`, `${to}/${file}`)","        else","            smartCopyFile(`${from}/${file}`, `${to}/${file}`)","}","","function smartRemoveExtra(path, allowed) {","    for (const file of fs.readdirSync(path))","        if (!allowed.includes(file)) {","            console.log(path, allowed, file, `${path}/${file}`)","            fs.rmSync(`${path}/${file}`, { recursive: true, force: true })","        }","}","","function setupFolder() {","    process.chdir('C:\\\\Users\\\\jack\\\\Home\\\\Programming\\\\blog projects\\\\blog generator')","    if (!fs.existsSync('./output')) fs.mkdirSync('./output')","    smartRemoveExtra('./output', ['.git', 'backgrounds', 'posts', 'backgroundManager.js', 'firaCode.ttf', 'index.html', 'mem.json', 'postStyles.css', 'siteStyles.css', 'updateStats.js', 'preview.png'])","    smartCopyFile('./blankSite.html', './output/index.html')","    smartCopyFile('./siteStyles.css', './output/siteStyles.css')","    smartCopyFile('./postStyles.css', './output/postStyles.css')","    smartCopyFile('./updateHomeStats.js', './output/updateStats.js')","    smartCopyFile('./firaCode.ttf', './output/firaCode.ttf')","    smartMakeDir('./output/backgrounds')","    smartMakeDir('./output/posts')","}","","function findPostPaths() {","    const postPaths = []","    fs.readdirSync('../').forEach(projectDiv => {","        if (fs.lstatSync(`../${projectDiv}`).isDirectory())","            fs.readdirSync(`../${projectDiv}`).forEach(projectItem => {","                if (fs.lstatSync(`../${projectDiv}/${projectItem}`).isDirectory() && projectItem.split('blogPost_')[0] == '')","                    postPaths.push(`../${projectDiv}/${projectItem}`)","            })","    })","    return postPaths","}","","function cleanPostsFolder(postPaths) {","    postPaths = postPaths.map(post => post.split('blogPost_')[1])","    for (const file of fs.readdirSync('./output/posts'))","        if (!postPaths.includes(file))","            fs.rmSync(`./output/posts/${file}`, { recursive: true, force: true })","}","","function setupLiveBackgrounds(postPaths) {","    const backgroundPaths = []","","    postPaths.forEach(async postPath => {","        if (fs.existsSync(`${postPath}/background.js`)) {","            fs.readFileSync(`${postPath}/background.js`, 'utf8').split('\\r\\n').forEach(line => {","                if (line.slice(0, 26) == '//includeInHomeBackgrounds')","                    backgroundPaths.push(`./posts/${postPath.split('blogPost_')[1]}/background.js`)","            })","        }","    })","","    backgroundPaths.push(...fs.readdirSync('./mainPageBackgrounds').map(path => `./backgrounds/${path}`))","","    smartRemoveExtra('./output/backgrounds', backgroundPaths.map(path => path.slice(14)))","","    smartCopyDir('./mainPageBackgrounds', './output/backgrounds')","    fs.writeFileSync('./output/backgroundManager.js', `const backgroundPaths = ${JSON.stringify(backgroundPaths)};\\r\\n${fs.readFileSync('./siteBackgroundManager.js', 'utf8')}`, 'utf8')","}","","function hashFileContents(filePath) {","    const fileBuffer = fs.readFileSync(filePath)","    const hashSum = crypto.createHash('md5')","    hashSum.update(fileBuffer)","    return hashSum.digest('hex')","}","","function getFolderHash(startPath) {","    let combinedHash = crypto.createHash('md5')","","    function recurseDir(currentPath) {","        const items = fs.readdirSync(currentPath)","        items.forEach(item => {","            const fullPath = path.join(currentPath, item)","            const stat = fs.statSync(fullPath)","            if (stat.isDirectory() && !ignoredPaths.scan.includes(fullPath)) {","                recurseDir(fullPath)","            } else if (stat.isFile() && !ignoredPaths.scan.includes(fullPath) && item !== 'preview.png') {","                const fileHash = hashFileContents(fullPath)","                combinedHash.update(fileHash)","            }","        })","    }","","    recurseDir(startPath)","    return combinedHash.digest('hex')","}","","function countLinesOfCode(directory = './', lineCount = 0) {","    const files = fs.readdirSync(directory)","","    let total = 0","","    files.forEach(file => {","        const fullPath = path.join(directory, file)","        const stats = fs.statSync(fullPath)","","        if (stats.isDirectory() && !ignoredPaths.count.includes(fullPath)) {","            total += countLinesOfCode(fullPath)","        } else if (stats.isFile() && !ignoredPaths.count.includes(fullPath))","            total += fs.readFileSync(fullPath, 'utf8').split('\\r\\n').length","    })","    return total","}","","function getUniqueLinesOfCode() {","    let codeLines = []","","    function readFile(path) {","        let fileContent = fs.readFileSync(path, 'utf8').split('\\r\\n')","","        fileContent.forEach(item => {","            while (item.split('  ').length > 1)","                item = item.split('  ').join(' ')","            item = item.trim()","            if (!codeLines.includes(item))","                codeLines.push(item)","        })","    }","","    function scanDirectory(directory) {","        const files = fs.readdirSync(directory)","","        files.forEach(file => {","            const fullPath = path.join(directory, file)","            const stats = fs.statSync(fullPath)","","            if (stats.isDirectory() && !ignoredPaths.scan.includes(fullPath)) {","                scanDirectory(fullPath)","            } else if (stats.isFile() && !ignoredPaths.scan.includes(fullPath))","                readFile(fullPath)","        })","    }","","    scanDirectory('./')","","    codeLines = codeLines.sort(() => Math.random() * 2 - 1)","","    return codeLines","}","","function getOrderedLinesOfCode() {","    let codeLines = {}","","    function readFile(path) {","        let fileContent = fs.readFileSync(path, 'utf8').split('\\r\\n')","","        codeLines[path] = []","","        fileContent.forEach(item => {","            codeLines[path].push(item)","        })","    }","","    function scanDirectory(directory) {","        const files = fs.readdirSync(directory)","","        files.forEach(file => {","            const fullPath = path.join(directory, file)","            const stats = fs.statSync(fullPath)","","            if (stats.isDirectory() && !ignoredPaths.scan.includes(fullPath)) {","                scanDirectory(fullPath)","            } else if (stats.isFile() && !ignoredPaths.scan.includes(fullPath))","                readFile(fullPath)","        })","    }","","    scanDirectory('./')","","    return codeLines","}","","function getMem() {","    return JSON.parse(fs.readFileSync('./mem.json', 'utf8'))","}","","function saveMem(mem) {","    fs.writeFileSync('./mem.json', JSON.stringify(mem), 'utf8')","}","","function generatePost(postPath) {","    const name = postPath.split('blogPost_')[1]","","    smartMakeDir(`./output/posts/${name}`)","","    fs.readdirSync(postPath).forEach(file => {","        if (!['script.txt', 'title.txt', 'preview.txt'].includes(file)) {","            if (fs.statSync(`${postPath}/${file}`).isDirectory())","                smartCopyDir(`${postPath}/${file}`, `./output/posts/${name}/${file}`, { recursive: true })","            else","                smartCopyFile(`${postPath}/${file}`, `./output/posts/${name}/${file}`)","        }","    })","","    smartCopyFile('./postBackgroundManager.js', `./output/posts/${name}/backgroundManager.js`)","","    let html = fs.readFileSync('./blankPost.html', 'utf8')","","    html = html.split('meta title link').join(`${name} - Jack's project hub`)","    html = html.split('meta url link').join(`https://jacks-project-hub.vercel.app/posts/${name}/`)","    html = html.split('meta description link').join(String(fs.readFileSync(`${postPath}/preview.txt`, 'utf-8')).slice(0, 100) + '...')","    html = html.split('meta image link').join(`https://jacks-project-hub.vercel.app/posts/${name}/preview.png`)","    html = html.replace('<!-- title name link -->', name)","    let title = name","    if (fs.existsSync(`${postPath}/title.txt`)) title = markup.translate(fs.readFileSync(`${postPath}/title.txt`, 'utf8'))","    html = html.replace('<!-- title markup link -->', title)","    html = html.replace('// stat update script link', `const postName = '${name}'\\r\\n${fs.readFileSync('./updatePostStats.js', 'utf8')}`.split('\\r\\n').join('\\r\\n                    '))","    html = html.replace('<!-- post link -->', markup.translate(fs.readFileSync(`${postPath}/script.txt`, 'utf8')))","","","","    fs.writeFileSync(`./output/posts/${name}/index.html`, html, 'utf8')","","    function scan(to, from) {","        for (const file of fs.readdirSync(to))","            if (!fs.existsSync(`${from}/${file}`) && !['backgroundManager.js', 'index.html', 'preview.png'].includes(file))","                fs.rmSync(`${to}/${file}`, { recursive: true, force: true })","            else if (fs.statSync(`${to}/${file}`).isDirectory())","                scan(`${to}/${file}`, `${from}/${file}`)","    }","    scan(`./output/posts/${name}`, postPath)","","    for (const file of ['script.txt', 'title.txt', 'preview.txt'])","        if (fs.existsSync(`./output/posts/${name}/${file}`))","            fs.rmSync(`./output/posts/${name}/${file}`, { recursive: true, force: true })","}","","function generatePostCard(postPath) {","    const name = postPath.split('blogPost_')[1]","    let title = name","    if (fs.existsSync(`${postPath}/title.txt`)) title = markup.translate(fs.readFileSync(`${postPath}/title.txt`, 'utf8'), 1 / 4)","    let html = `<div class=\"post\" onclick=\"window.location.href='./posts/${name}/'\">`","    html += `","    <div class=\"title\">","        ${title}","    </div>","    `","","    let preview","    if (fs.existsSync(`${postPath}/preview.txt`)) preview = markup.translate(fs.readFileSync(`${postPath}/preview.txt`, 'utf8'))","    if (preview != undefined)","        html += `","        <div class=\"preview\">","            ${preview}","        </div>","        `","","    html += '</div>'","","    return html","}","","const changedPosts = []","let outputHashChanged = false","function saveAndCopyStats(updateLines) {","    const newHash = getFolderHash('./output')","    const mem = getMem()","    if (mem.outputHash != newHash) {","        mem.lastUpdate = Date.now()","        updated = true","        outputHashChanged = true","    }","    mem.outputHash = newHash","    if (updateLines) {","        mem.numberOfLines = countLinesOfCode()","        mem.uniqueLines = getUniqueLinesOfCode()","        mem.orderedLines = getOrderedLinesOfCode()","    }","","    function getOutputPaths(currentPath = './output', out = []) {","        const items = fs.readdirSync(currentPath)","        items.forEach(item => {","            const fullPath = path.join(currentPath, item)","            const stat = fs.statSync(fullPath)","            if (stat.isDirectory() && !ignoredPaths.path.includes(fullPath)) {","                getOutputPaths(fullPath, out)","            } else if (stat.isFile() && !ignoredPaths.path.includes(fullPath))","                out.push(fullPath)","        })","        return out","    }","    mem.fileHashes = getOutputPaths().map(path => path).reduce((acc, path) => ({ ...acc, [path.replace('output', '.')]: hashFileContents(path) }), {})","    const postHashes = fs.readdirSync('./output/posts').reduce((acc, post) => ({ ...acc, [post]: getFolderHash(`./output/posts/${post}`) }), {})","    const oldPostHashes = mem.postHashes ?? {}","    const postsUpdated = mem.postsUpdated ?? {}","    fs.readdirSync('./output/posts').forEach(post => {","        if (postHashes[post] != oldPostHashes[post]) {","            postsUpdated[post] = Date.now()","            changedPosts.push(post)","        }","    })","    mem.postHashes = postHashes","    mem.postsUpdated = postsUpdated","    const postsCreated = mem.postsCreated ?? {}","    fs.readdirSync('./output/posts').forEach(post => {","        if (postsCreated[post] == undefined)","            postsCreated[post] = Date.now()","    })","    mem.postsCreated = postsCreated","    let siteMem = {}","    for (let key of ['lastScan', 'lastUpdate', 'outputHash', 'numberOfLines', 'uniqueLines', 'orderedLines', 'postsUpdated', 'postsCreated', 'postHashes']) siteMem[key] = mem[key]","    fs.writeFileSync('./output/mem.json', JSON.stringify(siteMem), 'utf8')","    saveMem(mem)","}","","function generateMainPage(postPaths) {","    let html = fs.readFileSync('./output/index.html', 'utf8')","","    html = html.replace('<!-- posts link -->', postPaths.map(postPath => generatePostCard(postPath)).join('\\n '))","","    fs.writeFileSync('./output/index.html', html, 'utf8')","}","","async function generateLinkPreviews() {","    const postsMissingPreview = fs.readdirSync('./output/posts').filter(post => !fs.existsSync(`./output/posts/${post}/preview.png`))","    const missingMainPreview = !fs.existsSync('./output/preview.png')","    if (outputHashChanged || missingMainPreview || changedPosts.length || postsMissingPreview.length)","        return new Promise(async resolve => {","            console.log('Taking preview screenshots.')","            const server = await new Promise((resolve, reject) => {","                const server = exec('http-server ./output -p 8080', (error, stdout, stderr) => {","                    if (error) {","                        console.error(`exec error: ${error}`)","                        reject(error)","                        return","                    }","                    console.log(`stdout: ${stdout}`)","                    console.error(`stderr: ${stderr}`)","                })","                const interval = setInterval(() => {","                    http.get('http://localhost:8080', (res) => {","                        if (res.statusCode === 200) {","                            clearInterval(interval)","                            resolve(server)","                        }","                    }).on('error', () => { })","                }, 100)","                server.on('error', (err) => {","                    clearInterval(interval)","                    reject(err)","                })","            })","            const browser = await puppeteer.launch()","            const page = await browser.newPage()","            await page.setViewport(await page.evaluate(() => ({","                width: 2000,","                height: 1000","            })))","            if (outputHashChanged || missingMainPreview) {","                console.log('Screenshotting main page.')","                await page.goto(`http://localhost:8080/index.html`);","                (await page.target().createCDPSession()).send('Network.clearBrowserCache')","                await page.reload({ waitUntil: ['networkidle0'], bypassCache: true })","                await page.waitForSelector('#backgroundCanvas')","                await page.evaluate(() => {","                    const canvas = document.getElementById('backgroundCanvas')","                    canvas.style.transition = 'all 0s'","                    canvas.style.filter = 'blur(0px)'","                })","                await page.screenshot({ path: './output/preview.png' })","            }","            for (const post of [...changedPosts, ...postsMissingPreview].sort().reduce((acc, item) => {","                if (acc[acc.length - 1] !== item) acc.push(item)","                return acc","            }, [])) {","                console.log(`Screenshotting post: ${post}`)","                await page.goto(`http://localhost:8080//posts/${post}/index.html`);","                (await page.target().createCDPSession()).send('Network.clearBrowserCache')","                await page.reload({ waitUntil: ['networkidle0'], bypassCache: true })","                await page.screenshot({ path: `./output/posts/${post}/preview.png` })","            }","            await browser.close()","            server.kill()","            function recurse(path) {","                let failed = false","                try {","                    for (const file of fs.readFileSync(path))","                        if (fs.statSync(`${path}/${file}`).isDirectory())","                            try {","                                recurse(`${path}/${file}`)","                            } catch (err) { failed = true }","                        else","                            try {","                                fs.rmSync(`${path}/${file}`, { recursive: true, force: true })","                            } catch (err) { failed = true }","                    if (!failed)","                        fs.rmSync(path, { recursive: true, force: true })","                } catch (err) { }","            }","            recurse('./temp')","            console.log('Screenshots taken.')","            resolve()","        })","    else","        return Promise.resolve()","};","","(async () => {","    const start = Date.now()","    console.log('Generating website')","    setupFolder()","","    const postPaths = findPostPaths()","","    cleanPostsFolder(postPaths)","","    setupLiveBackgrounds(postPaths)","","    postPaths.forEach(postPath => generatePost(postPath))","","    generateMainPage(postPaths)","","    saveAndCopyStats(true)","","    await generateLinkPreviews()","","    console.log('Website generated in', Date.now() - start, 'ms')","})()"],"livePreview.js":["const fs = require('fs')","const puppeteer = require('puppeteer')","const { exec } = require('child_process')","const http = require('http')","","let server, browser, page","async function reloadPage() {","    if (page == undefined) {","        console.log('2')","        fs.mkdirSync('./liveServer')","        console.log(3)","        fs.readdirSync('./output').forEach(file => {","            console.log(file)","            if (file != '.git') fs.cpSync(`./output/${file}`, `./liveServer/${file}`)","        })","        console.log('done')","        // fs.cpSync('./output', './liveServer')","        await new Promise((resolve, reject) => {","            server = exec('http-server ./liveServer -p 8080', (error, stdout, stderr) => {","                if (error) {","                    console.error(`exec error: ${error}`)","                    reject(error)","                    return","                }","                console.log(`stdout: ${stdout}`)","                console.error(`stderr: ${stderr}`)","            })","            const interval = setInterval(() => {","                http.get('http://localhost:8080', (res) => {","                    if (res.statusCode === 200) {","                        clearInterval(interval)","                        resolve()","                    }","                }).on('error', () => { })","            }, 100)","            server.on('error', (err) => {","                clearInterval(interval)","                reject(err)","            })","        })","        browser = await puppeteer.launch({","            headless: false,","            args: ['--start-fullscreen']","        })","        page = await browser.newPage()","        await page.goto(`http://localhost:8080/index.html`)","    }","    (await page.target().createCDPSession()).send('Network.clearBrowserCache')","    await page.reload({ waitUntil: ['networkidle0'], bypassCache: true })","    await page.setViewport(await page.evaluate(() => ({","        width: window.screen.width,","        height: window.screen.height","    })))","    await page.evaluate(() => {","        window.dispatchEvent(new Event('resize'))","    })","}","","function runGenerateWebsite() {","    return new Promise((resolve, reject) => {","        const process = exec('node generateWebsite.js', (error, stdout, stderr) => {","            if (error) {","                reject(`Error: ${error.message}`)","                return","            }","            if (stderr) {","                reject(`Stderr: ${stderr}`)","                return","            }","            resolve(stdout)","        })","","        process.stdout.on('data', (data) => {","            console.log(data.toString())","        })","","        process.stderr.on('data', (data) => {","            console.error(data.toString())","        })","    })","}","","let lastFolderModificationTimes = {}","function checkForChanges() {","    const postPaths = []","    fs.readdirSync('../').forEach(projectDiv => {","        if (fs.lstatSync(`../${projectDiv}`).isDirectory())","            fs.readdirSync(`../${projectDiv}`).forEach(projectItem => {","                if (fs.lstatSync(`../${projectDiv}/${projectItem}`).isDirectory() && projectItem.split('blogPost_')[0] == '')","                    postPaths.push(`../${projectDiv}/${projectItem}`)","            })","    })","    let changed = false","    for (const path of postPaths) {","        let maxMTime = 0","        function scanDir(path) {","            for (const file of fs.readdirSync(path)) {","                const stats = fs.statSync(`${path}/${file}`)","                if (stats.isDirectory()) scanDir(`${path}/${file}`)","                maxMTime = Math.max(maxMTime, stats.mtime.getTime())","            }","        }","        scanDir(path)","        if (lastFolderModificationTimes[path] != maxMTime) changed = true","        lastFolderModificationTimes[path] = maxMTime","    }","    return changed","}","","async function run() {","","    const changed = checkForChanges()","","    if (changed) {","        const start = Date.now()","        console.log('\\nChange detected')","        await runGenerateWebsite()","        console.log(1)","        await reloadPage()","        console.log('Done in ', Date.now() - start, ' ms')","    }","","    setTimeout(run, 100)","}","run()","","setTimeout(() => {","    lastFolderModificationTimes = {}","}, 2500)","","async function close() {","    await browser.close()","    server.kill()","    fs.rmdirSync('./liveServer', { recursive: true, force: true })","    console.log('Killed children')","    process.exit()","}","","process.on('SIGINT', close)","process.on('SIGTERM', close)","process.on('uncaughtException', close)","process.on('exit', close)"],"markup.js":["function cssRuleFromStyles(defaultStyle, style, scale = 1) {","    let out = []","    Object.keys(style).forEach(key => {","        if (defaultStyle[key] != style[key]) {","            const value = style[key]","            if (key == 'color')","                out.push(`color:${value}`)","            else if (key == 'italic')","                out.push(`font-style:${value ? 'italic' : 'normal'}`)","            else if (key == 'bold')","                out.push(`font-weight:${value ? 'bold' : 'normal'}`)","            else if (key == 'size')","                if (scale == 1)","                    out.push(`font-size:${value}`)","                else","                    out.push(`font-size:calc(${value} * ${scale})`)","            else if (key == 'strike')","                out.push(`text-decoration: ${value ? 'line-through' : 'none'}`)","        }","    })","    return out.join('; ') + ';'","}","","function err(message) {","    throw new Error(`Error parsing markup: ${message}`)","}","","//some helper functions to make more readable code","","/**"," * charAt + toLowerCase"," */","const lca = (str, i) => str.charAt(i).toLowerCase()","","/**"," * slice + toLowerCase"," */","const ls = (str, start, stop) => str.slice(start, stop).toLowerCase()","","//used so I can check nextProp without it existing","const emptyString = new Array(2 ** 16).fill(' ').join('')","","//the script injected into the output html","function script() {","    (() => {","        const wrapper = document.currentScript.parentNode","        function setValue(key, value) {","            let saveData = sessionStorage.getItem('markup') != undefined ? JSON.parse(sessionStorage.getItem('markup')) : {}","            saveData[key] = value","            sessionStorage.setItem('markup', JSON.stringify(saveData))","        }","        function getValue(key) {","            return (sessionStorage.getItem('markup') != undefined ? JSON.parse(sessionStorage.getItem('markup')) : {})[key]","        }","        function removeKey(key) {","            let saveData = sessionStorage.getItem('markup') != undefined ? JSON.parse(sessionStorage.getItem('markup')) : {}","            delete saveData[key]","            sessionStorage.setItem('markup', JSON.stringify(saveData))","        }","        document.addEventListener('DOMContentLoaded', () => {","            [...wrapper.getElementsByClassName('folder')].forEach(folder => {","                if (getValue(`id_${folder.dataset.id}`) != undefined) {","                    const children = folder.children","                    const open = getValue(`id_${folder.dataset.id}`)","                    children[0].innerHTML = children[0].innerHTML.replace(open ? 'open' : 'close', open ? 'close' : 'open')","                    children[1].style.display = open ? '' : 'none'","                }","            })","        })","        if (window.markup == undefined) {","            window.markup = {","                folder(event) {","                    event.stopPropagation()","                    const folder = event.target.closest('.folder')","                    const children = folder.children","                    const open = children[1].style.display == 'none'","                    children[0].innerHTML = children[0].innerHTML.replace(open ? 'open' : 'close', open ? 'close' : 'open')","                    children[1].style.display = open ? '' : 'none'","                    setValue(`id_${folder.dataset.id}`, open)","                }","            }","        }","    })()","}","","let nextGlobalId = 0 //used for anything that needs a unique identifier","","module.exports = {","    defaultStyle: {","        color: '#0f0',","        italic: false,","        bold: false,","        size: 'medium',","        code: false,","        align: 'left',","        showMarkup: false,","        strike: false","    },","    tabSize: 3,","    translate(rawMarkup, scale = 1) {","        markup = rawMarkup.split('\\r\\n').filter(line => line.slice(0, 10) != '|[COMMENT]').join('').split('|[').filter(part => part != '').map(part => {","            if (part.slice(0, 1) == '|') return '|[' + part.slice(1)","            if (part.includes(']')) return [[part.slice(0, part.indexOf(']'))], part.slice(part.indexOf(']') + 1)]","            return part","        }).flat(1).reduce((acc, part) => {","            if (typeof part == 'string')","                if (acc.length > 0 && typeof acc[acc.length - 1] == 'string') {","                    acc[acc.length - 1] += part","                    return acc","                }","                else","                    return [...acc, part]","            while (part.some(part => part.includes(' ')))","                part = part.map(part => part.split(' ')).flat()","            let inPar = false","            part = part.reduce((acc, part) => {","                if (inPar)","                    acc[acc.length - 1] += ' ' + part","                else acc = [...acc, part]","                if (part.indexOf('(') > -1)","                    inPar = part.indexOf('(') > part.indexOf(')')","                else","                    inPar = part.indexOf(')') == -1 && inPar","                return acc","            }, [])","            part = part.filter(item => item != '')","            if (part.length == 0)","                return acc","            else","                return [...acc, part]","        }, []).filter(part => part != '')","","        let defaultStyle = { ...this.defaultStyle }","","        let style = { ...defaultStyle }","","        let lastAlign","","        let folds = []","","        let needScript = false","","        let html = ''","","        let nextLine = ''","","        markup.forEach(props => {","            if (typeof props == 'string') {","                if (style.align != lastAlign) {","                    if (lastAlign != undefined)","                        html += '</div>'","                    html += `<div style=\"text-align:${style.align};\">`","                    lastAlign = style.align","                }","                const cssRules = cssRuleFromStyles(defaultStyle, style, scale)","                let text = nextLine + props","                if (style.code) text = `<code>${text}</code>`","                if (cssRules.length == 1) //take the ; into account","                    html += text","                else","                    html += `<span style=\"${cssRules}\">${text}</span>`","                nextLine = ''","            } else {","                if (style.showMarkup)","                    nextLine += `|[${props.join(' ')}]`","                for (let index = 0; index < props.length; index++) {","                    const prop = props[index]","                    const nextProp = props[index + 1] ?? emptyString","                    const lowerProp = prop.toLowerCase()","","                    if (lowerProp == 'color') {","                        if (ls(nextProp, 0, 1) == '#') { //must be hex","                            if (nextProp.length == 4) //is in format #rgb","                                style.color = nextProp.toLowerCase()","                            else if (nextProp.length == 5) //is in format #rgba","                                if (ls(nextProp, 4, 5) == 'f') //check if alpha is needed","                                    style.color = ls(str, 0, 4)","                                else","                                    style.color = nextProp.toLowerCase()","                            else if (nextProp.length == 7) //is in format #rrggbb","                                if (lca(nextProp, 1) == lca(nextProp, 2) && lca(nextProp, 3) == lca(nextProp, 4) && lca(nextProp, 5) == lca(nextProp, 6)) //check if the color can be shortened","                                    style.color = ('#' + lca(nextProp, 1) + lca(nextProp, 3) + lca(nextProp, 5)).toLowerCase()","                                else","                                    style.color = nextProp.toLowerCase()","                            else if (nextProp.length == 9) //is in format #rrggbbaa","                                if (nextProp.slice(7, 9).toLowerCase() == 'ff') //check if alpha is needed","                                    if (lca(nextProp, 1) == lca(nextProp, 2) && lca(nextProp, 3) == lca(nextProp, 4) && lca(nextProp, 5) == lca(nextProp, 6)) //check if the color can be shortened","                                        style.color = ('#' + lca(nextProp, 1) + lca(nextProp, 3) + lca(nextProp, 5)).toLowerCase()","                                    else","                                        style.color = nextProp.slice(0, 7).toLowerCase()","                                else","                                    if (lca(nextProp, 1) == lca(nextProp, 2) && lca(nextProp, 3) == lca(nextProp, 4) && lca(nextProp, 5) == lca(nextProp, 6) && lca(nextProp, 7) == lca(nextProp, 8)) //check if the color can be shortened","                                        style.color = ('#' + lca(nextProp, 1) + lca(nextProp, 3) + lca(nextProp, 5) + lca(nextProp, 7)).toLowerCase()","                                    else","                                        style.color = nextProp.toLowerCase()","                            else err(`invalid hex code`)","                        } else if (ls(nextProp, 0, 3) == 'rgb') {","                            try {","                                const digits = nextProp.toLowerCase().slice(lca(nextProp, 3) == 'a' ? 5 : 4).split(')')[0].split(',').map(digit => Math.max(0, Math.min(255, Math.round(Number(digit.trim())))).toString(16).padStart(2, '0')).filter((digit, index) => digit != 'ff' || index != 3)","                                if (digits.every(digit => digit.charAt(0) == digit.charAt(1)))","                                    style.color = '#' + digits.reduce((acc, digit) => acc + digit.charAt(0), '')","                                else","                                    style.color = '#' + digits.reduce((acc, digit) => acc + digit, '')","                            } catch {","                                err('invalid rgb')","                            }","                        } else","                            style.color = defaultStyle.color","                    }","","                    else if (lowerProp == 'italic') {","                        if (['on', 'true'].includes(nextProp.toLowerCase()))","                            style.italic = true","                        else if (['off', 'false'].includes(nextProp.toLowerCase()))","                            style.italic = false","                        else","                            style.italic = !style.italic","                    }","","                    else if (lowerProp == 'bold') {","                        if (['on', 'true'].includes(nextProp.toLowerCase()))","                            style.bold = true","                        else if (['off', 'false'].includes(nextProp.toLowerCase()))","                            style.bold = false","                        else","                            style.bold = !style.bold","                    }","","                    else if (lowerProp == 'space') {","                        try {","                            const count = Math.round(Number(nextProp))","                            if (count > 0 && !isNaN(count))","                                nextLine += new Array(count).fill('&nbsp;').join('')","                            else","                                nextLine += '&nbsp;'","                        } catch {","                            nextLine += '&nbsp;'","                        }","                    }","","                    else if (lowerProp == 'tab') {","                        try {","                            const count = Math.round(Number(nextProp) * this.tabSize)","                            if (count > 0 && !isNaN(count))","                                nextLine += new Array(count).fill('&nbsp;').join('')","                            else","                                nextLine += new Array(this.tabSize).fill('&nbsp;').join('')","                        } catch {","                            nextLine += new Array(this.tabSize).fill('&nbsp;').join('')","                        }","                    }","","                    else if (lowerProp == 'break') {","                        if (Number(nextProp) > 0)","                            nextLine += `<div style=\"display:block; height:${Number(nextProp)}em; line-height:${Number(nextProp)}em;\"></div>`","                        else","                            nextLine += '<br>'","                    }","","                    else if (lowerProp == 'size') {","                        if (['xx-small', 'x-small', 'smaller', 'small', 'medium', 'large', 'larger', 'x-large', 'xx-large'].includes(nextProp.toLowerCase()))","                            style.size = nextProp.toLowerCase()","                        else if (Number(nextProp) > 0)","                            style.size = `${Number(nextProp)}px`","                        else","                            style.size = defaultStyle.size","                    }","","                    else if (lowerProp == 'code') {","                        if (['on', 'true'].includes(nextProp.toLowerCase()))","                            style.code = true","                        else if (['off', 'false'].includes(nextProp.toLowerCase()))","                            style.code = false","                        else","                            style.code = !style.code","                    }","","                    else if (lowerProp == 'align') {","                        if (['left', 'center', 'right'].includes(nextProp.toLowerCase()))","                            style.align = nextProp.toLowerCase()","                        else","                            style.align = defaultStyle.align","                    }","","                    else if (lowerProp == 'reset') {","                        if (Object.keys(defaultStyle).includes(nextProp.toLowerCase()))","                            style[nextProp.toLowerCase()] = defaultStyle[nextProp.toLowerCase()]","                        else","                            Object.keys(defaultStyle).forEach(key => style[key] = defaultStyle[key])","","                    }","","                    else if (lowerProp == 'default') {","                        if (nextProp.toLowerCase() == 'global')","                            Object.keys(style).forEach(key => this.defaultStyle[key] = style[key])","                        Object.keys(style).forEach(key => defaultStyle[key] = style[key])","                    }","","                    else if (lowerProp == 'fold') {","                        needScript = true","                        if (['open', 'close'].includes(nextProp.toLowerCase())) {","                            let foldId = folds.length + 1","                            while (rawMarkup.includes(`fold_${foldId}`))","                                foldId++","                            folds.push({","                                id: foldId,","                                style: { ...style },","                                open: nextProp.toLowerCase() == 'open'","                            })","                            if (lastAlign != undefined)","                                html += '</div>'","                            html += `fold_${foldId}`","                            html += `<div style=\"text-align:${style.align};\">`","                        } else {","                            if (lastAlign != undefined)","                                html += '</div>'","                            lastAlign = undefined //to make the next line trigger a new block","                            const fold = folds.pop()","                            const content = html.split(`fold_${fold.id}`)[1]","                            html = html.slice(0, html.indexOf(`fold_${fold.id}`))","                            const cssRules = cssRuleFromStyles(defaultStyle, fold.style, scale)","                            let text = `|[click to ${fold.open ? 'close' : 'open'}]`","                            if (style.code) text = `<code>${text}</code>`","                            if (cssRules.length != 1)","                                text = `<span style=\"${cssRules}\">${text}</span>`","","                            html += `","                            <div class=\"folder\" data-id=${nextGlobalId++}>","                                <div style=\"cursor: pointer; text-align:${fold.style.align};\" onclick=\"window.markup.folder(event)\">","                                    ${text}","                                </div>","                                <div ${fold.open ? '' : 'style=\"display:none;\"'}>","                                    ${content}","                                </div>","                            </div>","                            `","                        }","                    }","","                    else if (lowerProp == 'image') {","                        if (style.align != lastAlign) {","                            if (lastAlign != undefined)","                                html += '</div>'","                            html += `<div style=\"text-align:${style.align};\">`","                            lastAlign = style.align","                        }","                        if (props.length > index + 1 && Number(props[index + 2]) > 0 && Number(props[index + 2] != 1))","                            html += `<br><img src=\"./${nextProp}\" alt=\"${nextProp}\" style=\"width:${Number(props[index + 2] * 100)}%\">`","                        else","                            html += `<br><img src=\"./${nextProp}\" alt=\"${nextProp}\">`","                    }","","                    else if (lowerProp == 'showmarkup') {","                        if (['on', 'true'].includes(nextProp.toLowerCase()))","                            style.showMarkup = true","                        else if (['off', 'false'].includes(nextProp.toLowerCase()))","                            style.showMarkup = false","                        else","                            style.showMarkup = !style.showMarkup","                    }","","                    else if (lowerProp == 'video') {","                        if (style.align != lastAlign) {","                            if (lastAlign != undefined)","                                html += '</div>'","                            html += `<div style=\"text-align:${style.align};\">`","                            lastAlign = style.align","                        }","                        if (props.length > index + 1 && Number(props[index + 2]) > 0 && Number(props[index + 2] != 1))","                            html += `<br><video src=\"./${nextProp}\" controls alt=\"${nextProp}\" style=\"width:${Number(props[index + 2] * 100)}%\"></video>`","                        else","                            html += `<br><video src=\"./${nextProp}\" controls alt=\"${nextProp}\"></video>`","                    }","","                    else if (lowerProp == 'strike') {","                        if (['on', 'true'].includes(nextProp.toLowerCase()))","                            style.strike = true","                        else if (['off', 'false'].includes(nextProp.toLowerCase()))","                            style.strike = false","                        else","                            style.strike = !style.strike","                    }","","                    else if (lowerProp == 'script' && nextProp != undefined) {","                        nextLine += `<script src=\"${nextProp}\"></script>`","                    }","                }","            }","        })","","        if (nextLine != '') {","            if (style.align != lastAlign) {","                if (lastAlign != undefined)","                    html += '</div>'","                html += `<div style=\"text-align:${style.align};\">`","                lastAlign = style.align","            }","            const cssRules = cssRuleFromStyles(defaultStyle, style, scale)","            if (style.code) nextLine = `<code>${nextLine}</code>`","            if (cssRules.length == 1) //take the ; into account","                html += nextLine","            else","                html += `<span style=\"${cssRules}\">${nextLine}</span>`","        }","","        if (lastAlign != undefined)","            html += '</div>'","","        let wrapperStyle = cssRuleFromStyles({}, defaultStyle, scale)","        wrapperStyle += [","            'margin:0',","            'padding:0',","            'word-wrap:break-word',","            'width:100%',","            'height:100%'","        ].join('; ') + ';'","","        const scriptString = script.toString().slice(25).split('\\r\\n').reduce((acc, part) => acc + '; ' + part.split('//')[0], '').split('').reduce((acc, part, index, arr) => {","            if (index >= arr.length - 3) return acc","            if (part == ' ' && acc.charAt(acc.length - 1) == ' ')","                return acc","            return acc + part","        }, '').split('{; ').join('{').split('; }').join('}').split('; ').reduce((acc, part) => {","            if (acc.slice(acc.length - 2) == '; ' && part == '') return acc","            return acc + part + '; '","        }, '')","","        return `","        <div class=\"markup\" style=\"${wrapperStyle}\">${needScript ? `\\r\\n<script>${scriptString}</script>` : ''}","            ${html}","        </div>","        `","    }","}","","/**","This markup uses tags in |[] clumps mixed with text to style. ","the text is evaluated from beginning to end, any text being rendered using the current style.","to change the style, add |[] with tags and values inside, this sets the style for everything after, until changes.","tags are evaluated by order they appear, in a |[].","tags are found by scanning for |[ and reading until ], and are separated by spaces.","to render a |[ you can put |[|, this will not read tags like normal.","you can put ] anywhere, and unless it is closing a tag area it will render.","the tags are below, items in the first column are the keywords, items in the second column are values to be used.","a !-> in the second column indicates the action that happens if non of the other options are there","values in the second column with a [] signify that you put a value there (but don't include the [])","values in the second column with a ?[] signify that the value is optional",""," * color: -> sets the text color to the most efficient hex value that represents prop 1"," * * #[rgb] -> each range is in the value 0-f in base 16"," * * #[rgba]"," * * #[rrggbb]"," * * #[rrggbbaa]"," * * rgb([r],[g],[b]) -> each value is in the range 0-255"," * * rgb([r],[g],[b],[a])"," * * rgba([r],[g],[b])"," * * rgba([r],[g],[b],[a])"," * * !-> sets color to the default color"," * italic: -> sets whether text will be italic"," * * on | true"," * * off | false"," * * !-> toggles italics"," * bold: -> sets whether text will be bold"," * * on | true"," * * off | false"," * * !-> toggles bold text"," * space: -> adds [number] spaces using '&nbsp;' after"," * * [number]"," * * !-> defaults to 1"," * tabs: -> adds [number] spaces * tabSize (defaults to 3) after"," * * [number]"," * * !-> defaults to 1"," * break: -> used to make new lines"," * * [number] -> creates a break and then inserts a blank line of [number] lines in height, then second break"," * * !-> just adds <br>"," * size: -> sets the text size"," * * xx-small | x-small | smaller | small | medium | large | larger | x-large | xx-large -> uses the default sizes"," * * [number] -> (viewport width + viewport height) / 2 * [number], [number] is in the range [number] >= 0.02"," * * !-> sets size to the default size"," * code: -> sets whether text will be code using <code></code>"," * * on | true"," * * off | false"," * * !-> toggles code text"," * align: -> sets which direction text should align (changing align triggers a break)"," * * left | center | right"," * * !-> sets align to the default align"," * reset: "," * * [property] -> sets [property] to the default [property]"," * * !-> resets the full style to the default style"," * default: -> changes the default used for many tags, but does not change the default retrospectively"," * * global -> sets the global default, this is the default used to generate the local (the default always used) default, also sets the local default "," * * !-> sets the default style to the current style"," * fold: -> creates foldable content, with all content until the fold close being inside (fold triggers a break)"," * * open | close -> starts a fold that is open | closed at start"," * * !-> closes a fold"," * image: -> embeds an image in the next line"," * * [path] [size] -> size is relative to the div, so a size of 1 would fill the space, or a size of .5 could fit two images side by side"," * * [path] !-> defaults to 1"," * showMarkup: -> sets whether the markup tags will be hidden (defaults to false)"," * * on | true"," * * off | false"," * * !-> toggles"," * COMMENT: -> \"comments\" out the line, must be alone in the tag bracket, and the first thing in the line: |[COMMENT]"," * video: -> embeds a video in the next line"," * * [path] [size] -> size is relative to the div, so a size of 1 would fill the space, or a size of .5 could fit two videos side by side"," * * [path] !-> defaults to 1"," * strike: -> sets whether text will have strikethrough"," * * on | true"," * * off | false"," * * !-> toggles strikethrough"," * script: -> embeds a piece of live code"," * * [path] -> where to find the script","","","for example: to create 'before green it was boring' with 'green' being green you could use the following markup:","before |[color #0f0]green|[color] it was boring","the first tag clump sets the color to green (#0f0), the second clump resets color to the default"," */"],"output\\backgroundManager.js":["const backgroundPaths = [\"./posts/Making a custom blog/background.js\",\"./backgrounds/fireworks.js\",\"./backgrounds/hiddenSnakes.js\",\"./backgrounds/pong.js\",\"./backgrounds/rain.js\",\"./backgrounds/randomSymbols.js\",\"./backgrounds/uniqueCode.js\"];","document.addEventListener('DOMContentLoaded', async () => {","    function mixPaths() {","        const lastPath = backgroundPaths[backgroundPaths.length - 1]","        do backgroundPaths.sort(() => Math.random() * 2 - 1)","        while (backgroundPaths.length > 1 && backgroundPaths[0] == lastPath)","    }","    mixPaths()","","    let backgroundIndex = -1","","    const minTimePerBackground = 1000 * 30","    const blurTime = 1000 * 1","    let backgroundStarted = 0","","    let blurred = false","","    let cycle = true","","    let currentBackground = {}","","    let loadedBackgrounds = []","","    const maxUps = 60","    let lastUpdate = 0","","    async function update() {","        lastUpdate = Date.now()","","        const canvas = document.getElementById('backgroundCanvas')","        const ctx = canvas.getContext('2d')","","        if (cycle && minTimePerBackground - (Date.now() - backgroundStarted) <= blurTime && !blurred) {","            canvas.classList.add('blur')","            blurred = true","        }","","        if (cycle && Date.now() - backgroundStarted >= minTimePerBackground) {","            if (currentBackground.stop != undefined) await currentBackground.stop(canvas, ctx)","            backgroundIndex = (backgroundIndex + 1) % backgroundPaths.length","            if (backgroundIndex == 0) mixPaths()","            if (!loadedBackgrounds.includes(backgroundPaths[backgroundIndex])) await new Promise(r => {","                const script = document.createElement('script')","                script.type = 'module'","                script.src = backgroundPaths[backgroundIndex]","                script.onload = r","                document.head.appendChild(script)","                loadedBackgrounds.push(backgroundPaths[backgroundIndex])","            })","            currentBackground = await import(backgroundPaths[backgroundIndex])","            if (currentBackground.start != undefined) await currentBackground.start(canvas, ctx)","            canvas.classList.remove('blur')","            blurred = false","            backgroundStarted = Date.now()","        }","        if (currentBackground.update != undefined) await currentBackground.update(canvas, ctx)","","        //has to be set after the first update so the first background will always get loaded","        cycle = (backgroundPaths.length > 1)","","        requestAnimationFrame(() => setTimeout(update, 1000 / maxUps - (Date.now() - lastUpdate)))","    }","    update()","})"],"output\\backgrounds\\fireworks.js":["const fontSize = (/android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i).test(navigator.userAgent || navigator.vendor || window.opera) ? 50 : 25","","let [width, height] = [0, 0]","","let [lastWidth, lastHeight] = [0, 0]","","let grid = [[]]","","function fillGrid(canvas, ctx) {","    width = canvas.width = window.innerWidth","    height = canvas.height = window.innerHeight","","    grid = [...grid, ...new Array(Math.ceil(width / fontSize)).fill(0).map(() => [])].splice(0, Math.ceil(width / fontSize) + 1).map(colum => [...colum, ...new Array(Math.ceil(height / fontSize)).fill(0)].splice(0, Math.ceil(height / fontSize) + 1))","","    ctx.fillStyle = '#000'","    ctx.fillRect(0, 0, width, height)","    ctx.font = `${fontSize}px 'Fira Code'`","    ctx.textBaseline = 'top'","","    for (let x = 0; x < width / fontSize; x++)","        for (let y = 0; y < height / fontSize; y++) {","            ctx.fillStyle = 'rgb(0,50,0)'","            ctx.fillText('0', x * fontSize, y * fontSize)","        }","}","","let fireworks = []","let lastFirework = 0","","export function update(canvas, ctx) {","    if (lastWidth != window.innerWidth || lastHeight != innerHeight)","        fillGrid(canvas, ctx)","    lastWidth = window.innerWidth","    lastHeight = window.innerHeight","","    ctx.font = `${fontSize}px 'Fira Code'`","    ctx.textBaseline = 'top'","","    if (Date.now() - lastFirework >= 1000) {","        lastFirework = Date.now()","        fireworks.push({","            x: Math.floor(Math.random() * grid.length),","            y: Math.floor(Math.random() * grid[0].length),","            counter: 0,","            radius: 1,","            maxRadius: Math.ceil(Math.random() * 15 + 10),","            speed: Math.ceil(Math.random() * 10)","        })","    }","","    fireworks.forEach((firework, index) => {","        for (let x = Math.max(firework.x - firework.radius, 0); x < Math.min(firework.x + firework.radius, grid.length); x++)","            for (let y = Math.max(firework.y - firework.radius, 0); y < Math.min(firework.y + firework.radius, grid[0].length); y++) {","                const distance = Math.abs(x - firework.x) + Math.abs(y - firework.y) + 1","                if (distance <= firework.radius) {","                    ctx.fillStyle = '#000'","                    ctx.fillRect(x * fontSize, y * fontSize, fontSize, fontSize)","                    ctx.fillStyle = `rgb(0,${255 - firework.radius * (205 / firework.maxRadius)},0)`","                    ctx.fillText(distance < firework.radius ? '0' : '1', x * fontSize, y * fontSize)","                }","            }","        if (firework.radius == firework.maxRadius) {","            for (let x = Math.max(firework.x - firework.radius, 0); x < Math.min(firework.x + firework.radius, grid.length); x++)","                for (let y = Math.max(firework.y - firework.radius, 0); y < Math.min(firework.y + firework.radius, grid[0].length); y++)","                    if (Math.abs(x - firework.x) + Math.abs(y - firework.y) <= firework.radius) {","                        ctx.fillStyle = '#000'","                        ctx.fillRect(x * fontSize, y * fontSize, fontSize, fontSize)","                        ctx.fillStyle = 'rgb(0,50,0)'","                        ctx.fillText('0', x * fontSize, y * fontSize)","                    }","            fireworks.splice(index, 1)","        } else if ((firework.counter = (firework.counter + 1) % firework.speed) == 0) firework.radius++","    })","","}","export function start(canvas, ctx) {","    grid = [[]]","    fillGrid(canvas, ctx)","}"],"output\\backgrounds\\hiddenSnakes.js":["const fontSize = (/android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i).test(navigator.userAgent || navigator.vendor || window.opera) ? 50 : 25","","let [width, height] = [0, 0]","","let [lastWidth, lastHeight] = [0, 0]","","let grid = [[]]","","let snakes = []","","function fillGrid(canvas, ctx) {","    width = canvas.width = window.innerWidth","    height = canvas.height = window.innerHeight","","    grid = [...grid, ...new Array(Math.ceil(width / fontSize)).fill(0).map(() => [])].splice(0, Math.ceil(width / fontSize) + 1).map(colum => [...colum, ...new Array(Math.ceil(height / fontSize)).fill(50)].splice(0, Math.ceil(height / fontSize) + 1))","","    ctx.fillStyle = '#000'","    ctx.fillRect(0, 0, width, height)","    ctx.font = `${fontSize}px 'Fira Code'`","    ctx.textBaseline = 'top'","","    for (let x = 0; x < width / fontSize; x++)","        for (let y = 0; y < height / fontSize; y++) {","            ctx.fillStyle = `rgb(0,${grid[x][y]},0)`","            ctx.fillText('0', x * fontSize, y * fontSize)","        }","}","","export function update(canvas, ctx) {","    if (lastWidth != window.innerWidth || lastHeight != innerHeight)","        fillGrid(canvas, ctx)","    lastWidth = window.innerWidth","    lastHeight = window.innerHeight","","    ctx.font = `${fontSize}px 'Fira Code'`","    ctx.textBaseline = 'top'","","    let snake = snakes[Math.floor(Math.random() * snakes.length)]","    let tailX = snake[snake.length - 1].x","    let tailY = snake[snake.length - 1].y","    grid[tailX][tailY] -= 25","    ctx.fillStyle = '#000'","    ctx.fillRect(tailX * fontSize, tailY * fontSize, fontSize, fontSize)","    ctx.fillStyle = `rgb(0,${grid[tailX][tailY]},0)`","    ctx.fillText('0', tailX * fontSize, tailY * fontSize)","    for (let index = snake.length - 1; index > 0; index--) {","        snake[index] = { ...snake[index - 1] }","    }","    let headX = snake[0].x","    let headY = snake[0].y","    let hasMoved = false","    let trys = 0","    while (!hasMoved) {","        trys++","        switch (Math.floor(Math.random() * 4)) {","            case 0:","                if (headX > 0 && (snake[2].x != headX - 1 || trys > 50)) {","                    snake[0].x--","                    hasMoved = true","                }","                break","            case 1:","                if (headY > 0 && (snake[2].y != headY - 1 || trys > 50)) {","                    snake[0].y--","                    hasMoved = true","                }","                break","            case 2:","                if (headX + 1 < grid.length && (snake[2].x != headX + 1 || trys > 50)) {","                    snake[0].x++","                    hasMoved = true","                }","                break","            case 3:","                if (headY + 1 < grid[0].length && (snake[2].y != headY + 1 || trys > 50)) {","                    snake[0].y++","                    hasMoved = true","                }","                break","        }","    }","    grid[snake[0].x][snake[0].y] += 50","    ctx.fillStyle = '#000'","    ctx.fillRect(headX * fontSize, headY * fontSize, fontSize, fontSize)","    ctx.fillStyle = `rgb(0,${grid[headX][headY]},0)`","    ctx.fillText('1', headX * fontSize, headY * fontSize)","}","","export function start(canvas, ctx) {","    grid = [[]]","    fillGrid(canvas, ctx)","","    snakes = new Array(3).fill(0).map(() => new Array(25).fill(0).map(() => ({ x: Math.floor(Math.random() * grid.length), y: Math.floor(Math.random() * grid[0].length) })))","}"],"output\\backgrounds\\pong.js":["const fontSize = (/android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i).test(navigator.userAgent || navigator.vendor || window.opera) ? 50 : 25","","let [width, height] = [0, 0]","","let [lastWidth, lastHeight] = [0, 0]","","let balls = new Array(fontSize == 50 ? 2 : 5).fill(0)","let paddles = [0, 0]","","let paddleSize","","function resetCanvas(canvas, ctx) {","    width = canvas.width = window.innerWidth","    height = canvas.height = window.innerHeight","","    ctx.fillStyle = '#000'","    ctx.fillRect(0, 0, width, height)","    ctx.font = `${fontSize}px 'Fira Code'`","    ctx.textBaseline = 'top'","","    ctx.fillStyle = 'rgb(0,50,0)'","    for (let x = 0; x < width / fontSize; x++)","        for (let y = 0; y < height / fontSize; y++)","            ctx.fillText('0', x * fontSize, y * fontSize)","}","","const dirs = [{ x: 0, y: 0 }, { x: 1, y: 0 }, { x: -1, y: 0 }, { x: 0, y: 1 }, { x: 0, y: -1 }]","","export function update(canvas, ctx) {","    if (lastWidth != window.innerWidth || lastHeight != innerHeight)","        resetCanvas(canvas, ctx)","    lastWidth = window.innerWidth","    lastHeight = window.innerHeight","","    for (let x of [0, Math.floor(width / fontSize - 1)]) {","        ctx.fillStyle = '#000'","        ctx.fillRect(x * fontSize, 0, fontSize, height)","        ctx.fillStyle = 'rgb(0,50,0)'","        for (let y = 0; y < height / fontSize; y++)","            ctx.fillText('0', x * fontSize, y * fontSize)","    }","    balls.forEach(ball =>","        dirs.forEach(dir => {","            ctx.fillStyle = '#000'","            ctx.fillRect((ball.lx + dir.x) * fontSize, (ball.ly + dir.y) * fontSize, fontSize, fontSize)","","            ctx.fillStyle = 'rgb(0,50,0)'","            ctx.fillText('0', (ball.lx + dir.x) * fontSize, (ball.ly + dir.y) * fontSize)","        })","    )","    ctx.fillStyle = 'rgb(0,255,0)'","    balls.forEach(ball =>","        dirs.forEach(dir => {","            ctx.fillStyle = '#000'","            ctx.fillRect((ball.x + dir.x) * fontSize, (ball.y + dir.y) * fontSize, fontSize, fontSize)","","            ctx.fillStyle = 'rgb(0,255,0)'","            ctx.fillText('1', (ball.x + dir.x) * fontSize, (ball.y + dir.y) * fontSize)","        })","    )","","    ctx.fillStyle = 'rgb(0,255,0)'","    paddles.forEach((paddle, index) => {","        ctx.fillStyle = '#000'","        ctx.fillRect(index * Math.floor(width / fontSize - 1) * fontSize, paddle * fontSize, fontSize, paddleSize * fontSize)","","        ctx.fillStyle = '#0f0'","        for (let i = 0; i < paddleSize; i++) {","            ctx.fillText('1', index * Math.floor(width / fontSize - 1) * fontSize, (paddle + i) * fontSize)","        }","    })","    balls.forEach(ball => {","        ball.lx = ball.x","        ball.ly = ball.y","","        ball.x += ball.sx","        ball.y += ball.sy","","        if (ball.x == 0) ball.sx = 1","        if (ball.y == 0) ball.sy = 1","        if (ball.x == Math.floor(width / fontSize) - 2) ball.sx = -1","        if (ball.y == Math.floor(height / fontSize) - 2) ball.sy = -1","    })","","    balls.sort((a, b) => (a.sx * width + a.x) - (b.sx * width + b.x))","    paddles[0] -= Math.max(-3, Math.min(3, paddles[0] - (balls[0].y - (paddleSize - 1) / 2)))","","    balls.unshift(balls.pop())","    paddles[1] -= Math.max(-3, Math.min(3, paddles[1] - (balls[0].y - (paddleSize - 1) / 2)))","}","","export function start(canvas, ctx) {","    resetCanvas(canvas, ctx)","    for (let i = 0; i < balls.length; i++) {","        balls[i] = {}","        balls[i].sx = Math.floor(Math.random() * 2) * 2 - 1","        balls[i].sy = Math.floor(Math.random() * 2) * 2 - 1","        balls[i].x = Math.round(width / fontSize / 2) + Math.round((i - balls.length / 2 + .5) * width / fontSize / balls.length / 2)","        balls[i].y = Math.round(height / fontSize / 2) + Math.round((Math.random() * 2 - 1) * (height / fontSize / 3))","        balls[i].lx = balls[i].x","        balls[i].ly = balls[i].y","    }","    paddles.map(() => Math.round(height / fontSize / 2))","    paddleSize = Math.round(height / fontSize / 3 / 2) * 2 + 1","}"],"output\\backgrounds\\rain.js":["const fontSize = (/android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i).test(navigator.userAgent || navigator.vendor || window.opera) ? 50 : 25","","let [width, height] = [0, 0]","","let [lastWidth, lastHeight] = [0, 0]","","let columns = []","let offsets = []","","let words","","let needWords = false","","fetch('./mem.json')","    .then(response => response.json())","    .then(data => {","        const specialChars = '`~!@#$%^&*()_-+={[}]|\\\\:;\"\\'<,>.?/1234567890'.split('')","        words = data.uniqueLines.join(' ')","        while (specialChars.some(char => words.includes(char)))","            specialChars.forEach(char =>","                words = words.split(char).join(' ')","            )","        words = words.split(' ').filter(word => word != '')","","        if (needWords) {","            for (let i = 0; i < height * 2; i += fontSize)","                columns.forEach((colum, index) => drip(colum, index))","            needWords = false","        }","    })","    .catch(error => {","        console.error('Error fetching mem for stats:', error)","    })","","","function fillColumns() {","    columns = [...columns, ...new Array(Math.ceil(width / fontSize)).fill(0).map(() => [])].splice(0, Math.ceil(width / fontSize))","    offsets = [...offsets, ...new Array(Math.ceil(width / fontSize)).fill(0)].splice(0, Math.ceil(width / fontSize))","}","","function drip(colum, index) {","    if (Math.random() < .1) {","        if (offsets[index] == 0) {","            const word = (words[Math.floor(Math.random() * words.length)] + '   ').split('')","            offsets[index] = word.length","            const color = `rgb(0,${Math.round(Math.random() * 205) + 50},0)`","            word.forEach((char, index) => colum.unshift([word[word.length - index - 1], color]))","        } else","            offsets[index]--","    } else if (offsets[index] > 0) offsets[index]--","    else colum.unshift([''])","    colum = colum.splice(Math.ceil(height / fontSize) + offsets[index])","}","","export function update(canvas, ctx) {","    if (words == undefined) return","","    if (lastWidth != window.innerWidth || lastHeight != innerHeight) {","        width = canvas.width = window.innerWidth","        height = canvas.height = window.innerHeight","        fillColumns()","    }","    lastWidth = window.innerWidth","    lastHeight = window.innerHeight","","    ctx.font = `${fontSize}px 'Fira Code'`","    ctx.textBaseline = 'top'","","    ctx.fillStyle = '#000'","    ctx.fillRect(0, 0, width, height)","","    columns.forEach((colum, x) => {","        colum.forEach((item, y) => {","            ctx.fillStyle = item[1]","            ctx.fillText(item[0], x * fontSize, (y - offsets[x]) * fontSize)","        })","    })","","    columns.forEach((colum, index) => {","        if (Math.random() < .1) drip(colum, index)","    })","}","","export function start(canvas) {","    width = canvas.width = window.innerWidth","    height = canvas.height = window.innerHeight","    columns = []","    offsets = []","    fillColumns()","    if (words == undefined)","        needWords = true","    else","        for (let i = 0; i < height * 2; i += fontSize)","            columns.forEach((colum, index) => drip(colum, index))","}"],"output\\backgrounds\\randomSymbols.js":["const fontSize = (/android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i).test(navigator.userAgent || navigator.vendor || window.opera) ? 50 : 25","","const chars = '`~!@#$%^&*()_-+={[}]|\\\\:;\"\\'<,>.?/'.split('')","","let [width, height] = [0, 0]","","let [lastWidth, lastHeight] = [0, 0]","","let grid = [[]]","","function fillGrid(canvas,ctx) {","    width = canvas.width = window.innerWidth","    height = canvas.height = window.innerHeight","","    grid = [...grid, ...new Array(Math.ceil(width / fontSize)).fill(0).map(() => [])].splice(0, Math.ceil(width / fontSize) + 1).map(colum => [...colum, ...new Array(Math.ceil(height / fontSize)).fill(0).map(() => Math.floor(Math.random() * 255))].splice(0, Math.ceil(height / fontSize) + 1))","","    ctx.fillStyle = '#000'","    ctx.fillRect(0, 0, width, height)","    ctx.font = `${fontSize}px 'Fira Code'`","    ctx.textBaseline = 'top'","","    for (let x = 0; x < width / fontSize; x++)","        for (let y = 0; y < height / fontSize; y++) {","            ctx.fillStyle = `rgb(0,${grid[x][y]},0)`","            ctx.fillText(chars[grid[x][y] % chars.length], x * fontSize, y * fontSize)","        }","}","","export function update(canvas,ctx) {","    if (lastWidth != window.innerWidth || lastHeight != innerHeight)","        fillGrid(canvas,ctx)","    lastWidth = window.innerWidth","    lastHeight = window.innerHeight","","    ctx.font = `${fontSize}px 'Fira Code'`","    ctx.textBaseline = 'top'","","    for (let i = 0; i < Math.random() * 25; i++) {","        const x = Math.floor(Math.random() * grid.length)","        const y = Math.floor(Math.random() * grid[0].length)","        grid[x][y] = Math.floor(Math.random() * 255)","        ctx.fillStyle = '#000'","        ctx.fillRect(x * fontSize, y * fontSize, fontSize, fontSize)","        ctx.fillStyle = `rgb(0,${grid[x][y]},0)`","        ctx.fillText(chars[grid[x][y] % chars.length], x * fontSize, y * fontSize)","    }","}","","export function start(canvas,ctx) {","    fillGrid(canvas,ctx)","}","","export function stop() {","    grid = [[]]","}"],"output\\backgrounds\\uniqueCode.js":["const fontSize = (/android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i).test(navigator.userAgent || navigator.vendor || window.opera) ? 50 : 25","","let [width, height] = [0, 0]","","let [lastWidth, lastHeight] = [0, 0]","","let uniqueLines, lineColors, fontWidth, numberOfUniqueLines","","function stringToNumberHash(str) {","    let hash = 0","    for (let i = 0; i < str.length; i++) {","        hash = str.charCodeAt(i) + ((hash << 5) - hash)","    }","    const maxInt32 = Math.pow(2, 31) - 1","    return (hash & maxInt32) / maxInt32","}","","","fetch('./mem.json')","    .then(response => response.json())","    .then(data => {","        uniqueLines = data.uniqueLines","        lineColors = data.uniqueLines.reduce((acc, line) => ({ ...acc, [line]: stringToNumberHash(line) * 205 + 50 }), {})","        numberOfUniqueLines = data.uniqueLines.length","    })","    .catch(error => {","        console.error('Error fetching mem for stats:', error)","    })","","const linesPerSec = fontSize == 50 ? 5 : 10","","export function update(canvas, ctx) {","    if (uniqueLines != undefined) {","        if (lastWidth != window.innerWidth || lastHeight != innerHeight) {","            width = canvas.width = window.innerWidth","            height = canvas.height = window.innerHeight","        }","        lastWidth = window.innerWidth","        lastHeight = window.innerHeight","","        ctx.font = `${fontSize}px 'Fira Code'`","        ctx.textBaseline = 'top'","","        ctx.fillStyle = '#000'","        ctx.fillRect(0, 0, canvas.width, canvas.height)","","        const lineOffset = String(numberOfUniqueLines).length * fontWidth","        const offset = Date.now() / (1000 / linesPerSec)","        const lineLength = Math.ceil((width - lineOffset) / fontWidth)","        for (let y = -1; y < height / fontSize + 1; y++) {","            const lineNumber = numberOfUniqueLines - (Math.floor(offset) - y + numberOfUniqueLines) % numberOfUniqueLines","            const line = uniqueLines[lineNumber - 1]","            const textY = (y + offset % 1) * fontSize","            ctx.fillStyle = `rgb(0,${lineColors[line]},0)`","            ctx.fillText(lineNumber, (lineOffset - String(lineNumber).length * fontWidth) / 2, textY)","            ctx.fillText(('|' + line).slice(0, lineLength), lineOffset, textY)","        }","    }","}","","export function start(canvas, ctx) {","    ctx.font = `${fontSize}px 'Fira Code'`","    fontWidth = ctx.measureText('0').width","}"],"output\\index.html":["<!DOCTYPE html>","<html lang=\"en\">","<title>Jack's project hub</title>","","<head>","    <meta charset=\"UTF-8\">","    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">","    <link rel=\"stylesheet\" href=\"./siteStyles.css\">","    <script src=\"./backgroundManager.js\"></script>","    <script src=\"./updateStats.js\"></script>","","    <!-- Primary Meta Tags -->","    <meta name=\"title\" content=\"Jack's project hub\" />","    <!-- <meta name=\"description\" content=\"meta description link\" /> -->","","    <!-- Open Graph / Facebook -->","    <meta property=\"og:type\" content=\"website\" />","    <meta property=\"og:url\" content=\"https://jacks-project-hub.vercel.app/\" />","    <meta property=\"og:title\" content=\"Jack's project hub\" />","    <!-- <meta property=\"og:description\" content=\"meta description link\" /> -->","    <meta property=\"og:image\" content=\"https://jacks-project-hub.vercel.app/preview.png\" />","","    <!-- Twitter -->","    <meta property=\"twitter:card\" content=\"summary_large_image\" />","    <meta property=\"twitter:url\" content=\"https://jacks-project-hub.vercel.app/\" />","    <meta property=\"twitter:title\" content=\"Jack's project hub\" />","    <!-- <meta property=\"twitter:description\" content=\"meta description link\" /> -->","    <meta property=\"twitter:image\" content=\"https://jacks-project-hub.vercel.app/preview.png\" />","</head>","","<body>","    <canvas id=\"backgroundCanvas\"></canvas>","    <div id=\"overlay\">","        <div id=\"content\">","            <div id=\"titleDiv\">","                <div id=\"titleText\">","                    Custom blog","                </div>","                <div id=\"stats\">","                    <!-- will autofill on website load -->","                </div>","            </div>","            <div id=\"posts\">","                <div class=\"post\" onclick=\"window.location.href='./posts/Making a custom blog/'\">\n    <div class=\"title\">\n        \n        <div class=\"markup\" style=\"color:#fff; font-style:normal; font-weight:normal; font-size:calc(xx-large * 0.25); text-decoration: none;margin:0; padding:0; word-wrap:break-word; width:100%; height:100%;\">\n            <div style=\"text-align:center;\">Making a <span style=\"color:#0f0; font-weight:bold;\"><code>|[custom]</code></span> blog</div>\n        </div>\n        \n    </div>\n    \n        <div class=\"preview\">\n            \n        <div class=\"markup\" style=\"color:#0f0; font-style:normal; font-weight:normal; font-size:small; text-decoration: none;margin:0; padding:0; word-wrap:break-word; width:100%; height:100%;\">\n            <div style=\"text-align:center;\">I like to create posts, but have never found a good platform to do so.<br>Follow along as I create my own blog site, complete with custom markup, live backgrounds, and more!</div>\n        </div>\n        \n        </div>\n        </div>","            </div>","        </div>","    </div>","</body>","","</html>"],"output\\postStyles.css":["@font-face {","    font-family: 'Fira Code';","    src: url('../../firaCode.ttf') format('truetype');","    font-weight: normal;","    font-style: normal;","}","","html,","body {","    margin: 0;","    padding: 0;","    overflow: hidden auto;","    background-color: #000;","    font-family: 'Fira Code';","}","","#overlay {","    position: absolute;","    top: 0;","    left: 0;","    width: 100%;","    min-height: 100vm;","    z-index: 1;","    padding: 1px;","    display: flex;","    justify-content: center;","    align-items: center;","}","","#content {","    width: 80%;","    background-color: #3336;","    border: 5px solid #15661566;","    margin: 50px 0 50px 0;","}","","@media (max-aspect-ratio: 1/1) {","    #content {","        width: 95%;","    }","}","","code {","    font-family: 'Fira Code', monospace;","    background-color: #000;","    border: 2px solid #333;","}","","#stats {","    display: flex;","    flex-direction: column;","    background-color: #6669;","    border: 5px solid #3339;","    padding: 5px;","    text-align: center;","    color: #0f0;","}","","#returnButton {","    background-color: #6669;","    border: 5px solid #3339;","    padding: 5px;","    text-align: center;","}","","#returnButton>a {","    color: #0f0","}","","#post {","    background-color: #6669;","    margin: 10px;","    padding: 25px;","    border: 5px solid #3339;","}","","#backgroundCanvas {","    position: fixed;","    display: block;","}","","img,","video {","    width: 100%;","    object-fit:fill;","    border: 5px solid #3339;","}","",".video_wrapper {","    filter: blur(5px) saturate(.5);","    color: #0000;","    transition: all .25s ease-in-out","}","",".video_wrapper:hover {","    filter: blur(0) saturate(1);","    color: #fff;","}","",".video_wrapper span {","    position: absolute;","    top: 50%;","    left: 50%;","    transform: translate(-50%, -50%);","    font-size: 2em;","    text-align: center;","    width: 100%;","    height: 100%;","    display: flex;","    justify-content: center;","    align-items: center;","}","","#returnToTopButton {","    background-color: #6669;","    border: 5px solid #3339;","    padding: 5px;","    text-align: center;","    color: #0f0;","    text-decoration: underline;","}","","#returnToTopButton span {","    cursor: pointer;","}"],"output\\siteStyles.css":["@font-face {","    font-family: 'Fira Code';","    src: url('./firaCode.ttf') format('truetype');","    font-weight: normal;","    font-style: normal;","}","","html,","body {","    margin: 0;","    padding: 0;","    overflow: hidden auto;","    background-color: #000;","    font-family: 'Fira Code';","}","","#backgroundCanvas {","    position: fixed;","    display: block;","    transition: filter 1s ease-in-out;","}","","#backgroundCanvas.blur {","    filter: blur(25px) brightness(0);","}","","#overlay {","    position: absolute;","    top: 0;","    left: 0;","    width: 100%;","    height: 100%;","    z-index: 1;","    padding: 1px;","    display: flex;","    justify-content: center;","    align-items: center;","}","","#content {","    max-width: 80%;","    background-color: #3336;","    border: 5px solid #15661566;","    margin: 50px 0 50px 0;","}","","@media (max-aspect-ratio: 1/1) {","    #content {","        max-width: 100%;","    }","}","","code {","    font-family: 'Fira Code', monospace;","    background-color: #000;","    border: 2px solid #333;","}","","#titleDiv {","    text-align: center;","    color: #0f0;","}","","#titleText {","    font-size: xx-large","}","","#stats {","    display: flex;","    flex-direction: column;","    background-color: #6669;","    border: 5px solid #3339;","    padding: 5px;","}","","#posts {","    display: flex;","    align-items: center;","    justify-content: center;","    flex-wrap: wrap;","    margin: 10px;","    background-color: #6669;","    border: 5px solid #3339;","}","",".post {","    margin: 10px;","    padding: 10px;","    max-width: 50%;","    background-color: #0006;","    border: 5px solid #0f06;","    color: #0f0;","    cursor: pointer;","}","","@media (max-aspect-ratio: 1/1) {","    .post {","        max-width: 100%;","    }","}","",".post .title {","    background-color: #0006;","    padding: 5px;","    text-align: center;","    border: 2px solid #0f06;","    margin-bottom: 10px","}"],"output\\updateStats.js":["function addStat(parent, text) {","    let div = document.createElement('div')","    div.innerHTML = text","    parent.appendChild(div)","}","document.addEventListener('DOMContentLoaded', () => {","    fetch('./mem.json')","        .then(response => response.json())","        .then(mem => {","            const div = document.getElementById('stats')","            addStat(div, `Last updated: <code>${Math.floor((Date.now() - mem.lastUpdate) / 86400000)}</code> days ago`)","            addStat(div, `Created out of <code>${mem.numberOfLines}</code> lines of code`)","            addStat(div, `Current hash: <code>${mem.outputHash}</code>`)","        })","        .catch(error => {","            console.error('Error fetching mem for stats:', error)","        })","})"],"postBackgroundManager.js":["document.addEventListener('DOMContentLoaded', async () => {","    const background = await import('./background.js')","    const canvas = document.getElementById('backgroundCanvas')","    const ctx = canvas.getContext('2d')","    if (background.start != undefined) await background.start(canvas, ctx)","","    const maxUps = 60","    let lastUpdate = 0","","    async function update() {","        lastUpdate = Date.now()","        const canvas = document.getElementById('backgroundCanvas')","        if (background.update != undefined) {","            await background.update(canvas, ctx)","            requestAnimationFrame(() => setTimeout(update, 1000 / maxUps - (Date.now() - lastUpdate)))","        }","    }","    update()","})"],"postStyles.css":["@font-face {","    font-family: 'Fira Code';","    src: url('../../firaCode.ttf') format('truetype');","    font-weight: normal;","    font-style: normal;","}","","html,","body {","    margin: 0;","    padding: 0;","    overflow: hidden auto;","    background-color: #000;","    font-family: 'Fira Code';","}","","#overlay {","    position: absolute;","    top: 0;","    left: 0;","    width: 100%;","    min-height: 100vm;","    z-index: 1;","    padding: 1px;","    display: flex;","    justify-content: center;","    align-items: center;","}","","#content {","    width: 80%;","    background-color: #3336;","    border: 5px solid #15661566;","    margin: 50px 0 50px 0;","}","","@media (max-aspect-ratio: 1/1) {","    #content {","        width: 95%;","    }","}","","code {","    font-family: 'Fira Code', monospace;","    background-color: #000;","    border: 2px solid #333;","}","","#stats {","    display: flex;","    flex-direction: column;","    background-color: #6669;","    border: 5px solid #3339;","    padding: 5px;","    text-align: center;","    color: #0f0;","}","","#returnButton {","    background-color: #6669;","    border: 5px solid #3339;","    padding: 5px;","    text-align: center;","}","","#returnButton>a {","    color: #0f0","}","","#post {","    background-color: #6669;","    margin: 10px;","    padding: 25px;","    border: 5px solid #3339;","}","","#backgroundCanvas {","    position: fixed;","    display: block;","}","","img,","video {","    width: 100%;","    object-fit:fill;","    border: 5px solid #3339;","}","",".video_wrapper {","    filter: blur(5px) saturate(.5);","    color: #0000;","    transition: all .25s ease-in-out","}","",".video_wrapper:hover {","    filter: blur(0) saturate(1);","    color: #fff;","}","",".video_wrapper span {","    position: absolute;","    top: 50%;","    left: 50%;","    transform: translate(-50%, -50%);","    font-size: 2em;","    text-align: center;","    width: 100%;","    height: 100%;","    display: flex;","    justify-content: center;","    align-items: center;","}","","#returnToTopButton {","    background-color: #6669;","    border: 5px solid #3339;","    padding: 5px;","    text-align: center;","    color: #0f0;","    text-decoration: underline;","}","","#returnToTopButton span {","    cursor: pointer;","}"],"siteBackgroundManager.js":["document.addEventListener('DOMContentLoaded', async () => {","    function mixPaths() {","        const lastPath = backgroundPaths[backgroundPaths.length - 1]","        do backgroundPaths.sort(() => Math.random() * 2 - 1)","        while (backgroundPaths.length > 1 && backgroundPaths[0] == lastPath)","    }","    mixPaths()","","    let backgroundIndex = -1","","    const minTimePerBackground = 1000 * 30","    const blurTime = 1000 * 1","    let backgroundStarted = 0","","    let blurred = false","","    let cycle = true","","    let currentBackground = {}","","    let loadedBackgrounds = []","","    const maxUps = 60","    let lastUpdate = 0","","    async function update() {","        lastUpdate = Date.now()","","        const canvas = document.getElementById('backgroundCanvas')","        const ctx = canvas.getContext('2d')","","        if (cycle && minTimePerBackground - (Date.now() - backgroundStarted) <= blurTime && !blurred) {","            canvas.classList.add('blur')","            blurred = true","        }","","        if (cycle && Date.now() - backgroundStarted >= minTimePerBackground) {","            if (currentBackground.stop != undefined) await currentBackground.stop(canvas, ctx)","            backgroundIndex = (backgroundIndex + 1) % backgroundPaths.length","            if (backgroundIndex == 0) mixPaths()","            if (!loadedBackgrounds.includes(backgroundPaths[backgroundIndex])) await new Promise(r => {","                const script = document.createElement('script')","                script.type = 'module'","                script.src = backgroundPaths[backgroundIndex]","                script.onload = r","                document.head.appendChild(script)","                loadedBackgrounds.push(backgroundPaths[backgroundIndex])","            })","            currentBackground = await import(backgroundPaths[backgroundIndex])","            if (currentBackground.start != undefined) await currentBackground.start(canvas, ctx)","            canvas.classList.remove('blur')","            blurred = false","            backgroundStarted = Date.now()","        }","        if (currentBackground.update != undefined) await currentBackground.update(canvas, ctx)","","        //has to be set after the first update so the first background will always get loaded","        cycle = (backgroundPaths.length > 1)","","        requestAnimationFrame(() => setTimeout(update, 1000 / maxUps - (Date.now() - lastUpdate)))","    }","    update()","})"],"siteStyles.css":["@font-face {","    font-family: 'Fira Code';","    src: url('./firaCode.ttf') format('truetype');","    font-weight: normal;","    font-style: normal;","}","","html,","body {","    margin: 0;","    padding: 0;","    overflow: hidden auto;","    background-color: #000;","    font-family: 'Fira Code';","}","","#backgroundCanvas {","    position: fixed;","    display: block;","    transition: filter 1s ease-in-out;","}","","#backgroundCanvas.blur {","    filter: blur(25px) brightness(0);","}","","#overlay {","    position: absolute;","    top: 0;","    left: 0;","    width: 100%;","    height: 100%;","    z-index: 1;","    padding: 1px;","    display: flex;","    justify-content: center;","    align-items: center;","}","","#content {","    max-width: 80%;","    background-color: #3336;","    border: 5px solid #15661566;","    margin: 50px 0 50px 0;","}","","@media (max-aspect-ratio: 1/1) {","    #content {","        max-width: 100%;","    }","}","","code {","    font-family: 'Fira Code', monospace;","    background-color: #000;","    border: 2px solid #333;","}","","#titleDiv {","    text-align: center;","    color: #0f0;","}","","#titleText {","    font-size: xx-large","}","","#stats {","    display: flex;","    flex-direction: column;","    background-color: #6669;","    border: 5px solid #3339;","    padding: 5px;","}","","#posts {","    display: flex;","    align-items: center;","    justify-content: center;","    flex-wrap: wrap;","    margin: 10px;","    background-color: #6669;","    border: 5px solid #3339;","}","",".post {","    margin: 10px;","    padding: 10px;","    max-width: 50%;","    background-color: #0006;","    border: 5px solid #0f06;","    color: #0f0;","    cursor: pointer;","}","","@media (max-aspect-ratio: 1/1) {","    .post {","        max-width: 100%;","    }","}","",".post .title {","    background-color: #0006;","    padding: 5px;","    text-align: center;","    border: 2px solid #0f06;","    margin-bottom: 10px","}"],"updateHomeStats.js":["function addStat(parent, text) {","    let div = document.createElement('div')","    div.innerHTML = text","    parent.appendChild(div)","}","document.addEventListener('DOMContentLoaded', () => {","    fetch('./mem.json')","        .then(response => response.json())","        .then(mem => {","            const div = document.getElementById('stats')","            addStat(div, `Last updated: <code>${Math.floor((Date.now() - mem.lastUpdate) / 86400000)}</code> days ago`)","            addStat(div, `Created out of <code>${mem.numberOfLines}</code> lines of code`)","            addStat(div, `Current hash: <code>${mem.outputHash}</code>`)","        })","        .catch(error => {","            console.error('Error fetching mem for stats:', error)","        })","})"],"updatePostStats.js":["function addStat(parent, text) {","    let div = document.createElement('div')","    div.innerHTML = text","    parent.appendChild(div)","}","document.addEventListener('DOMContentLoaded', () => {","    fetch('../../mem.json')","        .then(response => response.json())","        .then(mem => {","            const div = document.getElementById('stats')","            addStat(div, `First published: <code>${Math.floor((Date.now() - mem.postsCreated[postName]) / 86400000)}</code> days ago`)","            addStat(div, `Last updated: <code>${Math.floor((Date.now() - mem.postsUpdated[postName]) / 86400000)}</code> days ago`)","            addStat(div, `Current hash: <code>${mem.postHashes[postName]}</code>`)","        })","        .catch(error => {","            console.error('Error fetching mem for stats:', error)","        })","})"]},"postsUpdated":{"Making a custom blog":1717738848325},"postsCreated":{"Making a custom blog":1717538615782},"postHashes":{"Making a custom blog":"fc7ad417b9132649e210a7f32888b214"}}