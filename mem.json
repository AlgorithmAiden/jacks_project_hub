{"lastUpdate":1717739286785,"outputHash":"e6e83236f82849cd82700973a3946562","numberOfLines":2282,"uniqueLines":["margin: 10px;","if (part.slice(0, 1) == '|') return '|[' + part.slice(1)","const ls = (str, start, stop) => str.slice(start, stop).toLowerCase()","console.error(data.toString())","let html = `<div class=\"post\" onclick=\"window.location.href='./posts/${name}/'\">`","mem.numberOfLines = countLinesOfCode()","cleanPostsFolder(postPaths)","process.on('SIGTERM', close)","height: window.screen.height","setTimeout(run, 100)","let server, browser, page","part = part.filter(item => item != '')","}, '')","italic: false,","resolve()","if (fs.existsSync(`${postPath}/title.txt`)) title = markup.translate(fs.readFileSync(`${postPath}/title.txt`, 'utf8'), 1 / 4)","else if (key == 'strike')","color: '#0f0',","} catch (err) { }","function checkForChanges() {","console.log(file)","await page.goto(`http://localhost:8080/index.html`)","updated = true","let maxMTime = 0","the first tag clump sets the color to green (#0f0), the second clump resets color to the default","<canvas id=\"backgroundCanvas\"></canvas>","<div class=\"title\">","for (const file of fs.readdirSync(from))","let needScript = false","tags are evaluated by order they appear, in a |[].","const postPaths = []","smartCopyFile('./updateHomeStats.js', './output/updateStats.js')","if (lca(nextProp, 1) == lca(nextProp, 2) && lca(nextProp, 3) == lca(nextProp, 4) && lca(nextProp, 5) == lca(nextProp, 6) && lca(nextProp, 7) == lca(nextProp, 8)) //check if the color can be shortened","function removeKey(key) {","for (const file of fs.readdirSync(to))","to change the style, add |[] with tags and values inside, this sets the style for everything after, until changes.","smartMakeDir('./output/backgrounds')","let preview","style.color = '#' + digits.reduce((acc, digit) => acc + digit, '')","return Promise.resolve()","console.log('2')","* * !-> sets size to the default size","html = html.replace('// stat update script link', `const postName = '${name}'\\r\\n${fs.readFileSync('./updatePostStats.js', 'utf8')}`.split('\\r\\n').join('\\r\\n '))","style.bold = false","* * rgba([r],[g],[b])","await execAsync(`git init`, { cwd: './' })","backgroundIndex = (backgroundIndex + 1) % backgroundPaths.length","const postHashes = fs.readdirSync('./output/posts').reduce((acc, post) => ({ ...acc, [post]: getFolderHash(`./output/posts/${post}`) }), {})","saveAndCopyStats(true)","style.showMarkup = false","async function reloadPage() {","generateMainPage(postPaths)","do backgroundPaths.sort(() => Math.random() * 2 - 1)","'margin:0',","fs.rmSync(`${to}/${file}`, { recursive: true, force: true })","loadedBackgrounds.push(backgroundPaths[backgroundIndex])","lastAlign = undefined //to make the next line trigger a new block","await execAsync(`git add .`, { cwd: './' })","tags are found by scanning for |[ and reading until ], and are separated by spaces.","<meta property=\"twitter:card\" content=\"summary_large_image\" />","<meta property=\"twitter:description\" content=\"meta description link\" />","// Ensure the main branch exists","}, []).filter(part => part != '')","*/","if (['on', 'true'].includes(nextProp.toLowerCase()))","let backgroundStarted = 0","return rawMarkup.split('\\r\\n').filter(line => line.slice(0, 10) != '|[COMMENT]').join('').split('|[').filter(part => part != '').map(part => {","values in the second column with a [] signify that you put a value there (but don't include the [])","style.showMarkup = !style.showMarkup","console.log('Generating website')","console.log('\\nChange detected')","server = exec('http-server ./liveServer -p 8080', (error, stdout, stderr) => {","* * #[rgba]","if (props.length > index + 1 && Number(props[index + 2]) > 0 && Number(props[index + 2] != 1))","function getUniqueLinesOfCode() {","const ctx = canvas.getContext('2d')","else if (nextProp.length == 7) //is in format #rrggbb","if (ls(nextProp, 4, 5) == 'f') //check if alpha is needed","document.head.appendChild(script)","values in the second column with a ?[] signify that the value is optional","'word-wrap:break-word',","if (inPar)","recurseDir(startPath)","style.color = ('#' + lca(nextProp, 1) + lca(nextProp, 3) + lca(nextProp, 5)).toLowerCase()","const browser = await puppeteer.launch()","else if (lowerProp == 'tab') {","else if (lowerProp == 'video') {","Object.keys(style).forEach(key => {","words = data.uniqueLines.join(' ')","let saveData = sessionStorage.getItem('markup') != undefined ? JSON.parse(sessionStorage.getItem('markup')) : {}","</script>","const children = folder.children","else err(`invalid hex code`)","else acc = [...acc, part]","document.addEventListener('DOMContentLoaded', () => {","if (!fs.existsSync(`${from}/${file}`) && !['backgroundManager.js', 'index.html', 'preview.png'].includes(file))","snake[0].y--","let tailY = snake[snake.length - 1].y","if (digits.every(digit => digit.charAt(0) == digit.charAt(1)))","if (prefix == '0') {","translate(rawMarkup, scale = 1) {","const word = (words[Math.floor(Math.random() * words.length)] + ' ').split('')","* color: -> sets the text color to the most efficient hex value that represents prop 1","fs.writeFileSync('../mem.json', JSON.stringify(mem), 'utf8')","open: nextProp.toLowerCase() == 'open'","if (outputHashChanged || missingMainPreview || changedPosts.length || postsMissingPreview.length)","//the script injected into the output html","if (outputHashChanged || missingMainPreview) {","case 3:","let html = fs.readFileSync('./output/index.html', 'utf8')","browser = await puppeteer.launch({","if (nextProp.length == 4) //is in format #rgb","<div class=\"markup\" style=\"${wrapperStyle}\">${needScript ? `\\r\\n<script>${scriptString}</script>` : ''}","you can put ] anywhere, and unless it is closing a tag area it will render.","wrapperStyle += [","if (totalChanges == 0) {","width: 100%;","window.markup = {","const maxUps = 60","<meta property=\"twitter:image\" content=\"meta image link\" />","await runGenerateWebsite()","readFile(fullPath)","balls[i].sx = Math.floor(Math.random() * 2) * 2 - 1","for (let i = 0; i < height * 2; i += fontSize)","body {","await new Promise((resolve, reject) => {","<div id=\"overlay\">","if (cssRules.length != 1)","lastUpdate = Date.now()","else if (key == 'italic')","html += `","const digits = nextProp.toLowerCase().slice(lca(nextProp, 3) == 'a' ? 5 : 4).split(')')[0].split(',').map(digit => Math.max(0, Math.min(255, Math.round(Number(digit.trim())))).toString(16).padStart(2, '0')).filter((digit, index) => digit != 'ff' || index != 3)","ctx.fillText('1', index * Math.floor(width / fontSize - 1) * fontSize, (paddle + i) * fontSize)","lastAlign = style.align","border: 2px solid #333;","style.italic = !style.italic","const x = Math.floor(Math.random() * grid.length)","margin: 50px 0 50px 0;","async function run() {","border: 5px solid #3339;","return (sessionStorage.getItem('markup') != undefined ? JSON.parse(sessionStorage.getItem('markup')) : {})[key]","for (const file of fs.readdirSync(path)) {","await page.goto(`http://localhost:8080/index.html`);","if (fs.existsSync(`${postPath}/title.txt`)) title = markup.translate(fs.readFileSync(`${postPath}/title.txt`, 'utf8'))","#content {","function resetCanvas(canvas, ctx) {","the tags are below, items in the first column are the keywords, items in the second column are values to be used.","<html lang=\"en\">","script.onload = r","nextLine += `<script src=\"${nextProp}\"></script>`","html += `<span style=\"${cssRules}\">${text}</span>`","reject(err)","let loadedBackgrounds = []","let changes = []","</div>","balls[i].lx = balls[i].x","// fs.copyFileSync = wrapFunction(fs.copyFileSync, (...args) => console.log('copy', ...args))","if (style.showMarkup)","const page = await browser.newPage()","html += `fold_${foldId}`","ctx.fillStyle = `rgb(0,${lineColors[line]},0)`","}, '').split('{; ').join('{').split('; }').join('}').split('; ').reduce((acc, part) => {","mixPaths()","* * rgb([r],[g],[b]) -> each value is in the range 0-255","if (headY > 0 && (snake[2].y != headY - 1 || trys > 50)) {","needWords = true","function getValue(key) {","smartCopyFile('./postStyles.css', './output/postStyles.css')","let siteMem = {}","the text is evaluated from beginning to end, any text being rendered using the current style.","headless: false,","for (const post of [...changedPosts, ...postsMissingPreview].sort().reduce((acc, item) => {","markup.forEach(props => {","return html","style.color = nextProp.toLowerCase()","if (acc.length > 0 && typeof acc[acc.length - 1] == 'string') {","for (let i = 0; i < balls.length; i++) {","outputHashChanged = true","].join('; ') + ';'","html += text","const chars = '`~!@#$%^&*()_-+={[}]|\\\\:;\"\\'<,>.?/'.split('')","uniqueLines = data.uniqueLines","//some helper functions to make more readable code","<meta property=\"og:type\" content=\"website\" />","let currentBackground = {}","<!-- Primary Meta Tags -->","html += nextLine","const lastPath = backgroundPaths[backgroundPaths.length - 1]","maxMTime = Math.max(maxMTime, stats.mtime.getTime())","let removedFiles = []","codeLines[path] = []","html += `<div style=\"text-align:${style.align};\">`","html = html.replace('<!-- post link -->', markup.translate(fs.readFileSync(`${postPath}/script.txt`, 'utf8')))","dirs.forEach(dir => {","async function update() {","* * !-> toggles bold text","<title><!-- title name link --></title>","<meta property=\"twitter:url\" content=\"meta url link\" />","html = html.slice(0, html.indexOf(`fold_${fold.id}`))","let folds = []","if (Math.random() < .1) drip(colum, index)","<!-- post link -->","if (!exists || fs.statSync(from).mtime.getTime() !== fs.statSync(to).mtime.getTime()) {","snake[0].x++","await browser.close()","function setupFolder() {","const line = uniqueLines[lineNumber - 1]","if (preview != undefined)","function fillGrid(canvas,ctx) {","function scan(to, from) {","html = html.split('meta image link').join(`https://jacks-project-hub.vercel.app/posts/${name}/preview.png`)","console.error('Error fetching mem for stats:', error)","if (!allowed.includes(file)) {","style.strike = true","http.get('http://localhost:8080', (res) => {","style.align = defaultStyle.align","offsets = [...offsets, ...new Array(Math.ceil(width / fontSize)).fill(0)].splice(0, Math.ceil(width / fontSize))","if (fs.statSync(`${from}/${file}`).isDirectory())","style.code = !style.code","dontScan.push(line)","style.italic = false","function stringToNumberHash(str) {","else if (lowerProp == 'bold') {","<div id=\"title\">","function smartCopyFile(from, to) {","* * off | false","let paddles = [0, 0]","code {","if (cycle && Date.now() - backgroundStarted >= minTimePerBackground) {","function scanDirectory(directory) {","<meta name=\"title\" content=\"Jack's project hub\" />","if (headX + 1 < grid.length && (snake[2].x != headX + 1 || trys > 50)) {","const emptyString = new Array(2 ** 16).fill(' ').join('')","style.showMarkup = true","function getOutputPaths(currentPath = './output', out = []) {","} else {","ctx.fillStyle = `rgb(0,${255 - firework.radius * (205 / firework.maxRadius)},0)`","ctx.fillText('0', tailX * fontSize, tailY * fontSize)","for (let y = Math.max(firework.y - firework.radius, 0); y < Math.min(firework.y + firework.radius, grid[0].length); y++)","needScript = true","} else if (ls(nextProp, 0, 3) == 'rgb') {","let html = ''","ctx.fillText(item[0], x * fontSize, (y - offsets[x]) * fontSize)","function script() {","let codeLines = {}","ctx.fillStyle = '#0f0'","else if (fs.statSync(`${to}/${file}`).isDirectory())","<meta property=\"og:title\" content=\"Jack's project hub\" />","nextLine = ''","* * !-> toggles italics","if (['left', 'center', 'right'].includes(nextProp.toLowerCase()))","nextLine += `|[${props.join(' ')}]`","if (currentBackground.stop != undefined) await currentBackground.stop(canvas, ctx)","<div id=\"returnButton\">","if (acc.slice(acc.length - 2) == '; ' && part == '') return acc","<meta property=\"og:image\" content=\"https://jacks-project-hub.vercel.app/preview.png\" />","canvas.classList.add('blur')","* * rgb([r],[g],[b],[a])","smartCopyFile('./postBackgroundManager.js', `./output/posts/${name}/backgroundManager.js`)","style.color = '#' + digits.reduce((acc, digit) => acc + digit.charAt(0), '')","let headY = snake[0].y","smartCopyFile('./blankSite.html', './output/index.html')","const fold = folds.pop()","} else if (prefix == '2') {","margin: 0;","scan(`${to}/${file}`, `${from}/${file}`)","ball.lx = ball.x","<div style=\"cursor: pointer; text-align:${fold.style.align};\" onclick=\"window.markup.folder(event)\">","throw new Error(`Error parsing markup: ${message}`)","const background = await import('./background.js')","#backgroundCanvas {","case 1:","ctx.fillRect(index * Math.floor(width / fontSize - 1) * fontSize, paddle * fontSize, fontSize, paddleSize * fontSize)","if (offsets[index] == 0) {","})","out.push(`text-decoration: ${value ? 'line-through' : 'none'}`)","<!-- Twitter -->","html = html.replace('<!-- posts link -->', postPaths.map(postPath => generatePostCard(postPath)).join('\\n '))","const backgroundPaths = [\"./posts/Making a custom blog/background.js\",\"./backgrounds/fireworks.js\",\"./backgrounds/hiddenSnakes.js\",\"./backgrounds/pong.js\",\"./backgrounds/rain.js\",\"./backgrounds/randomSymbols.js\",\"./backgrounds/uniqueCode.js\"];",".video_wrapper span {","if (style.code) text = `<code>${text}</code>`","* * [property] -> sets [property] to the default [property]","const lca = (str, i) => str.charAt(i).toLowerCase()","if (!loadedBackgrounds.includes(backgroundPaths[backgroundIndex])) await new Promise(r => {","if (cycle && minTimePerBackground - (Date.now() - backgroundStarted) <= blurTime && !blurred) {","colum = colum.splice(Math.ceil(height / fontSize) + offsets[index])","style.bold = true","* * !-> sets the default style to the current style","let headX = snake[0].x","fs.writeFileSync('./output/mem.json', JSON.stringify(siteMem), 'utf8')","const script = document.createElement('script')","stripTags(rawMarkup, breakCode = '\\n') {","if (firework.radius == firework.maxRadius) {","console.log('Killed children')","* * !-> toggles strikethrough","function smartMakeDir(path) {","if (backgroundIndex == 0) mixPaths()","<!-- will autofill on website load -->","z-index: 1;","removedFiles.push(key)","if (changes.length == 1) {","if (ball.x == Math.floor(width / fontSize) - 2) ball.sx = -1","<meta name=\"description\"","run()","if (Object.keys(defaultStyle).includes(nextProp.toLowerCase()))","speed: Math.ceil(Math.random() * 10)","html += '</div>'","total += countLinesOfCode(fullPath)","* * !-> resets the full style to the default style","for (let y = 0; y < height / fontSize; y++)","tabSize: 3,","} else if (prefix == '1') {","if (lca(nextProp, 1) == lca(nextProp, 2) && lca(nextProp, 3) == lca(nextProp, 4) && lca(nextProp, 5) == lca(nextProp, 6)) //check if the color can be shortened","if (getValue(`id_${folder.dataset.id}`) != undefined) {","saveMem(mem)","while (rawMarkup.includes(`fold_${foldId}`))","fs.mkdirSync(path.dirname(to), { recursive: true, force: true })","if (acc[acc.length - 1] !== item) acc.push(item)","console.log('Taking preview screenshots.')","postPaths.forEach(postPath => generatePost(postPath))","else if (lowerProp == 'fold') {","if (lastAlign != undefined)","const { exec } = require('child_process')","let balls = new Array(fontSize == 50 ? 2 : 5).fill(0)","return","let blurred = false","blurred = true","let paths = fs.readFileSync('./ignoredPaths.txt', 'utf8').split('\\r\\n')","if (!fs.existsSync(path))","console.log(3)","<div id=\"stats\">","fs.readdirSync(postPath).forEach(file => {","#backgroundCanvas.blur {","const missingMainPreview = !fs.existsSync('./output/preview.png')","folder(event) {","console.log(`stdout: ${stdout}`)","})))","words = words.split(char).join(' ')","specialChars.forEach(char =>","<div id=\"titleText\">","script.type = 'module'","const y = Math.floor(Math.random() * grid[0].length)","ctx.fillStyle = `rgb(0,${grid[tailX][tailY]},0)`","postsCreated[post] = Date.now()","return new Promise((resolve, reject) => {","fs.copyFileSync(from, to)","if (lastFileHashes[key] == undefined)","if (lowerProp == 'color') {","if (!['script.txt', 'title.txt', 'preview.txt'].includes(file)) {","background-color: #000;","function smartCopyDir(from, to) {","server.on('error', (err) => {","if (!fs.existsSync('./output')) fs.mkdirSync('./output')","}).join('')","smartCopyDir(`${postPath}/${file}`, `./output/posts/${name}/${file}`, { recursive: true })","if (changedFiles.length > 0) changes.push(`changed ${changedFiles.length} file${changedFiles.length == 1 ? '' : 's'}: ${changedFiles.join(', ')}`)","let dontCount = []","smartCopyFile(`${from}/${file}`, `${to}/${file}`)","// stat update script link","height: 1000","const cssRules = cssRuleFromStyles(defaultStyle, style, scale)","* * [number] -> (viewport width + viewport height) / 2 * [number], [number] is in the range [number] >= 0.02","else if (lowerProp == 'image') {","html += `<br><img src=\"./${nextProp}\" alt=\"${nextProp}\" style=\"width:${Number(props[index + 2] * 100)}%\">`","object-fit:fill;","smartCopyDir(`${from}/${file}`, `${to}/${file}`)","console.log('Screenshots taken.')","colum.forEach((item, y) => {","while (backgroundPaths.length > 1 && backgroundPaths[0] == lastPath)","return acc","balls[i].sy = Math.floor(Math.random() * 2) * 2 - 1","<meta property=\"og:description\"","const ignoredPaths = (() => {","const color = `rgb(0,${Math.round(Math.random() * 205) + 50},0)`","return JSON.parse(fs.readFileSync('./mem.json', 'utf8'))","grid[snake[0].x][snake[0].y] += 50","if (part.length == 0)","</head>","} else","scan(`./output/posts/${name}`, postPath)","else if (nextProp.length == 9) //is in format #rrggbbaa","console.log('done')","let trys = 0","function recurse(path) {","grid[x][y] = Math.floor(Math.random() * 255)","}, [])","${preview}","return codeLines","const wrapper = document.currentScript.parentNode","}, 100)","for (let index = 0; index < props.length; index++) {","let snakes = []","let addedFiles = []","delete saveData[key]","export function stop() {","const blurTime = 1000 * 1","canvas.style.transition = 'all 0s'","smartCopyFile('./siteStyles.css', './output/siteStyles.css')","const distance = Math.abs(x - firework.x) + Math.abs(y - firework.y) + 1","return part.reduce((acc, tag) => {","let backgroundIndex = -1","for (let i = 0; i < str.length; i++) {","else if (['off', 'false'].includes(nextProp.toLowerCase()))","let defaultStyle = { ...this.defaultStyle }","if (stderr) {","#post {","padding: 5px;","nextLine += '&nbsp;'","server.kill()","font-size: 2em;","const value = style[key]","function mixPaths() {","(() => {","const content = html.split(`fold_${fold.id}`)[1]","smartRemoveExtra('./output', ['.git', 'backgrounds', 'posts', 'backgroundManager.js', 'firaCode.ttf', 'index.html', 'mem.json', 'postStyles.css', 'siteStyles.css', 'updateStats.js', 'preview.png'])","if (removedFiles.length > 0) changes.push(`removed ${removedFiles.length} file${removedFiles.length == 1 ? '' : 's'}: ${removedFiles.join(', ')}`)","defaultStyle: {","} else if (stat.isFile() && !ignoredPaths.path.includes(fullPath))","* slice + toLowerCase","offsets[index]--","style.color = defaultStyle.color","color: #0f0","paddles[1] -= Math.max(-3, Math.min(3, paddles[1] - (balls[0].y - (paddleSize - 1) / 2)))","height: 100%;","const lowerProp = prop.toLowerCase()","console.log(1)","fs.writeFileSync('./mem.json', JSON.stringify(mem), 'utf8')","<meta property=\"og:url\" content=\"meta url link\" />","inPar = part.indexOf('(') > part.indexOf(')')","transform: translate(-50%, -50%);","* fold: -> creates foldable content, with all content until the fold close being inside (fold triggers a break)","snake[0].x--","else if (lowerProp == 'break') {","const fullPath = path.join(directory, file)","let snake = snakes[Math.floor(Math.random() * snakes.length)]","let out = []","* reset:","offsets[index] = word.length","let html = fs.readFileSync('./blankPost.html', 'utf8')","currentBackground = await import(backgroundPaths[backgroundIndex])","* code: -> sets whether text will be code using <code></code>","switch (Math.floor(Math.random() * 4)) {","display: block;","console.error(`stderr: ${stderr}`)","setupLiveBackgrounds(postPaths)","mem.outputHash = newHash","if (cssRules.length == 1) //take the ; into account","<meta property=\"og:description\" content=\"meta description link\" />","let title = name","for (let y = Math.max(firework.y - firework.radius, 0); y < Math.min(firework.y + firework.radius, grid[0].length); y++) {","fireworks.splice(index, 1)","let lastAlign","if (fs.statSync(`${postPath}/${file}`).isDirectory())","function generatePost(postPath) {","process.on('exit', close)","style: { ...style },","for (const path of postPaths) {","const nextProp = props[index + 1] ?? emptyString","if (currentBackground.start != undefined) await currentBackground.start(canvas, ctx)","for (let index = snake.length - 1; index > 0; index--) {","await execAsync(`git checkout -b main`, { cwd: './' })","else","const textY = (y + offset % 1) * fontSize","#returnButton>a {","html += `<br><video src=\"./${nextProp}\" controls alt=\"${nextProp}\"></video>`","<span onclick=\"window.scroll({top:0,left:0,behavior:'smooth'})\">Return to top</span>","codeLines[path].push(item)","@font-face {","lastFolderModificationTimes = {}","scanDirectory(fullPath)","balls[i] = {}","if (fs.existsSync(`./output/posts/${name}/${file}`))","resetCanvas(canvas, ctx)","dontCount.push(line)","return `","const dirs = [{ x: 0, y: 0 }, { x: 1, y: 0 }, { x: -1, y: 0 }, { x: 0, y: 1 }, { x: 0, y: -1 }]","console.log('Screenshotting main page.')","if (typeof part === 'string') return part","color: #0000;","fs.writeFileSync('./output/index.html', html, 'utf8')","function fillColumns() {","console.log(path, allowed, file, `${path}/${file}`)","process.stdout.on('data', (data) => {","const name = postPath.split('blogPost_')[1]","grid = [...grid, ...new Array(Math.ceil(width / fontSize)).fill(0).map(() => [])].splice(0, Math.ceil(width / fontSize) + 1).map(colum => [...colum, ...new Array(Math.ceil(height / fontSize)).fill(50)].splice(0, Math.ceil(height / fontSize) + 1))","content=\"THE place to read about all of my projects, with exclusive content not seen elsewhere!\" />","console.log('No changes')","else if (lowerProp == 'showmarkup') {","reject(`Error: ${error.message}`)","<div class=\"preview\">","// Check if .git directory exists, if not, initialize a new repository","mem.orderedLines = getOrderedLinesOfCode()","* * xx-small | x-small | smaller | small | medium | large | larger | x-large | xx-large -> uses the default sizes","style.code = false","Object.keys(style).forEach(key => this.defaultStyle[key] = style[key])","words = words.split(' ').filter(word => word != '')","let lastUpdate = 0","ctx.fillRect(0, 0, canvas.width, canvas.height)","function generateMainPage(postPaths) {","let cycle = true","if (error) {","return part","script.src = backgroundPaths[backgroundIndex]","// func(...args)","// }","const fileHash = hashFileContents(fullPath)","<script src=\"./backgroundManager.js\"></script>","grid = [...grid, ...new Array(Math.ceil(width / fontSize)).fill(0).map(() => [])].splice(0, Math.ceil(width / fontSize) + 1).map(colum => [...colum, ...new Array(Math.ceil(height / fontSize)).fill(0).map(() => Math.floor(Math.random() * 255))].splice(0, Math.ceil(height / fontSize) + 1))","// return (...args) => {","document.addEventListener('DOMContentLoaded', async () => {","break","files.forEach(file => {","<meta property=\"og:url\" content=\"https://jacks-project-hub.vercel.app/\" />","style.color = ls(str, 0, 4)","const text = markup.stripTags(fs.readFileSync(`${postPath}/preview.txt`, 'utf-8'))","if (addedFiles.length > 0) changes.push(`added ${addedFiles.length} file${addedFiles.length == 1 ? '' : 's'}: ${addedFiles.join(', ')}`)","let failed = false","codeLines.push(item)","`","style.color = nextProp.slice(0, 7).toLowerCase()","if (ls(nextProp, 0, 1) == '#') { //must be hex","return [...acc, part]","const path = require('path')","word.forEach((char, index) => colum.unshift([word[word.length - index - 1], color]))","ctx.fillRect(headX * fontSize, headY * fontSize, fontSize, fontSize)","const minTimePerBackground = 1000 * 30","while (specialChars.some(char => words.includes(char)))","setValue(`id_${folder.dataset.id}`, open)","else if (lowerProp == 'script' && nextProp != undefined) {","fs.accessSync(path.join('./', '.git'))","* showMarkup: -> sets whether the markup tags will be hidden (defaults to false)","for (let key of ['lastScan', 'lastUpdate', 'outputHash', 'numberOfLines', 'uniqueLines', 'orderedLines', 'postsUpdated', 'postsCreated', 'postHashes']) siteMem[key] = mem[key]","markup = rawMarkup.split('\\r\\n').filter(line => line.slice(0, 10) != '|[COMMENT]').join('').split('|[').filter(part => part != '').map(part => {","// function wrapFunction(func, prefunc) {","if (key == 'color')","<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">","let text = `|[click to ${fold.open ? 'close' : 'open'}]`","* * #[rrggbbaa]","html = html.split('meta description link').join(text.length < 100 ? text : text.slice(0, 97) + '...')","const exists = fs.existsSync(to)","transition: filter 1s ease-in-out;","src: url('../../firaCode.ttf') format('truetype');","cursor: pointer;","const markup = require('./markup.js')","resolve(stdout)","else if (lowerProp == 'space') {","nextLine += '<br>'","width: 2000,","smartMakeDir(`./output/posts/${name}`)","<!DOCTYPE html>","snake[0].y++","style.strike = !style.strike","return acc + part","process.on('uncaughtException', close)","#titleDiv {","<div class=\"folder\" data-id=${nextGlobalId++}>","* * !-> sets color to the default color","return (hash & maxInt32) / maxInt32","blurred = false","<!-- Open Graph / Facebook -->","if (headX > 0 && (snake[2].x != headX - 1 || trys > 50)) {","if (uniqueLines != undefined) {","html,","return acc + part + '; '","* * [path] !-> defaults to 1","const stats = fs.statSync(fullPath)","fileContent.forEach(item => {","* default: -> changes the default used for many tags, but does not change the default retrospectively","//used so I can check nextProp without it existing","flex-direction: column;","scanDirectory('./')","<meta property=\"og:title\" content=\"meta title link\" />","}, 2500)","</body>","const scriptString = script.toString().slice(25).split('\\r\\n').reduce((acc, part) => acc + '; ' + part.split('//')[0], '').split('').reduce((acc, part, index, arr) => {","if (tag === 'break') acc += breakCode","${content}","const files = fs.readdirSync(directory)","return { scan: dontScan, count: dontCount, path: dontPath }","background-color: #3336;","snake[index] = { ...snake[index - 1] }","size: 'medium',","lastFolderModificationTimes[path] = maxMTime","before |[color #0f0]green|[color] it was boring","const count = Math.round(Number(nextProp))","} else if (stat.isFile() && !ignoredPaths.scan.includes(fullPath) && item !== 'preview.png') {","for example: to create 'before green it was boring' with 'green' being green you could use the following markup:","ball.y += ball.sy","function execAsync(command, options) {","code: false,","// Add all changes to staging","<meta name=\"title\" content=\"meta title link\" />","children[0].innerHTML = children[0].innerHTML.replace(open ? 'open' : 'close', open ? 'close' : 'open')","if (currentBackground.update != undefined) await currentBackground.update(canvas, ctx)","else if (lowerProp == 'default') {","function err(message) {","changedPosts.push(post)","if (res.statusCode === 200) {","if (count > 0 && !isNaN(count))","await page.reload({ waitUntil: ['networkidle0'], bypassCache: true })","style.code = true","if (!exists)","out.push(`font-size:${value}`)","<meta property=\"twitter:title\" content=\"Jack's project hub\" />","const crypto = require('crypto')","page = await browser.newPage()","lastWidth = window.innerWidth","align-items: center;","else colum.unshift([''])","for (const file of ['script.txt', 'title.txt', 'preview.txt'])","const prop = props[index]","ctx.font = `${fontSize}px 'Fira Code'`","paths.forEach(path => {","html = html.replace('<!-- title markup link -->', title)","for (let y = -1; y < height / fontSize + 1; y++) {","balls.forEach(ball => {","fs.mkdirSync('./liveServer')","let needWords = false","padding: 10px;","if (distance <= firework.radius) {","if (lastFolderModificationTimes[path] != maxMTime) changed = true","id: foldId,","style.align = nextProp.toLowerCase()","${text}","if (Math.abs(x - firework.x) + Math.abs(y - firework.y) <= firework.radius) {","fs.rmSync(`${path}/${file}`, { recursive: true, force: true })","left: 0;","Object.keys(style).forEach(key => defaultStyle[key] = style[key])","else if (lowerProp == 'code') {","ctx.fillStyle = `rgb(0,${grid[headX][headY]},0)`","<link rel=\"stylesheet\" href=\"../../postStyles.css\">","for (const file of fs.readdirSync(path))","// prefunc(...args)","smartCopyFile(`${postPath}/${file}`, `./output/posts/${name}/${file}`)","* * [number]","console.error(`exec error: ${error}`)","part = part.map(part => part.split(' ')).flat()","await page.evaluate(() => {","if (postsCreated[post] == undefined)","resolve(server)","let changed = false","(await page.target().createCDPSession()).send('Network.clearBrowserCache')","if (stats.isDirectory()) scanDir(`${path}/${file}`)","let fileContent = fs.readFileSync(path, 'utf8').split('\\r\\n')","update()","<body>","let combinedHash = crypto.createHash('md5')","dontPath.push(line)","smartMakeDir('./output/posts')","getOutputPaths(fullPath, out)","let commitMessage","await execAsync(`git commit -m \"${commitMessage}\"`, { cwd: './' })","return changed","const specialChars = '`~!@#$%^&*()_-+={[}]|\\\\:;\"\\'<,>.?/1234567890'.split('')","children[1].style.display = open ? '' : 'none'",".catch(error => {","recurse('./temp')","background-color: #0006;","acc[acc.length - 1] += part","reject(`Stderr: ${stderr}`)","part = part.reduce((acc, part) => {","item = item.trim()","let dontScan = []","style.color = ('#' + lca(nextProp, 1) + lca(nextProp, 3) + lca(nextProp, 5) + lca(nextProp, 7)).toLowerCase()","} else if (prefix == '3') {","<meta charset=\"UTF-8\">","commitMessage = changes[0]","columns.forEach((colum, x) => {","div.innerHTML = text","await reloadPage()","* space: -> adds [number] spaces using '&nbsp;' after","<div id=\"titleDiv\">","const postPaths = findPostPaths()","changedFiles.push(key)","<meta name=\"description\" content=\"meta description link\" />","/**","const open = getValue(`id_${folder.dataset.id}`)","const oldPostHashes = mem.postHashes ?? {}","window.dispatchEvent(new Event('resize'))","await page.screenshot({ path: './output/preview.png' })","event.stopPropagation()","if (part.indexOf('(') > -1)","border: 5px solid #0f06;","else if (lowerProp == 'size') {","const folder = event.target.closest('.folder')","const maxInt32 = Math.pow(2, 31) - 1","const lineLength = Math.ceil((width - lineOffset) / fontWidth)","fs.writeFileSync('./output/backgroundManager.js', `const backgroundPaths = ${JSON.stringify(backgroundPaths)};\\r\\n${fs.readFileSync('./siteBackgroundManager.js', 'utf8')}`, 'utf8')","border: 2px solid #0f06;","<head>","process.chdir('C:\\\\Users\\\\jack\\\\Home\\\\Programming\\\\blog projects\\\\blog generator')","nextLine += `<div style=\"display:block; height:${Number(nextProp)}em; line-height:${Number(nextProp)}em;\"></div>`","if (typeof part == 'string')","function smartRemoveExtra(path, allowed) {","* size: -> sets the text size","* image: -> embeds an image in the next line","needWords = false","fs.mkdirSync(path)","(async () => {","},","console.log(data.toString())","if (Number(nextProp) > 0)","if (typeof props == 'string') {","const count = Math.round(Number(nextProp) * this.tabSize)",".post {","* * !-> just adds <br>","smartCopyFile('./firaCode.ttf', './output/firaCode.ttf')","for (let i = 0; i < paddleSize; i++) {","}).on('error', () => { })","ctx.fillStyle = '#000'","return total","async function generateLinkPreviews() {","if (stats.isDirectory() && !ignoredPaths.scan.includes(fullPath)) {","ctx.fillText(chars[grid[x][y] % chars.length], x * fontSize, y * fontSize)","let div = document.createElement('div')","const changedPosts = []","acc[acc.length - 1] += ' ' + part","ctx.fillText('0', x * fontSize, y * fontSize)","if (changed) {","fs.rmdirSync('./liveServer', { recursive: true, force: true })","let fireworks = []","* * [number] -> creates a break and then inserts a blank line of [number] lines in height, then second break","#returnButton {","smartCopyDir('./mainPageBackgrounds', './output/backgrounds')","while (item.split(' ').length > 1)","<meta property=\"og:image\" content=\"meta image link\" />","console.log('Done in ', Date.now() - start, ' ms')","const fs = require('fs')","justify-content: center;","codeLines = codeLines.sort(() => Math.random() * 2 - 1)","addStat(div, `Last updated: <code>${Math.floor((Date.now() - mem.postsUpdated[postName]) / 86400000)}</code> days ago`)","","ctx.fillStyle = 'rgb(0,255,0)'","function saveMem(mem) {","<script>","* * #[rrggbb]","#returnToTopButton span {","let wrapperStyle = cssRuleFromStyles({}, defaultStyle, scale)","parent.appendChild(div)","if (style.code) nextLine = `<code>${nextLine}</code>`","const fontSize = (/android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i).test(navigator.userAgent || navigator.vendor || window.opera) ? 50 : 25","width: 95%;","resolve(stdout || stderr)","fetch('./mem.json')","const fullPath = path.join(currentPath, item)","requestAnimationFrame(() => setTimeout(update, 1000 / maxUps - (Date.now() - lastUpdate)))","await generateLinkPreviews()","position: absolute;","'height:100%'","Object.keys(lastFileHashes).forEach(key => {","if (!postPaths.includes(file))","let style = { ...defaultStyle }","postPaths.forEach(async postPath => {","<meta property=\"twitter:title\" content=\"meta title link\" />","style.size = defaultStyle.size","let paddleSize","let lastFolderModificationTimes = {}","* COMMENT: -> \"comments\" out the line, must be alone in the tag bracket, and the first thing in the line: |[COMMENT]","inPar = part.indexOf(')') == -1 && inPar","const stat = fs.statSync(fullPath)","mem.lastUpdate = Date.now()","function generatePostCard(postPath) {","if (page == undefined) {","combinedHash.update(fileHash)","// fs.cpSync('./output', './liveServer')","recurse(`${path}/${file}`)","if (ball.x == 0) ball.sx = 1","let grid = [[]]","<div id=\"content\">","let inPar = false","if (stats.isDirectory() && !ignoredPaths.count.includes(fullPath)) {","font-weight: normal;","x: Math.floor(Math.random() * grid.length),","addStat(div, `First published: <code>${Math.floor((Date.now() - mem.postsCreated[postName]) / 86400000)}</code> days ago`)","function hashFileContents(filePath) {","await execAsync(`git checkout main`, { cwd: './' })","display: flex;","img,","paddleSize = Math.round(height / fontSize / 3 / 2) * 2 + 1","addStat(div, `Current hash: <code>${mem.postHashes[postName]}</code>`)","style.size = `${Number(nextProp)}px`","height = canvas.height = window.innerHeight","y: Math.floor(Math.random() * grid[0].length),","Custom blog","fs.rmSync(path, { recursive: true, force: true })","item = item.split(' ').join(' ')","await background.update(canvas, ctx)","return new Promise(async resolve => {","font-size: xx-large","* align: -> sets which direction text should align (changing align triggers a break)","counter: 0,","ctx.fillText('1', headX * fontSize, headY * fontSize)","columns.forEach((colum, index) => {","out.push(`font-weight:${value ? 'bold' : 'normal'}`)","grid = [...grid, ...new Array(Math.ceil(width / fontSize)).fill(0).map(() => [])].splice(0, Math.ceil(width / fontSize) + 1).map(colum => [...colum, ...new Array(Math.ceil(height / fontSize)).fill(0)].splice(0, Math.ceil(height / fontSize) + 1))","saveData[key] = value","smartRemoveExtra('./output/backgrounds', backgroundPaths.map(path => path.slice(14)))","text-decoration: underline;","html = html.split('meta title link').join(`${name} - Jack's project hub`)","let hash = 0","if (style.align != lastAlign) {","await execAsync(`git remote add origin https://github.com/AlgorithmAiden/jacks_project_hub.git`, { cwd: './' })","balls[i].y = Math.round(height / fontSize / 2) + Math.round((Math.random() * 2 - 1) * (height / fontSize / 3))","* * #[rgb] -> each range is in the value 0-f in base 16","hashSum.update(fileBuffer)","Object.keys(fileHashes).forEach(key => {","flex-wrap: wrap;","to render a |[ you can put |[|, this will not read tags like normal.","strike: false","folds.push({","const server = exec('http-server ./output -p 8080', (error, stdout, stderr) => {","columns = []","* * open | close -> starts a fold that is open | closed at start","html = html.split('meta url link').join(`https://jacks-project-hub.vercel.app/posts/${name}/`)","columns = [...columns, ...new Array(Math.ceil(width / fontSize)).fill(0).map(() => [])].splice(0, Math.ceil(width / fontSize))","style.italic = true","else if (lowerProp == 'align') {","color: #fff;","if (lastWidth != window.innerWidth || lastHeight != innerHeight) {","if (needWords) {","await execAsync('git push -f origin main', { cwd: './' })","let mem = JSON.parse(fs.readFileSync('./mem.json', 'utf8'))","const open = children[1].style.display == 'none'","const postsMissingPreview = fs.readdirSync('./output/posts').filter(post => !fs.existsSync(`./output/posts/${post}/preview.png`))","<a href=\"../../\">Home</a>","setTimeout(() => {","if (scale == 1)","if (fs.existsSync(`${postPath}/background.js`)) {","for (const file of fs.readdirSync('./output/posts'))","function runGenerateWebsite() {","<div class=\"post\" onclick=\"window.location.href='./posts/Making a custom blog/'\">\n <div class=\"title\">\n \n <div class=\"markup\" style=\"color:#fff; font-style:normal; font-weight:normal; font-size:calc(xx-large * 0.25); text-decoration: none;margin:0; padding:0; word-wrap:break-word; width:100%; height:100%;\">\n <div style=\"text-align:center;\">Making a <span style=\"color:#0f0; font-weight:bold;\"><code>|[custom]</code></span> blog</div>\n </div>\n \n </div>\n \n <div class=\"preview\">\n \n <div class=\"markup\" style=\"color:#0f0; font-style:normal; font-weight:normal; font-size:small; text-decoration: none;margin:0; padding:0; word-wrap:break-word; width:100%; height:100%;\">\n <div style=\"text-align:center;\">I like to create posts, but have never found a good platform to do so.<br>Follow along as I create my own blog site, complete with custom markup, live backgrounds, and more!</div>\n </div>\n \n </div>\n </div>","* * on | true","hash = str.charCodeAt(i) + ((hash << 5) - hash)","columns.forEach((colum, index) => drip(colum, index))","style.size = nextProp.toLowerCase()","function getFolderHash(startPath) {","if (ball.y == Math.floor(height / fontSize) - 2) ball.sy = -1","const offset = Date.now() / (1000 / linesPerSec)","const hashSum = crypto.createHash('md5')","out.push(`font-style:${value ? 'italic' : 'normal'}`)","nextLine += new Array(this.tabSize).fill('&nbsp;').join('')","console.log('Website generated in', Date.now() - start, 'ms')","const stats = fs.statSync(`${path}/${file}`)","err('invalid rgb')","postPaths = postPaths.map(post => post.split('blogPost_')[1])","style.bold = !style.bold","const puppeteer = require('puppeteer')","let nextGlobalId = 0 //used for anything that needs a unique identifier","export function start(canvas, ctx) {","function getMem() {","const process = exec('node generateWebsite.js', (error, stdout, stderr) => {","font-family: 'Fira Code', monospace;","a !-> in the second column indicates the action that happens if non of the other options are there","style[nextProp.toLowerCase()] = defaultStyle[nextProp.toLowerCase()]","Object.keys(defaultStyle).forEach(key => style[key] = defaultStyle[key])","for (const file of fs.readFileSync(path))","return hashSum.digest('hex')","const changed = checkForChanges()","scanDir(path)","process.chdir('.\\\\output')","if (background.start != undefined) await background.start(canvas, ctx)","} catch {","<meta property=\"twitter:image\" content=\"https://jacks-project-hub.vercel.app/preview.png\" />","if (stat.isDirectory() && !ignoredPaths.path.includes(fullPath)) {","font-style: normal;","//has to be set after the first update so the first background will always get loaded","let nextLine = ''","let codeLines = []","lastFirework = Date.now()","lineColors = data.uniqueLines.reduce((acc, line) => ({ ...acc, [line]: stringToNumberHash(line) * 205 + 50 }), {})",".then(mem => {","if (mem.outputHash != newHash) {","padding: 25px;","<div id=\"posts\">","fs.readdirSync('./output').forEach(file => {","fs.readdirSync(`../${projectDiv}`).forEach(projectItem => {","if (line.slice(0, 26) == '//includeInHomeBackgrounds')","border: 5px solid #15661566;",";","const canvas = document.getElementById('backgroundCanvas')","ctx.fillText('0', (ball.lx + dir.x) * fontSize, (ball.ly + dir.y) * fontSize)","function drip(colum, index) {","if (words == undefined) return","padding: 0;","fireworks.push({","const postsUpdated = mem.postsUpdated ?? {}","items.forEach(item => {","let text = nextLine + props","<div id=\"returnToTopButton\">","html = html.replace('<!-- title name link -->', name)","font-family: 'Fira Code';","await page.setViewport(await page.evaluate(() => ({","} else commitMessage = `${totalChanges} changes: ${changes.join(', ')}`","await page.waitForSelector('#backgroundCanvas')","This markup uses tags in |[] clumps mixed with text to style.","ctx.fillRect(x * fontSize, 0, fontSize, height)","const line = path.slice(2)","backgroundPaths.push(`./posts/${postPath.split('blogPost_')[1]}/background.js`)","left: 50%;","align: 'left',","args: ['--start-fullscreen']",".video_wrapper:hover {","else if (lowerProp == 'italic') {","if (part == ' ' && acc.charAt(acc.length - 1) == ' ')","'padding:0',","balls[i].x = Math.round(width / fontSize / 2) + Math.round((i - balls.length / 2 + .5) * width / fontSize / balls.length / 2)","fs.rmSync(`./output/posts/${name}/${file}`, { recursive: true, force: true })","<!-- title markup link -->","max-width: 100%;","if (fileHashes[key] == undefined)","mem.postsCreated = postsCreated","if (nextProp.slice(7, 9).toLowerCase() == 'ff') //check if alpha is needed","recurseDir(fullPath)","if (Math.random() < .1) {","if (['xx-small', 'x-small', 'smaller', 'small', 'medium', 'large', 'larger', 'x-large', 'xx-large'].includes(nextProp.toLowerCase()))","showMarkup: false,","} catch (err) { failed = true }","if (part.includes(']')) return [[part.slice(0, part.indexOf(']'))], part.slice(part.indexOf(']') + 1)]","const prefix = path.slice(0, 1)","ctx.fillText(lineNumber, (lineOffset - String(lineNumber).length * fontWidth) / 2, textY)","padding: 1px;","#returnToTopButton {","await page.screenshot({ path: `./output/posts/${post}/preview.png` })","[...wrapper.getElementsByClassName('folder')].forEach(folder => {","ctx.fillRect((ball.lx + dir.x) * fontSize, (ball.ly + dir.y) * fontSize, fontSize, fontSize)","* break: -> used to make new lines","nextLine += new Array(count).fill('&nbsp;').join('')","ctx.fillStyle = 'rgb(0,50,0)'","for (let y = 0; y < height / fontSize; y++) {","if (['open', 'close'].includes(nextProp.toLowerCase())) {","foldId++","width: window.screen.width,","text = `<span style=\"${cssRules}\">${text}</span>`","video {","html += `<br><video src=\"./${nextProp}\" controls alt=\"${nextProp}\" style=\"width:${Number(props[index + 2] * 100)}%\"></video>`","mem.uniqueLines = getUniqueLinesOfCode()","let tailX = snake[snake.length - 1].x","if (nextProp.toLowerCase() == 'global')","hasMoved = true",".then(response => response.json())","reject(error)","<script src=\"./updateStats.js\"></script>","};","grid[tailX][tailY] -= 25","fs.writeFileSync(`./output/posts/${name}/index.html`, html, 'utf8')","function saveAndCopyStats(updateLines) {","${html}","const cssRules = cssRuleFromStyles(defaultStyle, fold.style, scale)","* bold: -> sets whether text will be bold","balls[i].ly = balls[i].y","* * [path] [size] -> size is relative to the div, so a size of 1 would fill the space, or a size of .5 could fit two videos side by side","else if (Number(nextProp) > 0)","<!-- posts link -->","function scanDir(path) {","'width:100%',","overflow: hidden auto;","* * !-> toggles","fs.readFileSync(`${postPath}/background.js`, 'utf8').split('\\r\\n').forEach(line => {","let [lastWidth, lastHeight] = [0, 0]","* * rgba([r],[g],[b],[a])","else if (lowerProp == 'reset') {","fillColumns()","clearInterval(interval)","if (stat.isDirectory() && !ignoredPaths.scan.includes(fullPath)) {","if (index >= arr.length - 3) return acc","offsets = []","while (part.some(part => part.includes(' ')))","if (!codeLines.includes(item))","export function update(canvas, ctx) {","* italic: -> sets whether text will be italic","<link rel=\"stylesheet\" href=\"./siteStyles.css\">","fs.rmSync(`./output/posts/${file}`, { recursive: true, force: true })","color: #0f0;","const items = fs.readdirSync(currentPath)","ctx.textBaseline = 'top'","if (words == undefined)","<div ${fold.open ? '' : 'style=\"display:none;\"'}>","* * global -> sets the global default, this is the default used to generate the local (the default always used) default, also sets the local default","trys++","function readFile(path) {","await page.goto(`http://localhost:8080//posts/${post}/index.html`);","style.strike = false","for (let x = 0; x < width / fontSize; x++)","export function start(canvas) {","<meta property=\"twitter:url\" content=\"https://jacks-project-hub.vercel.app/\" />","const server = await new Promise((resolve, reject) => {","* * [path] [size] -> size is relative to the div, so a size of 1 would fill the space, or a size of .5 could fit two images side by side","return out.join('; ') + ';'","const backgroundPaths = []","html += `<span style=\"${cssRules}\">${nextLine}</span>`","if (nextLine != '') {","maxRadius: Math.ceil(Math.random() * 15 + 10),","max-width: 80%;","* script: -> embeds a piece of live code","bold: false,","total += fs.readFileSync(fullPath, 'utf8').split('\\r\\n').length","else if (key == 'size')","out.push(`color:${value}`)","* tabs: -> adds [number] spaces * tabSize (defaults to 3) after","<meta property=\"twitter:description\"","commitMessage = commitMessage.charAt(0).toUpperCase() + commitMessage.slice(1)","else if (lowerProp == 'strike') {","async function close() {","function addStat(parent, text) {","<div id=\"post\">","const lineOffset = String(numberOfUniqueLines).length * fontWidth","addStat(div, `Current hash: <code>${mem.outputHash}</code>`)","const totalChanges = addedFiles.length + changedFiles.length + removedFiles.length","#titleText {","export function update(canvas,ctx) {","setupFolder()","ctx.fillStyle = `rgb(0,${grid[x][y]},0)`","<title>Jack's project hub</title>","let foldId = folds.length + 1","else if (lastFileHashes[key] != fileHashes[key])","if (updateLines) {","* * !-> toggles code text","#stats {","exec(command, options, (error, stdout, stderr) => {","paddles.forEach((paddle, index) => {","margin-bottom: 10px","if (window.markup == undefined) {","@media (max-aspect-ratio: 1/1) {","function cleanPostsFolder(postPaths) {","else if (nextProp.length == 5) //is in format #rgba","balls.forEach(ball =>","position: fixed;","if (defaultStyle[key] != style[key]) {","fetch('../../mem.json')","* strike: -> sets whether text will have strikethrough","mem.lastFileHashes = fileHashes","* * [path] -> where to find the script","process.exit()","} catch (error) {","ctx.fillStyle = item[1]","* * !-> closes a fold","canvas.style.filter = 'blur(0px)'","else if (key == 'bold')","width = canvas.width = window.innerWidth","snakes = new Array(3).fill(0).map(() => new Array(25).fill(0).map(() => ({ x: Math.floor(Math.random() * grid.length), y: Math.floor(Math.random() * grid[0].length) })))","min-height: 100vm;","src: url('./firaCode.ttf') format('truetype');","if (!failed)","let total = 0","if (background.update != undefined) {","* * !-> defaults to 1","backgroundStarted = Date.now()","function cssRuleFromStyles(defaultStyle, style, scale = 1) {","const lastFileHashes = mem.lastFileHashes ?? {}","} else if (offsets[index] > 0) offsets[index]--","function fillGrid(canvas, ctx) {","// fs.writeFileSync = wrapFunction(fs.writeFileSync, (to) => console.log('write', to))",".then(data => {","paddles.map(() => Math.round(height / fontSize / 2))","* * left | center | right","let words","let columns = []","cycle = (backgroundPaths.length > 1)","postPaths.push(`../${projectDiv}/${projectItem}`)","console.error('Error pushing changes to GitHub:', error)","* video: -> embeds a video in the next line","addedFiles.push(key)","} else if (stats.isFile() && !ignoredPaths.scan.includes(fullPath))","process.on('SIGINT', close)","}, [])) {","case 2:","fs.readdirSync('../').forEach(projectDiv => {","ctx.fillRect(0, 0, width, height)","return combinedHash.digest('hex')","if (lastWidth != window.innerWidth || lastHeight != innerHeight)","canvas.classList.remove('blur')","function getOrderedLinesOfCode() {","console.log(`Screenshotting post: ${post}`)","try {","${title}","let [width, height] = [0, 0]","}","// Force push the changes to the remote repository","addStat(div, `Created out of <code>${mem.numberOfLines}</code> lines of code`)","case 0:","* charAt + toLowerCase","console.log(commitMessage)","} else if (stats.isFile() && !ignoredPaths.count.includes(fullPath))","sessionStorage.setItem('markup', JSON.stringify(saveData))","function setupLiveBackgrounds(postPaths) {","ball.ly = ball.y","text-align: center;","if (Date.now() - lastFirework >= 1000) {","const start = Date.now()","#overlay {","out.push(`font-size:calc(${value} * ${scale})`)","if (fs.statSync(`${path}/${file}`).isDirectory())","ball.x += ball.sx","let lastFirework = 0","balls.sort((a, b) => (a.sx * width + a.x) - (b.sx * width + b.x))","const http = require('http')","for (let x of [0, Math.floor(width / fontSize - 1)]) {","paddles[0] -= Math.max(-3, Math.min(3, paddles[0] - (balls[0].y - (paddleSize - 1) / 2)))","let changedFiles = []","fillGrid(canvas, ctx)","if (postHashes[post] != oldPostHashes[post]) {","filter: blur(5px) saturate(.5);","if (fs.lstatSync(`../${projectDiv}`).isDirectory())","ctx.fillRect(tailX * fontSize, tailY * fontSize, fontSize, fontSize)","const fileBuffer = fs.readFileSync(filePath)","function findPostPaths() {","lastHeight = window.innerHeight","if (fs.existsSync(`${postPath}/preview.txt`)) preview = markup.translate(fs.readFileSync(`${postPath}/preview.txt`, 'utf8'))","top: 50%;","#posts {","* * !-> sets align to the default align","function recurseDir(currentPath) {","max-width: 50%;","html += `<br><img src=\"./${nextProp}\" alt=\"${nextProp}\">`","ctx.fillRect(x * fontSize, y * fontSize, fontSize, fontSize)","background-color: #6669;",".post .title {","if (fs.lstatSync(`../${projectDiv}/${projectItem}`).isDirectory() && projectItem.split('blogPost_')[0] == '')","if (headY + 1 < grid[0].length && (snake[2].y != headY + 1 || trys > 50)) {","if (file != '.git') fs.cpSync(`./output/${file}`, `./liveServer/${file}`)","mem.postsUpdated = postsUpdated","ctx.fillRect((ball.x + dir.x) * fontSize, (ball.y + dir.y) * fontSize, fontSize, fontSize)",")","let dontPath = []","// Commit the changes","addStat(div, `Last updated: <code>${Math.floor((Date.now() - mem.lastUpdate) / 86400000)}</code> days ago`)","ctx.fillText('1', (ball.x + dir.x) * fontSize, (ball.y + dir.y) * fontSize)","fillGrid(canvas,ctx)","let offsets = []","function setValue(key, value) {","ctx.fillText(distance < firework.radius ? '0' : '1', x * fontSize, y * fontSize)","grid = [[]]","let outputHashChanged = false","filter: blur(25px) brightness(0);","balls.unshift(balls.pop())","while (!hasMoved) {","fireworks.forEach((firework, index) => {","}, []).filter(part => part != '').map(part => {","filter: blur(0) saturate(1);","ctx.fillText(('|' + line).slice(0, lineLength), lineOffset, textY)","return postPaths","const mem = getMem()","})()","let uniqueLines, lineColors, fontWidth, numberOfUniqueLines","return out","fontWidth = ctx.measureText('0').width","const postsCreated = mem.postsCreated ?? {}","process.stderr.on('data', (data) => {","width: 80%;","if (path.slice(0, 2) == '//') return","radius: 1,","}).flat(1).reduce((acc, part) => {",".video_wrapper {","const fileHashes = mem.fileHashes","top: 0;","const div = document.getElementById('stats')","if (ball.y == 0) ball.sy = 1","out.push(fullPath)","} else if ((firework.counter = (firework.counter + 1) % firework.speed) == 0) firework.radius++","numberOfUniqueLines = data.uniqueLines.length","const lineNumber = numberOfUniqueLines - (Math.floor(offset) - y + numberOfUniqueLines) % numberOfUniqueLines","const interval = setInterval(() => {","mem.fileHashes = getOutputPaths().map(path => path).reduce((acc, path) => ({ ...acc, [path.replace('output', '.')]: hashFileContents(path) }), {})","transition: all .25s ease-in-out","</html>","const linesPerSec = fontSize == 50 ? 5 : 10","backgroundPaths.push(...fs.readdirSync('./mainPageBackgrounds').map(path => `./backgrounds/${path}`))","mem.postHashes = postHashes","module.exports = {","export function start(canvas,ctx) {","fs.readdirSync('./output/posts').forEach(post => {","for (let x = Math.max(firework.x - firework.radius, 0); x < Math.min(firework.x + firework.radius, grid.length); x++)","postsUpdated[post] = Date.now()","let hasMoved = false","for (let i = 0; i < Math.random() * 25; i++) {","function countLinesOfCode(directory = './', lineCount = 0) {","const newHash = getFolderHash('./output')"],"orderedLines":{"blankPost.html":["<!DOCTYPE html>","<html lang=\"en\">","<title><!-- title name link --></title>","","<head>","    <meta charset=\"UTF-8\">","    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">","    <link rel=\"stylesheet\" href=\"../../postStyles.css\">","    <script src=\"./backgroundManager.js\"></script>","","    <!-- Primary Meta Tags -->","    <meta name=\"title\" content=\"meta title link\" />","    <meta name=\"description\" content=\"meta description link\" />","","    <!-- Open Graph / Facebook -->","    <meta property=\"og:type\" content=\"website\" />","    <meta property=\"og:url\" content=\"meta url link\" />","    <meta property=\"og:title\" content=\"meta title link\" />","    <meta property=\"og:description\" content=\"meta description link\" />","    <meta property=\"og:image\" content=\"meta image link\" />","","    <!-- Twitter -->","    <meta property=\"twitter:card\" content=\"summary_large_image\" />","    <meta property=\"twitter:url\" content=\"meta url link\" />","    <meta property=\"twitter:title\" content=\"meta title link\" />","    <meta property=\"twitter:description\" content=\"meta description link\" />","    <meta property=\"twitter:image\" content=\"meta image link\" />","</head>","","<body>","    <canvas id=\"backgroundCanvas\"></canvas>","    <div id=\"overlay\">","        <div id=\"content\">","            <div id=\"title\">","                <!-- title markup link -->","            </div>","            <div id=\"stats\">","                <!-- will autofill on website load -->","                <script>","                    // stat update script link","                </script>","            </div>","            <div id=\"returnButton\">","                <a href=\"../../\">Home</a>","            </div>","            <div id=\"post\">","                <!-- post link -->","            </div>","            <div id=\"returnToTopButton\">","                <span onclick=\"window.scroll({top:0,left:0,behavior:'smooth'})\">Return to top</span>","            </div>","        </div>","    </div>","</body>","","</html>"],"blankSite.html":["<!DOCTYPE html>","<html lang=\"en\">","<title>Jack's project hub</title>","","<head>","    <meta charset=\"UTF-8\">","    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">","    <link rel=\"stylesheet\" href=\"./siteStyles.css\">","    <script src=\"./backgroundManager.js\"></script>","    <script src=\"./updateStats.js\"></script>","","    <!-- Primary Meta Tags -->","    <meta name=\"title\" content=\"Jack's project hub\" />","    <meta name=\"description\"","        content=\"THE place to read about all of my projects, with exclusive content not seen elsewhere!\" />","","    <!-- Open Graph / Facebook -->","    <meta property=\"og:type\" content=\"website\" />","    <meta property=\"og:url\" content=\"https://jacks-project-hub.vercel.app/\" />","    <meta property=\"og:title\" content=\"Jack's project hub\" />","    <meta property=\"og:description\"","        content=\"THE place to read about all of my projects, with exclusive content not seen elsewhere!\" />","    <meta property=\"og:image\" content=\"https://jacks-project-hub.vercel.app/preview.png\" />","","    <!-- Twitter -->","    <meta property=\"twitter:card\" content=\"summary_large_image\" />","    <meta property=\"twitter:url\" content=\"https://jacks-project-hub.vercel.app/\" />","    <meta property=\"twitter:title\" content=\"Jack's project hub\" />","    <meta property=\"twitter:description\"","        content=\"THE place to read about all of my projects, with exclusive content not seen elsewhere!\" />","    <meta property=\"twitter:image\" content=\"https://jacks-project-hub.vercel.app/preview.png\" />","</head>","","<body>","    <canvas id=\"backgroundCanvas\"></canvas>","    <div id=\"overlay\">","        <div id=\"content\">","            <div id=\"titleDiv\">","                <div id=\"titleText\">","                    Custom blog","                </div>","                <div id=\"stats\">","                    <!-- will autofill on website load -->","                </div>","            </div>","            <div id=\"posts\">","                <!-- posts link -->","            </div>","        </div>","    </div>","</body>","","</html>"],"deploy.js":["const fs = require('fs')","const path = require('path')","const { exec } = require('child_process')","    ;","(async () => {","    function execAsync(command, options) {","        return new Promise((resolve, reject) => {","            exec(command, options, (error, stdout, stderr) => {","                if (error) {","                    reject(error)","                } else {","                    resolve(stdout || stderr)","                }","            })","        })","    }","","    process.chdir('C:\\\\Users\\\\jack\\\\Home\\\\Programming\\\\blog projects\\\\blog generator')","","    let mem = JSON.parse(fs.readFileSync('./mem.json', 'utf8'))","","    const fileHashes = mem.fileHashes","    const lastFileHashes = mem.lastFileHashes ?? {}","","    let addedFiles = []","    let changedFiles = []","    let removedFiles = []","","    Object.keys(fileHashes).forEach(key => {","        if (lastFileHashes[key] == undefined)","            addedFiles.push(key)","        else if (lastFileHashes[key] != fileHashes[key])","            changedFiles.push(key)","    })","    Object.keys(lastFileHashes).forEach(key => {","        if (fileHashes[key] == undefined)","            removedFiles.push(key)","    })","","    const totalChanges = addedFiles.length + changedFiles.length + removedFiles.length","    if (totalChanges == 0) {","        console.log('No changes')","        return","    }","","    let changes = []","    if (addedFiles.length > 0) changes.push(`added ${addedFiles.length} file${addedFiles.length == 1 ? '' : 's'}: ${addedFiles.join(', ')}`)","    if (changedFiles.length > 0) changes.push(`changed ${changedFiles.length} file${changedFiles.length == 1 ? '' : 's'}: ${changedFiles.join(', ')}`)","    if (removedFiles.length > 0) changes.push(`removed ${removedFiles.length} file${removedFiles.length == 1 ? '' : 's'}: ${removedFiles.join(', ')}`)","","    let commitMessage","","    if (changes.length == 1) {","        commitMessage = changes[0]","        commitMessage = commitMessage.charAt(0).toUpperCase() + commitMessage.slice(1)","    } else commitMessage = `${totalChanges} changes: ${changes.join(', ')}`","","    process.chdir('.\\\\output')","","    try {","        // Check if .git directory exists, if not, initialize a new repository","        try {","            fs.accessSync(path.join('./', '.git'))","        } catch {","            await execAsync(`git init`, { cwd: './' })","            await execAsync(`git remote add origin https://github.com/AlgorithmAiden/jacks_project_hub.git`, { cwd: './' })","        }","","        // Ensure the main branch exists","        try {","            await execAsync(`git checkout -b main`, { cwd: './' })","        } catch {","            await execAsync(`git checkout main`, { cwd: './' })","        }","","        // Add all changes to staging","        await execAsync(`git add .`, { cwd: './' })","","        // Commit the changes","        await execAsync(`git commit -m \"${commitMessage}\"`, { cwd: './' })","","        // Force push the changes to the remote repository","        await execAsync('git push -f origin main', { cwd: './' })","","        console.log(commitMessage)","","        mem.lastFileHashes = fileHashes","        fs.writeFileSync('../mem.json', JSON.stringify(mem), 'utf8')","    } catch (error) {","        console.error('Error pushing changes to GitHub:', error)","    }","})()"],"generateWebsite.js":["const fs = require('fs')","const path = require('path')","const crypto = require('crypto')","const markup = require('./markup.js')","const puppeteer = require('puppeteer')","const { exec } = require('child_process')","const http = require('http')","","","// function wrapFunction(func, prefunc) {","//     return (...args) => {","//         prefunc(...args)","//         func(...args)","//     }","// }","","// fs.writeFileSync = wrapFunction(fs.writeFileSync, (to) => console.log('write', to))","// fs.copyFileSync = wrapFunction(fs.copyFileSync, (...args) => console.log('copy', ...args))","","const ignoredPaths = (() => {","    let dontScan = []","    let dontCount = []","    let dontPath = []","    let paths = fs.readFileSync('./ignoredPaths.txt', 'utf8').split('\\r\\n')","    paths.forEach(path => {","        if (path.slice(0, 2) == '//') return","        const prefix = path.slice(0, 1)","        const line = path.slice(2)","        if (prefix == '0') {","            dontScan.push(line)","            dontCount.push(line)","            dontPath.push(line)","        } else if (prefix == '1') {","            dontCount.push(line)","        } else if (prefix == '2') {","            dontScan.push(line)","        } else if (prefix == '3') {","            dontScan.push(line)","            dontCount.push(line)","        }","    })","    return { scan: dontScan, count: dontCount, path: dontPath }","})()","","function smartCopyFile(from, to) {","    const exists = fs.existsSync(to)","    if (!exists || fs.statSync(from).mtime.getTime() !== fs.statSync(to).mtime.getTime()) {","        if (!exists)","            fs.mkdirSync(path.dirname(to), { recursive: true, force: true })","        fs.copyFileSync(from, to)","    }","}","","function smartMakeDir(path) {","    if (!fs.existsSync(path))","        fs.mkdirSync(path)","}","","function smartCopyDir(from, to) {","    for (const file of fs.readdirSync(from))","        if (fs.statSync(`${from}/${file}`).isDirectory())","            smartCopyDir(`${from}/${file}`, `${to}/${file}`)","        else","            smartCopyFile(`${from}/${file}`, `${to}/${file}`)","}","","function smartRemoveExtra(path, allowed) {","    for (const file of fs.readdirSync(path))","        if (!allowed.includes(file)) {","            console.log(path, allowed, file, `${path}/${file}`)","            fs.rmSync(`${path}/${file}`, { recursive: true, force: true })","        }","}","","function setupFolder() {","    process.chdir('C:\\\\Users\\\\jack\\\\Home\\\\Programming\\\\blog projects\\\\blog generator')","    if (!fs.existsSync('./output')) fs.mkdirSync('./output')","    smartRemoveExtra('./output', ['.git', 'backgrounds', 'posts', 'backgroundManager.js', 'firaCode.ttf', 'index.html', 'mem.json', 'postStyles.css', 'siteStyles.css', 'updateStats.js', 'preview.png'])","    smartCopyFile('./blankSite.html', './output/index.html')","    smartCopyFile('./siteStyles.css', './output/siteStyles.css')","    smartCopyFile('./postStyles.css', './output/postStyles.css')","    smartCopyFile('./updateHomeStats.js', './output/updateStats.js')","    smartCopyFile('./firaCode.ttf', './output/firaCode.ttf')","    smartMakeDir('./output/backgrounds')","    smartMakeDir('./output/posts')","}","","function findPostPaths() {","    const postPaths = []","    fs.readdirSync('../').forEach(projectDiv => {","        if (fs.lstatSync(`../${projectDiv}`).isDirectory())","            fs.readdirSync(`../${projectDiv}`).forEach(projectItem => {","                if (fs.lstatSync(`../${projectDiv}/${projectItem}`).isDirectory() && projectItem.split('blogPost_')[0] == '')","                    postPaths.push(`../${projectDiv}/${projectItem}`)","            })","    })","    return postPaths","}","","function cleanPostsFolder(postPaths) {","    postPaths = postPaths.map(post => post.split('blogPost_')[1])","    for (const file of fs.readdirSync('./output/posts'))","        if (!postPaths.includes(file))","            fs.rmSync(`./output/posts/${file}`, { recursive: true, force: true })","}","","function setupLiveBackgrounds(postPaths) {","    const backgroundPaths = []","","    postPaths.forEach(async postPath => {","        if (fs.existsSync(`${postPath}/background.js`)) {","            fs.readFileSync(`${postPath}/background.js`, 'utf8').split('\\r\\n').forEach(line => {","                if (line.slice(0, 26) == '//includeInHomeBackgrounds')","                    backgroundPaths.push(`./posts/${postPath.split('blogPost_')[1]}/background.js`)","            })","        }","    })","","    backgroundPaths.push(...fs.readdirSync('./mainPageBackgrounds').map(path => `./backgrounds/${path}`))","","    smartRemoveExtra('./output/backgrounds', backgroundPaths.map(path => path.slice(14)))","","    smartCopyDir('./mainPageBackgrounds', './output/backgrounds')","    fs.writeFileSync('./output/backgroundManager.js', `const backgroundPaths = ${JSON.stringify(backgroundPaths)};\\r\\n${fs.readFileSync('./siteBackgroundManager.js', 'utf8')}`, 'utf8')","}","","function hashFileContents(filePath) {","    const fileBuffer = fs.readFileSync(filePath)","    const hashSum = crypto.createHash('md5')","    hashSum.update(fileBuffer)","    return hashSum.digest('hex')","}","","function getFolderHash(startPath) {","    let combinedHash = crypto.createHash('md5')","","    function recurseDir(currentPath) {","        const items = fs.readdirSync(currentPath)","        items.forEach(item => {","            const fullPath = path.join(currentPath, item)","            const stat = fs.statSync(fullPath)","            if (stat.isDirectory() && !ignoredPaths.scan.includes(fullPath)) {","                recurseDir(fullPath)","            } else if (stat.isFile() && !ignoredPaths.scan.includes(fullPath) && item !== 'preview.png') {","                const fileHash = hashFileContents(fullPath)","                combinedHash.update(fileHash)","            }","        })","    }","","    recurseDir(startPath)","    return combinedHash.digest('hex')","}","","function countLinesOfCode(directory = './', lineCount = 0) {","    const files = fs.readdirSync(directory)","","    let total = 0","","    files.forEach(file => {","        const fullPath = path.join(directory, file)","        const stats = fs.statSync(fullPath)","","        if (stats.isDirectory() && !ignoredPaths.count.includes(fullPath)) {","            total += countLinesOfCode(fullPath)","        } else if (stats.isFile() && !ignoredPaths.count.includes(fullPath))","            total += fs.readFileSync(fullPath, 'utf8').split('\\r\\n').length","    })","    return total","}","","function getUniqueLinesOfCode() {","    let codeLines = []","","    function readFile(path) {","        let fileContent = fs.readFileSync(path, 'utf8').split('\\r\\n')","","        fileContent.forEach(item => {","            while (item.split('  ').length > 1)","                item = item.split('  ').join(' ')","            item = item.trim()","            if (!codeLines.includes(item))","                codeLines.push(item)","        })","    }","","    function scanDirectory(directory) {","        const files = fs.readdirSync(directory)","","        files.forEach(file => {","            const fullPath = path.join(directory, file)","            const stats = fs.statSync(fullPath)","","            if (stats.isDirectory() && !ignoredPaths.scan.includes(fullPath)) {","                scanDirectory(fullPath)","            } else if (stats.isFile() && !ignoredPaths.scan.includes(fullPath))","                readFile(fullPath)","        })","    }","","    scanDirectory('./')","","    codeLines = codeLines.sort(() => Math.random() * 2 - 1)","","    return codeLines","}","","function getOrderedLinesOfCode() {","    let codeLines = {}","","    function readFile(path) {","        let fileContent = fs.readFileSync(path, 'utf8').split('\\r\\n')","","        codeLines[path] = []","","        fileContent.forEach(item => {","            codeLines[path].push(item)","        })","    }","","    function scanDirectory(directory) {","        const files = fs.readdirSync(directory)","","        files.forEach(file => {","            const fullPath = path.join(directory, file)","            const stats = fs.statSync(fullPath)","","            if (stats.isDirectory() && !ignoredPaths.scan.includes(fullPath)) {","                scanDirectory(fullPath)","            } else if (stats.isFile() && !ignoredPaths.scan.includes(fullPath))","                readFile(fullPath)","        })","    }","","    scanDirectory('./')","","    return codeLines","}","","function getMem() {","    return JSON.parse(fs.readFileSync('./mem.json', 'utf8'))","}","","function saveMem(mem) {","    fs.writeFileSync('./mem.json', JSON.stringify(mem), 'utf8')","}","","function generatePost(postPath) {","    const name = postPath.split('blogPost_')[1]","","    smartMakeDir(`./output/posts/${name}`)","","    fs.readdirSync(postPath).forEach(file => {","        if (!['script.txt', 'title.txt', 'preview.txt'].includes(file)) {","            if (fs.statSync(`${postPath}/${file}`).isDirectory())","                smartCopyDir(`${postPath}/${file}`, `./output/posts/${name}/${file}`, { recursive: true })","            else","                smartCopyFile(`${postPath}/${file}`, `./output/posts/${name}/${file}`)","        }","    })","","    smartCopyFile('./postBackgroundManager.js', `./output/posts/${name}/backgroundManager.js`)","","    let html = fs.readFileSync('./blankPost.html', 'utf8')","","    html = html.split('meta title link').join(`${name} - Jack's project hub`)","    html = html.split('meta url link').join(`https://jacks-project-hub.vercel.app/posts/${name}/`)","    const text = markup.stripTags(fs.readFileSync(`${postPath}/preview.txt`, 'utf-8'))","    html = html.split('meta description link').join(text.length < 100 ? text : text.slice(0, 97) + '...')","    html = html.split('meta image link').join(`https://jacks-project-hub.vercel.app/posts/${name}/preview.png`)","    html = html.replace('<!-- title name link -->', name)","    let title = name","    if (fs.existsSync(`${postPath}/title.txt`)) title = markup.translate(fs.readFileSync(`${postPath}/title.txt`, 'utf8'))","    html = html.replace('<!-- title markup link -->', title)","    html = html.replace('// stat update script link', `const postName = '${name}'\\r\\n${fs.readFileSync('./updatePostStats.js', 'utf8')}`.split('\\r\\n').join('\\r\\n                    '))","    html = html.replace('<!-- post link -->', markup.translate(fs.readFileSync(`${postPath}/script.txt`, 'utf8')))","","","","    fs.writeFileSync(`./output/posts/${name}/index.html`, html, 'utf8')","","    function scan(to, from) {","        for (const file of fs.readdirSync(to))","            if (!fs.existsSync(`${from}/${file}`) && !['backgroundManager.js', 'index.html', 'preview.png'].includes(file))","                fs.rmSync(`${to}/${file}`, { recursive: true, force: true })","            else if (fs.statSync(`${to}/${file}`).isDirectory())","                scan(`${to}/${file}`, `${from}/${file}`)","    }","    scan(`./output/posts/${name}`, postPath)","","    for (const file of ['script.txt', 'title.txt', 'preview.txt'])","        if (fs.existsSync(`./output/posts/${name}/${file}`))","            fs.rmSync(`./output/posts/${name}/${file}`, { recursive: true, force: true })","}","","function generatePostCard(postPath) {","    const name = postPath.split('blogPost_')[1]","    let title = name","    if (fs.existsSync(`${postPath}/title.txt`)) title = markup.translate(fs.readFileSync(`${postPath}/title.txt`, 'utf8'), 1 / 4)","    let html = `<div class=\"post\" onclick=\"window.location.href='./posts/${name}/'\">`","    html += `","    <div class=\"title\">","        ${title}","    </div>","    `","","    let preview","    if (fs.existsSync(`${postPath}/preview.txt`)) preview = markup.translate(fs.readFileSync(`${postPath}/preview.txt`, 'utf8'))","    if (preview != undefined)","        html += `","        <div class=\"preview\">","            ${preview}","        </div>","        `","","    html += '</div>'","","    return html","}","","const changedPosts = []","let outputHashChanged = false","function saveAndCopyStats(updateLines) {","    const newHash = getFolderHash('./output')","    const mem = getMem()","    if (mem.outputHash != newHash) {","        mem.lastUpdate = Date.now()","        updated = true","        outputHashChanged = true","    }","    mem.outputHash = newHash","    if (updateLines) {","        mem.numberOfLines = countLinesOfCode()","        mem.uniqueLines = getUniqueLinesOfCode()","        mem.orderedLines = getOrderedLinesOfCode()","    }","","    function getOutputPaths(currentPath = './output', out = []) {","        const items = fs.readdirSync(currentPath)","        items.forEach(item => {","            const fullPath = path.join(currentPath, item)","            const stat = fs.statSync(fullPath)","            if (stat.isDirectory() && !ignoredPaths.path.includes(fullPath)) {","                getOutputPaths(fullPath, out)","            } else if (stat.isFile() && !ignoredPaths.path.includes(fullPath))","                out.push(fullPath)","        })","        return out","    }","    mem.fileHashes = getOutputPaths().map(path => path).reduce((acc, path) => ({ ...acc, [path.replace('output', '.')]: hashFileContents(path) }), {})","    const postHashes = fs.readdirSync('./output/posts').reduce((acc, post) => ({ ...acc, [post]: getFolderHash(`./output/posts/${post}`) }), {})","    const oldPostHashes = mem.postHashes ?? {}","    const postsUpdated = mem.postsUpdated ?? {}","    fs.readdirSync('./output/posts').forEach(post => {","        if (postHashes[post] != oldPostHashes[post]) {","            postsUpdated[post] = Date.now()","            changedPosts.push(post)","        }","    })","    mem.postHashes = postHashes","    mem.postsUpdated = postsUpdated","    const postsCreated = mem.postsCreated ?? {}","    fs.readdirSync('./output/posts').forEach(post => {","        if (postsCreated[post] == undefined)","            postsCreated[post] = Date.now()","    })","    mem.postsCreated = postsCreated","    let siteMem = {}","    for (let key of ['lastScan', 'lastUpdate', 'outputHash', 'numberOfLines', 'uniqueLines', 'orderedLines', 'postsUpdated', 'postsCreated', 'postHashes']) siteMem[key] = mem[key]","    fs.writeFileSync('./output/mem.json', JSON.stringify(siteMem), 'utf8')","    saveMem(mem)","}","","function generateMainPage(postPaths) {","    let html = fs.readFileSync('./output/index.html', 'utf8')","","    html = html.replace('<!-- posts link -->', postPaths.map(postPath => generatePostCard(postPath)).join('\\n '))","","    fs.writeFileSync('./output/index.html', html, 'utf8')","}","","async function generateLinkPreviews() {","    const postsMissingPreview = fs.readdirSync('./output/posts').filter(post => !fs.existsSync(`./output/posts/${post}/preview.png`))","    const missingMainPreview = !fs.existsSync('./output/preview.png')","    if (outputHashChanged || missingMainPreview || changedPosts.length || postsMissingPreview.length)","        return new Promise(async resolve => {","            console.log('Taking preview screenshots.')","            const server = await new Promise((resolve, reject) => {","                const server = exec('http-server ./output -p 8080', (error, stdout, stderr) => {","                    if (error) {","                        console.error(`exec error: ${error}`)","                        reject(error)","                        return","                    }","                    console.log(`stdout: ${stdout}`)","                    console.error(`stderr: ${stderr}`)","                })","                const interval = setInterval(() => {","                    http.get('http://localhost:8080', (res) => {","                        if (res.statusCode === 200) {","                            clearInterval(interval)","                            resolve(server)","                        }","                    }).on('error', () => { })","                }, 100)","                server.on('error', (err) => {","                    clearInterval(interval)","                    reject(err)","                })","            })","            const browser = await puppeteer.launch()","            const page = await browser.newPage()","            await page.setViewport(await page.evaluate(() => ({","                width: 2000,","                height: 1000","            })))","            if (outputHashChanged || missingMainPreview) {","                console.log('Screenshotting main page.')","                await page.goto(`http://localhost:8080/index.html`);","                (await page.target().createCDPSession()).send('Network.clearBrowserCache')","                await page.reload({ waitUntil: ['networkidle0'], bypassCache: true })","                await page.waitForSelector('#backgroundCanvas')","                await page.evaluate(() => {","                    const canvas = document.getElementById('backgroundCanvas')","                    canvas.style.transition = 'all 0s'","                    canvas.style.filter = 'blur(0px)'","                })","                await page.screenshot({ path: './output/preview.png' })","            }","            for (const post of [...changedPosts, ...postsMissingPreview].sort().reduce((acc, item) => {","                if (acc[acc.length - 1] !== item) acc.push(item)","                return acc","            }, [])) {","                console.log(`Screenshotting post: ${post}`)","                await page.goto(`http://localhost:8080//posts/${post}/index.html`);","                (await page.target().createCDPSession()).send('Network.clearBrowserCache')","                await page.reload({ waitUntil: ['networkidle0'], bypassCache: true })","                await page.screenshot({ path: `./output/posts/${post}/preview.png` })","            }","            await browser.close()","            server.kill()","            function recurse(path) {","                let failed = false","                try {","                    for (const file of fs.readFileSync(path))","                        if (fs.statSync(`${path}/${file}`).isDirectory())","                            try {","                                recurse(`${path}/${file}`)","                            } catch (err) { failed = true }","                        else","                            try {","                                fs.rmSync(`${path}/${file}`, { recursive: true, force: true })","                            } catch (err) { failed = true }","                    if (!failed)","                        fs.rmSync(path, { recursive: true, force: true })","                } catch (err) { }","            }","            recurse('./temp')","            console.log('Screenshots taken.')","            resolve()","        })","    else","        return Promise.resolve()","};","","(async () => {","    const start = Date.now()","    console.log('Generating website')","    setupFolder()","","    const postPaths = findPostPaths()","","    cleanPostsFolder(postPaths)","","    setupLiveBackgrounds(postPaths)","","    postPaths.forEach(postPath => generatePost(postPath))","","    generateMainPage(postPaths)","","    saveAndCopyStats(true)","","    await generateLinkPreviews()","","    console.log('Website generated in', Date.now() - start, 'ms')","})()"],"livePreview.js":["const fs = require('fs')","const puppeteer = require('puppeteer')","const { exec } = require('child_process')","const http = require('http')","","let server, browser, page","async function reloadPage() {","    if (page == undefined) {","        console.log('2')","        fs.mkdirSync('./liveServer')","        console.log(3)","        fs.readdirSync('./output').forEach(file => {","            console.log(file)","            if (file != '.git') fs.cpSync(`./output/${file}`, `./liveServer/${file}`)","        })","        console.log('done')","        // fs.cpSync('./output', './liveServer')","        await new Promise((resolve, reject) => {","            server = exec('http-server ./liveServer -p 8080', (error, stdout, stderr) => {","                if (error) {","                    console.error(`exec error: ${error}`)","                    reject(error)","                    return","                }","                console.log(`stdout: ${stdout}`)","                console.error(`stderr: ${stderr}`)","            })","            const interval = setInterval(() => {","                http.get('http://localhost:8080', (res) => {","                    if (res.statusCode === 200) {","                        clearInterval(interval)","                        resolve()","                    }","                }).on('error', () => { })","            }, 100)","            server.on('error', (err) => {","                clearInterval(interval)","                reject(err)","            })","        })","        browser = await puppeteer.launch({","            headless: false,","            args: ['--start-fullscreen']","        })","        page = await browser.newPage()","        await page.goto(`http://localhost:8080/index.html`)","    }","    (await page.target().createCDPSession()).send('Network.clearBrowserCache')","    await page.reload({ waitUntil: ['networkidle0'], bypassCache: true })","    await page.setViewport(await page.evaluate(() => ({","        width: window.screen.width,","        height: window.screen.height","    })))","    await page.evaluate(() => {","        window.dispatchEvent(new Event('resize'))","    })","}","","function runGenerateWebsite() {","    return new Promise((resolve, reject) => {","        const process = exec('node generateWebsite.js', (error, stdout, stderr) => {","            if (error) {","                reject(`Error: ${error.message}`)","                return","            }","            if (stderr) {","                reject(`Stderr: ${stderr}`)","                return","            }","            resolve(stdout)","        })","","        process.stdout.on('data', (data) => {","            console.log(data.toString())","        })","","        process.stderr.on('data', (data) => {","            console.error(data.toString())","        })","    })","}","","let lastFolderModificationTimes = {}","function checkForChanges() {","    const postPaths = []","    fs.readdirSync('../').forEach(projectDiv => {","        if (fs.lstatSync(`../${projectDiv}`).isDirectory())","            fs.readdirSync(`../${projectDiv}`).forEach(projectItem => {","                if (fs.lstatSync(`../${projectDiv}/${projectItem}`).isDirectory() && projectItem.split('blogPost_')[0] == '')","                    postPaths.push(`../${projectDiv}/${projectItem}`)","            })","    })","    let changed = false","    for (const path of postPaths) {","        let maxMTime = 0","        function scanDir(path) {","            for (const file of fs.readdirSync(path)) {","                const stats = fs.statSync(`${path}/${file}`)","                if (stats.isDirectory()) scanDir(`${path}/${file}`)","                maxMTime = Math.max(maxMTime, stats.mtime.getTime())","            }","        }","        scanDir(path)","        if (lastFolderModificationTimes[path] != maxMTime) changed = true","        lastFolderModificationTimes[path] = maxMTime","    }","    return changed","}","","async function run() {","","    const changed = checkForChanges()","","    if (changed) {","        const start = Date.now()","        console.log('\\nChange detected')","        await runGenerateWebsite()","        console.log(1)","        await reloadPage()","        console.log('Done in ', Date.now() - start, ' ms')","    }","","    setTimeout(run, 100)","}","run()","","setTimeout(() => {","    lastFolderModificationTimes = {}","}, 2500)","","async function close() {","    await browser.close()","    server.kill()","    fs.rmdirSync('./liveServer', { recursive: true, force: true })","    console.log('Killed children')","    process.exit()","}","","process.on('SIGINT', close)","process.on('SIGTERM', close)","process.on('uncaughtException', close)","process.on('exit', close)"],"markup.js":["function cssRuleFromStyles(defaultStyle, style, scale = 1) {","    let out = []","    Object.keys(style).forEach(key => {","        if (defaultStyle[key] != style[key]) {","            const value = style[key]","            if (key == 'color')","                out.push(`color:${value}`)","            else if (key == 'italic')","                out.push(`font-style:${value ? 'italic' : 'normal'}`)","            else if (key == 'bold')","                out.push(`font-weight:${value ? 'bold' : 'normal'}`)","            else if (key == 'size')","                if (scale == 1)","                    out.push(`font-size:${value}`)","                else","                    out.push(`font-size:calc(${value} * ${scale})`)","            else if (key == 'strike')","                out.push(`text-decoration: ${value ? 'line-through' : 'none'}`)","        }","    })","    return out.join('; ') + ';'","}","","function err(message) {","    throw new Error(`Error parsing markup: ${message}`)","}","","//some helper functions to make more readable code","","/**"," * charAt + toLowerCase"," */","const lca = (str, i) => str.charAt(i).toLowerCase()","","/**"," * slice + toLowerCase"," */","const ls = (str, start, stop) => str.slice(start, stop).toLowerCase()","","//used so I can check nextProp without it existing","const emptyString = new Array(2 ** 16).fill(' ').join('')","","//the script injected into the output html","function script() {","    (() => {","        const wrapper = document.currentScript.parentNode","        function setValue(key, value) {","            let saveData = sessionStorage.getItem('markup') != undefined ? JSON.parse(sessionStorage.getItem('markup')) : {}","            saveData[key] = value","            sessionStorage.setItem('markup', JSON.stringify(saveData))","        }","        function getValue(key) {","            return (sessionStorage.getItem('markup') != undefined ? JSON.parse(sessionStorage.getItem('markup')) : {})[key]","        }","        function removeKey(key) {","            let saveData = sessionStorage.getItem('markup') != undefined ? JSON.parse(sessionStorage.getItem('markup')) : {}","            delete saveData[key]","            sessionStorage.setItem('markup', JSON.stringify(saveData))","        }","        document.addEventListener('DOMContentLoaded', () => {","            [...wrapper.getElementsByClassName('folder')].forEach(folder => {","                if (getValue(`id_${folder.dataset.id}`) != undefined) {","                    const children = folder.children","                    const open = getValue(`id_${folder.dataset.id}`)","                    children[0].innerHTML = children[0].innerHTML.replace(open ? 'open' : 'close', open ? 'close' : 'open')","                    children[1].style.display = open ? '' : 'none'","                }","            })","        })","        if (window.markup == undefined) {","            window.markup = {","                folder(event) {","                    event.stopPropagation()","                    const folder = event.target.closest('.folder')","                    const children = folder.children","                    const open = children[1].style.display == 'none'","                    children[0].innerHTML = children[0].innerHTML.replace(open ? 'open' : 'close', open ? 'close' : 'open')","                    children[1].style.display = open ? '' : 'none'","                    setValue(`id_${folder.dataset.id}`, open)","                }","            }","        }","    })()","}","","let nextGlobalId = 0 //used for anything that needs a unique identifier","","module.exports = {","    defaultStyle: {","        color: '#0f0',","        italic: false,","        bold: false,","        size: 'medium',","        code: false,","        align: 'left',","        showMarkup: false,","        strike: false","    },","    tabSize: 3,","    stripTags(rawMarkup, breakCode = '\\n') {","        return rawMarkup.split('\\r\\n').filter(line => line.slice(0, 10) != '|[COMMENT]').join('').split('|[').filter(part => part != '').map(part => {","            if (part.slice(0, 1) == '|') return '|[' + part.slice(1)","            if (part.includes(']')) return [[part.slice(0, part.indexOf(']'))], part.slice(part.indexOf(']') + 1)]","            return part","        }).flat(1).reduce((acc, part) => {","            if (typeof part == 'string')","                if (acc.length > 0 && typeof acc[acc.length - 1] == 'string') {","                    acc[acc.length - 1] += part","                    return acc","                }","                else","                    return [...acc, part]","            while (part.some(part => part.includes(' ')))","                part = part.map(part => part.split(' ')).flat()","            let inPar = false","            part = part.reduce((acc, part) => {","                if (inPar)","                    acc[acc.length - 1] += ' ' + part","                else acc = [...acc, part]","                if (part.indexOf('(') > -1)","                    inPar = part.indexOf('(') > part.indexOf(')')","                else","                    inPar = part.indexOf(')') == -1 && inPar","                return acc","            }, [])","            part = part.filter(item => item != '')","            if (part.length == 0)","                return acc","            else","                return [...acc, part]","        }, []).filter(part => part != '').map(part => {","            if (typeof part === 'string') return part","            return part.reduce((acc, tag) => {","                if (tag === 'break') acc += breakCode","                return acc","            }, '')","        }).join('')","    },","    translate(rawMarkup, scale = 1) {","        markup = rawMarkup.split('\\r\\n').filter(line => line.slice(0, 10) != '|[COMMENT]').join('').split('|[').filter(part => part != '').map(part => {","            if (part.slice(0, 1) == '|') return '|[' + part.slice(1)","            if (part.includes(']')) return [[part.slice(0, part.indexOf(']'))], part.slice(part.indexOf(']') + 1)]","            return part","        }).flat(1).reduce((acc, part) => {","            if (typeof part == 'string')","                if (acc.length > 0 && typeof acc[acc.length - 1] == 'string') {","                    acc[acc.length - 1] += part","                    return acc","                }","                else","                    return [...acc, part]","            while (part.some(part => part.includes(' ')))","                part = part.map(part => part.split(' ')).flat()","            let inPar = false","            part = part.reduce((acc, part) => {","                if (inPar)","                    acc[acc.length - 1] += ' ' + part","                else acc = [...acc, part]","                if (part.indexOf('(') > -1)","                    inPar = part.indexOf('(') > part.indexOf(')')","                else","                    inPar = part.indexOf(')') == -1 && inPar","                return acc","            }, [])","            part = part.filter(item => item != '')","            if (part.length == 0)","                return acc","            else","                return [...acc, part]","        }, []).filter(part => part != '')","","        let defaultStyle = { ...this.defaultStyle }","","        let style = { ...defaultStyle }","","        let lastAlign","","        let folds = []","","        let needScript = false","","        let html = ''","","        let nextLine = ''","","        markup.forEach(props => {","            if (typeof props == 'string') {","                if (style.align != lastAlign) {","                    if (lastAlign != undefined)","                        html += '</div>'","                    html += `<div style=\"text-align:${style.align};\">`","                    lastAlign = style.align","                }","                const cssRules = cssRuleFromStyles(defaultStyle, style, scale)","                let text = nextLine + props","                if (style.code) text = `<code>${text}</code>`","                if (cssRules.length == 1) //take the ; into account","                    html += text","                else","                    html += `<span style=\"${cssRules}\">${text}</span>`","                nextLine = ''","            } else {","                if (style.showMarkup)","                    nextLine += `|[${props.join(' ')}]`","                for (let index = 0; index < props.length; index++) {","                    const prop = props[index]","                    const nextProp = props[index + 1] ?? emptyString","                    const lowerProp = prop.toLowerCase()","","                    if (lowerProp == 'color') {","                        if (ls(nextProp, 0, 1) == '#') { //must be hex","                            if (nextProp.length == 4) //is in format #rgb","                                style.color = nextProp.toLowerCase()","                            else if (nextProp.length == 5) //is in format #rgba","                                if (ls(nextProp, 4, 5) == 'f') //check if alpha is needed","                                    style.color = ls(str, 0, 4)","                                else","                                    style.color = nextProp.toLowerCase()","                            else if (nextProp.length == 7) //is in format #rrggbb","                                if (lca(nextProp, 1) == lca(nextProp, 2) && lca(nextProp, 3) == lca(nextProp, 4) && lca(nextProp, 5) == lca(nextProp, 6)) //check if the color can be shortened","                                    style.color = ('#' + lca(nextProp, 1) + lca(nextProp, 3) + lca(nextProp, 5)).toLowerCase()","                                else","                                    style.color = nextProp.toLowerCase()","                            else if (nextProp.length == 9) //is in format #rrggbbaa","                                if (nextProp.slice(7, 9).toLowerCase() == 'ff') //check if alpha is needed","                                    if (lca(nextProp, 1) == lca(nextProp, 2) && lca(nextProp, 3) == lca(nextProp, 4) && lca(nextProp, 5) == lca(nextProp, 6)) //check if the color can be shortened","                                        style.color = ('#' + lca(nextProp, 1) + lca(nextProp, 3) + lca(nextProp, 5)).toLowerCase()","                                    else","                                        style.color = nextProp.slice(0, 7).toLowerCase()","                                else","                                    if (lca(nextProp, 1) == lca(nextProp, 2) && lca(nextProp, 3) == lca(nextProp, 4) && lca(nextProp, 5) == lca(nextProp, 6) && lca(nextProp, 7) == lca(nextProp, 8)) //check if the color can be shortened","                                        style.color = ('#' + lca(nextProp, 1) + lca(nextProp, 3) + lca(nextProp, 5) + lca(nextProp, 7)).toLowerCase()","                                    else","                                        style.color = nextProp.toLowerCase()","                            else err(`invalid hex code`)","                        } else if (ls(nextProp, 0, 3) == 'rgb') {","                            try {","                                const digits = nextProp.toLowerCase().slice(lca(nextProp, 3) == 'a' ? 5 : 4).split(')')[0].split(',').map(digit => Math.max(0, Math.min(255, Math.round(Number(digit.trim())))).toString(16).padStart(2, '0')).filter((digit, index) => digit != 'ff' || index != 3)","                                if (digits.every(digit => digit.charAt(0) == digit.charAt(1)))","                                    style.color = '#' + digits.reduce((acc, digit) => acc + digit.charAt(0), '')","                                else","                                    style.color = '#' + digits.reduce((acc, digit) => acc + digit, '')","                            } catch {","                                err('invalid rgb')","                            }","                        } else","                            style.color = defaultStyle.color","                    }","","                    else if (lowerProp == 'italic') {","                        if (['on', 'true'].includes(nextProp.toLowerCase()))","                            style.italic = true","                        else if (['off', 'false'].includes(nextProp.toLowerCase()))","                            style.italic = false","                        else","                            style.italic = !style.italic","                    }","","                    else if (lowerProp == 'bold') {","                        if (['on', 'true'].includes(nextProp.toLowerCase()))","                            style.bold = true","                        else if (['off', 'false'].includes(nextProp.toLowerCase()))","                            style.bold = false","                        else","                            style.bold = !style.bold","                    }","","                    else if (lowerProp == 'space') {","                        try {","                            const count = Math.round(Number(nextProp))","                            if (count > 0 && !isNaN(count))","                                nextLine += new Array(count).fill('&nbsp;').join('')","                            else","                                nextLine += '&nbsp;'","                        } catch {","                            nextLine += '&nbsp;'","                        }","                    }","","                    else if (lowerProp == 'tab') {","                        try {","                            const count = Math.round(Number(nextProp) * this.tabSize)","                            if (count > 0 && !isNaN(count))","                                nextLine += new Array(count).fill('&nbsp;').join('')","                            else","                                nextLine += new Array(this.tabSize).fill('&nbsp;').join('')","                        } catch {","                            nextLine += new Array(this.tabSize).fill('&nbsp;').join('')","                        }","                    }","","                    else if (lowerProp == 'break') {","                        if (Number(nextProp) > 0)","                            nextLine += `<div style=\"display:block; height:${Number(nextProp)}em; line-height:${Number(nextProp)}em;\"></div>`","                        else","                            nextLine += '<br>'","                    }","","                    else if (lowerProp == 'size') {","                        if (['xx-small', 'x-small', 'smaller', 'small', 'medium', 'large', 'larger', 'x-large', 'xx-large'].includes(nextProp.toLowerCase()))","                            style.size = nextProp.toLowerCase()","                        else if (Number(nextProp) > 0)","                            style.size = `${Number(nextProp)}px`","                        else","                            style.size = defaultStyle.size","                    }","","                    else if (lowerProp == 'code') {","                        if (['on', 'true'].includes(nextProp.toLowerCase()))","                            style.code = true","                        else if (['off', 'false'].includes(nextProp.toLowerCase()))","                            style.code = false","                        else","                            style.code = !style.code","                    }","","                    else if (lowerProp == 'align') {","                        if (['left', 'center', 'right'].includes(nextProp.toLowerCase()))","                            style.align = nextProp.toLowerCase()","                        else","                            style.align = defaultStyle.align","                    }","","                    else if (lowerProp == 'reset') {","                        if (Object.keys(defaultStyle).includes(nextProp.toLowerCase()))","                            style[nextProp.toLowerCase()] = defaultStyle[nextProp.toLowerCase()]","                        else","                            Object.keys(defaultStyle).forEach(key => style[key] = defaultStyle[key])","","                    }","","                    else if (lowerProp == 'default') {","                        if (nextProp.toLowerCase() == 'global')","                            Object.keys(style).forEach(key => this.defaultStyle[key] = style[key])","                        Object.keys(style).forEach(key => defaultStyle[key] = style[key])","                    }","","                    else if (lowerProp == 'fold') {","                        needScript = true","                        if (['open', 'close'].includes(nextProp.toLowerCase())) {","                            let foldId = folds.length + 1","                            while (rawMarkup.includes(`fold_${foldId}`))","                                foldId++","                            folds.push({","                                id: foldId,","                                style: { ...style },","                                open: nextProp.toLowerCase() == 'open'","                            })","                            if (lastAlign != undefined)","                                html += '</div>'","                            html += `fold_${foldId}`","                            html += `<div style=\"text-align:${style.align};\">`","                        } else {","                            if (lastAlign != undefined)","                                html += '</div>'","                            lastAlign = undefined //to make the next line trigger a new block","                            const fold = folds.pop()","                            const content = html.split(`fold_${fold.id}`)[1]","                            html = html.slice(0, html.indexOf(`fold_${fold.id}`))","                            const cssRules = cssRuleFromStyles(defaultStyle, fold.style, scale)","                            let text = `|[click to ${fold.open ? 'close' : 'open'}]`","                            if (style.code) text = `<code>${text}</code>`","                            if (cssRules.length != 1)","                                text = `<span style=\"${cssRules}\">${text}</span>`","","                            html += `","                            <div class=\"folder\" data-id=${nextGlobalId++}>","                                <div style=\"cursor: pointer; text-align:${fold.style.align};\" onclick=\"window.markup.folder(event)\">","                                    ${text}","                                </div>","                                <div ${fold.open ? '' : 'style=\"display:none;\"'}>","                                    ${content}","                                </div>","                            </div>","                            `","                        }","                    }","","                    else if (lowerProp == 'image') {","                        if (style.align != lastAlign) {","                            if (lastAlign != undefined)","                                html += '</div>'","                            html += `<div style=\"text-align:${style.align};\">`","                            lastAlign = style.align","                        }","                        if (props.length > index + 1 && Number(props[index + 2]) > 0 && Number(props[index + 2] != 1))","                            html += `<br><img src=\"./${nextProp}\" alt=\"${nextProp}\" style=\"width:${Number(props[index + 2] * 100)}%\">`","                        else","                            html += `<br><img src=\"./${nextProp}\" alt=\"${nextProp}\">`","                    }","","                    else if (lowerProp == 'showmarkup') {","                        if (['on', 'true'].includes(nextProp.toLowerCase()))","                            style.showMarkup = true","                        else if (['off', 'false'].includes(nextProp.toLowerCase()))","                            style.showMarkup = false","                        else","                            style.showMarkup = !style.showMarkup","                    }","","                    else if (lowerProp == 'video') {","                        if (style.align != lastAlign) {","                            if (lastAlign != undefined)","                                html += '</div>'","                            html += `<div style=\"text-align:${style.align};\">`","                            lastAlign = style.align","                        }","                        if (props.length > index + 1 && Number(props[index + 2]) > 0 && Number(props[index + 2] != 1))","                            html += `<br><video src=\"./${nextProp}\" controls alt=\"${nextProp}\" style=\"width:${Number(props[index + 2] * 100)}%\"></video>`","                        else","                            html += `<br><video src=\"./${nextProp}\" controls alt=\"${nextProp}\"></video>`","                    }","","                    else if (lowerProp == 'strike') {","                        if (['on', 'true'].includes(nextProp.toLowerCase()))","                            style.strike = true","                        else if (['off', 'false'].includes(nextProp.toLowerCase()))","                            style.strike = false","                        else","                            style.strike = !style.strike","                    }","","                    else if (lowerProp == 'script' && nextProp != undefined) {","                        nextLine += `<script src=\"${nextProp}\"></script>`","                    }","                }","            }","        })","","        if (nextLine != '') {","            if (style.align != lastAlign) {","                if (lastAlign != undefined)","                    html += '</div>'","                html += `<div style=\"text-align:${style.align};\">`","                lastAlign = style.align","            }","            const cssRules = cssRuleFromStyles(defaultStyle, style, scale)","            if (style.code) nextLine = `<code>${nextLine}</code>`","            if (cssRules.length == 1) //take the ; into account","                html += nextLine","            else","                html += `<span style=\"${cssRules}\">${nextLine}</span>`","        }","","        if (lastAlign != undefined)","            html += '</div>'","","        let wrapperStyle = cssRuleFromStyles({}, defaultStyle, scale)","        wrapperStyle += [","            'margin:0',","            'padding:0',","            'word-wrap:break-word',","            'width:100%',","            'height:100%'","        ].join('; ') + ';'","","        const scriptString = script.toString().slice(25).split('\\r\\n').reduce((acc, part) => acc + '; ' + part.split('//')[0], '').split('').reduce((acc, part, index, arr) => {","            if (index >= arr.length - 3) return acc","            if (part == ' ' && acc.charAt(acc.length - 1) == ' ')","                return acc","            return acc + part","        }, '').split('{; ').join('{').split('; }').join('}').split('; ').reduce((acc, part) => {","            if (acc.slice(acc.length - 2) == '; ' && part == '') return acc","            return acc + part + '; '","        }, '')","","        return `","        <div class=\"markup\" style=\"${wrapperStyle}\">${needScript ? `\\r\\n<script>${scriptString}</script>` : ''}","            ${html}","        </div>","        `","    }","}","","/**","This markup uses tags in |[] clumps mixed with text to style. ","the text is evaluated from beginning to end, any text being rendered using the current style.","to change the style, add |[] with tags and values inside, this sets the style for everything after, until changes.","tags are evaluated by order they appear, in a |[].","tags are found by scanning for |[ and reading until ], and are separated by spaces.","to render a |[ you can put |[|, this will not read tags like normal.","you can put ] anywhere, and unless it is closing a tag area it will render.","the tags are below, items in the first column are the keywords, items in the second column are values to be used.","a !-> in the second column indicates the action that happens if non of the other options are there","values in the second column with a [] signify that you put a value there (but don't include the [])","values in the second column with a ?[] signify that the value is optional",""," * color: -> sets the text color to the most efficient hex value that represents prop 1"," * * #[rgb] -> each range is in the value 0-f in base 16"," * * #[rgba]"," * * #[rrggbb]"," * * #[rrggbbaa]"," * * rgb([r],[g],[b]) -> each value is in the range 0-255"," * * rgb([r],[g],[b],[a])"," * * rgba([r],[g],[b])"," * * rgba([r],[g],[b],[a])"," * * !-> sets color to the default color"," * italic: -> sets whether text will be italic"," * * on | true"," * * off | false"," * * !-> toggles italics"," * bold: -> sets whether text will be bold"," * * on | true"," * * off | false"," * * !-> toggles bold text"," * space: -> adds [number] spaces using '&nbsp;' after"," * * [number]"," * * !-> defaults to 1"," * tabs: -> adds [number] spaces * tabSize (defaults to 3) after"," * * [number]"," * * !-> defaults to 1"," * break: -> used to make new lines"," * * [number] -> creates a break and then inserts a blank line of [number] lines in height, then second break"," * * !-> just adds <br>"," * size: -> sets the text size"," * * xx-small | x-small | smaller | small | medium | large | larger | x-large | xx-large -> uses the default sizes"," * * [number] -> (viewport width + viewport height) / 2 * [number], [number] is in the range [number] >= 0.02"," * * !-> sets size to the default size"," * code: -> sets whether text will be code using <code></code>"," * * on | true"," * * off | false"," * * !-> toggles code text"," * align: -> sets which direction text should align (changing align triggers a break)"," * * left | center | right"," * * !-> sets align to the default align"," * reset: "," * * [property] -> sets [property] to the default [property]"," * * !-> resets the full style to the default style"," * default: -> changes the default used for many tags, but does not change the default retrospectively"," * * global -> sets the global default, this is the default used to generate the local (the default always used) default, also sets the local default "," * * !-> sets the default style to the current style"," * fold: -> creates foldable content, with all content until the fold close being inside (fold triggers a break)"," * * open | close -> starts a fold that is open | closed at start"," * * !-> closes a fold"," * image: -> embeds an image in the next line"," * * [path] [size] -> size is relative to the div, so a size of 1 would fill the space, or a size of .5 could fit two images side by side"," * * [path] !-> defaults to 1"," * showMarkup: -> sets whether the markup tags will be hidden (defaults to false)"," * * on | true"," * * off | false"," * * !-> toggles"," * COMMENT: -> \"comments\" out the line, must be alone in the tag bracket, and the first thing in the line: |[COMMENT]"," * video: -> embeds a video in the next line"," * * [path] [size] -> size is relative to the div, so a size of 1 would fill the space, or a size of .5 could fit two videos side by side"," * * [path] !-> defaults to 1"," * strike: -> sets whether text will have strikethrough"," * * on | true"," * * off | false"," * * !-> toggles strikethrough"," * script: -> embeds a piece of live code"," * * [path] -> where to find the script","","","for example: to create 'before green it was boring' with 'green' being green you could use the following markup:","before |[color #0f0]green|[color] it was boring","the first tag clump sets the color to green (#0f0), the second clump resets color to the default"," */"],"output\\backgroundManager.js":["const backgroundPaths = [\"./posts/Making a custom blog/background.js\",\"./backgrounds/fireworks.js\",\"./backgrounds/hiddenSnakes.js\",\"./backgrounds/pong.js\",\"./backgrounds/rain.js\",\"./backgrounds/randomSymbols.js\",\"./backgrounds/uniqueCode.js\"];","document.addEventListener('DOMContentLoaded', async () => {","    function mixPaths() {","        const lastPath = backgroundPaths[backgroundPaths.length - 1]","        do backgroundPaths.sort(() => Math.random() * 2 - 1)","        while (backgroundPaths.length > 1 && backgroundPaths[0] == lastPath)","    }","    mixPaths()","","    let backgroundIndex = -1","","    const minTimePerBackground = 1000 * 30","    const blurTime = 1000 * 1","    let backgroundStarted = 0","","    let blurred = false","","    let cycle = true","","    let currentBackground = {}","","    let loadedBackgrounds = []","","    const maxUps = 60","    let lastUpdate = 0","","    async function update() {","        lastUpdate = Date.now()","","        const canvas = document.getElementById('backgroundCanvas')","        const ctx = canvas.getContext('2d')","","        if (cycle && minTimePerBackground - (Date.now() - backgroundStarted) <= blurTime && !blurred) {","            canvas.classList.add('blur')","            blurred = true","        }","","        if (cycle && Date.now() - backgroundStarted >= minTimePerBackground) {","            if (currentBackground.stop != undefined) await currentBackground.stop(canvas, ctx)","            backgroundIndex = (backgroundIndex + 1) % backgroundPaths.length","            if (backgroundIndex == 0) mixPaths()","            if (!loadedBackgrounds.includes(backgroundPaths[backgroundIndex])) await new Promise(r => {","                const script = document.createElement('script')","                script.type = 'module'","                script.src = backgroundPaths[backgroundIndex]","                script.onload = r","                document.head.appendChild(script)","                loadedBackgrounds.push(backgroundPaths[backgroundIndex])","            })","            currentBackground = await import(backgroundPaths[backgroundIndex])","            if (currentBackground.start != undefined) await currentBackground.start(canvas, ctx)","            canvas.classList.remove('blur')","            blurred = false","            backgroundStarted = Date.now()","        }","        if (currentBackground.update != undefined) await currentBackground.update(canvas, ctx)","","        //has to be set after the first update so the first background will always get loaded","        cycle = (backgroundPaths.length > 1)","","        requestAnimationFrame(() => setTimeout(update, 1000 / maxUps - (Date.now() - lastUpdate)))","    }","    update()","})"],"output\\backgrounds\\fireworks.js":["const fontSize = (/android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i).test(navigator.userAgent || navigator.vendor || window.opera) ? 50 : 25","","let [width, height] = [0, 0]","","let [lastWidth, lastHeight] = [0, 0]","","let grid = [[]]","","function fillGrid(canvas, ctx) {","    width = canvas.width = window.innerWidth","    height = canvas.height = window.innerHeight","","    grid = [...grid, ...new Array(Math.ceil(width / fontSize)).fill(0).map(() => [])].splice(0, Math.ceil(width / fontSize) + 1).map(colum => [...colum, ...new Array(Math.ceil(height / fontSize)).fill(0)].splice(0, Math.ceil(height / fontSize) + 1))","","    ctx.fillStyle = '#000'","    ctx.fillRect(0, 0, width, height)","    ctx.font = `${fontSize}px 'Fira Code'`","    ctx.textBaseline = 'top'","","    for (let x = 0; x < width / fontSize; x++)","        for (let y = 0; y < height / fontSize; y++) {","            ctx.fillStyle = 'rgb(0,50,0)'","            ctx.fillText('0', x * fontSize, y * fontSize)","        }","}","","let fireworks = []","let lastFirework = 0","","export function update(canvas, ctx) {","    if (lastWidth != window.innerWidth || lastHeight != innerHeight)","        fillGrid(canvas, ctx)","    lastWidth = window.innerWidth","    lastHeight = window.innerHeight","","    ctx.font = `${fontSize}px 'Fira Code'`","    ctx.textBaseline = 'top'","","    if (Date.now() - lastFirework >= 1000) {","        lastFirework = Date.now()","        fireworks.push({","            x: Math.floor(Math.random() * grid.length),","            y: Math.floor(Math.random() * grid[0].length),","            counter: 0,","            radius: 1,","            maxRadius: Math.ceil(Math.random() * 15 + 10),","            speed: Math.ceil(Math.random() * 10)","        })","    }","","    fireworks.forEach((firework, index) => {","        for (let x = Math.max(firework.x - firework.radius, 0); x < Math.min(firework.x + firework.radius, grid.length); x++)","            for (let y = Math.max(firework.y - firework.radius, 0); y < Math.min(firework.y + firework.radius, grid[0].length); y++) {","                const distance = Math.abs(x - firework.x) + Math.abs(y - firework.y) + 1","                if (distance <= firework.radius) {","                    ctx.fillStyle = '#000'","                    ctx.fillRect(x * fontSize, y * fontSize, fontSize, fontSize)","                    ctx.fillStyle = `rgb(0,${255 - firework.radius * (205 / firework.maxRadius)},0)`","                    ctx.fillText(distance < firework.radius ? '0' : '1', x * fontSize, y * fontSize)","                }","            }","        if (firework.radius == firework.maxRadius) {","            for (let x = Math.max(firework.x - firework.radius, 0); x < Math.min(firework.x + firework.radius, grid.length); x++)","                for (let y = Math.max(firework.y - firework.radius, 0); y < Math.min(firework.y + firework.radius, grid[0].length); y++)","                    if (Math.abs(x - firework.x) + Math.abs(y - firework.y) <= firework.radius) {","                        ctx.fillStyle = '#000'","                        ctx.fillRect(x * fontSize, y * fontSize, fontSize, fontSize)","                        ctx.fillStyle = 'rgb(0,50,0)'","                        ctx.fillText('0', x * fontSize, y * fontSize)","                    }","            fireworks.splice(index, 1)","        } else if ((firework.counter = (firework.counter + 1) % firework.speed) == 0) firework.radius++","    })","","}","export function start(canvas, ctx) {","    grid = [[]]","    fillGrid(canvas, ctx)","}"],"output\\backgrounds\\hiddenSnakes.js":["const fontSize = (/android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i).test(navigator.userAgent || navigator.vendor || window.opera) ? 50 : 25","","let [width, height] = [0, 0]","","let [lastWidth, lastHeight] = [0, 0]","","let grid = [[]]","","let snakes = []","","function fillGrid(canvas, ctx) {","    width = canvas.width = window.innerWidth","    height = canvas.height = window.innerHeight","","    grid = [...grid, ...new Array(Math.ceil(width / fontSize)).fill(0).map(() => [])].splice(0, Math.ceil(width / fontSize) + 1).map(colum => [...colum, ...new Array(Math.ceil(height / fontSize)).fill(50)].splice(0, Math.ceil(height / fontSize) + 1))","","    ctx.fillStyle = '#000'","    ctx.fillRect(0, 0, width, height)","    ctx.font = `${fontSize}px 'Fira Code'`","    ctx.textBaseline = 'top'","","    for (let x = 0; x < width / fontSize; x++)","        for (let y = 0; y < height / fontSize; y++) {","            ctx.fillStyle = `rgb(0,${grid[x][y]},0)`","            ctx.fillText('0', x * fontSize, y * fontSize)","        }","}","","export function update(canvas, ctx) {","    if (lastWidth != window.innerWidth || lastHeight != innerHeight)","        fillGrid(canvas, ctx)","    lastWidth = window.innerWidth","    lastHeight = window.innerHeight","","    ctx.font = `${fontSize}px 'Fira Code'`","    ctx.textBaseline = 'top'","","    let snake = snakes[Math.floor(Math.random() * snakes.length)]","    let tailX = snake[snake.length - 1].x","    let tailY = snake[snake.length - 1].y","    grid[tailX][tailY] -= 25","    ctx.fillStyle = '#000'","    ctx.fillRect(tailX * fontSize, tailY * fontSize, fontSize, fontSize)","    ctx.fillStyle = `rgb(0,${grid[tailX][tailY]},0)`","    ctx.fillText('0', tailX * fontSize, tailY * fontSize)","    for (let index = snake.length - 1; index > 0; index--) {","        snake[index] = { ...snake[index - 1] }","    }","    let headX = snake[0].x","    let headY = snake[0].y","    let hasMoved = false","    let trys = 0","    while (!hasMoved) {","        trys++","        switch (Math.floor(Math.random() * 4)) {","            case 0:","                if (headX > 0 && (snake[2].x != headX - 1 || trys > 50)) {","                    snake[0].x--","                    hasMoved = true","                }","                break","            case 1:","                if (headY > 0 && (snake[2].y != headY - 1 || trys > 50)) {","                    snake[0].y--","                    hasMoved = true","                }","                break","            case 2:","                if (headX + 1 < grid.length && (snake[2].x != headX + 1 || trys > 50)) {","                    snake[0].x++","                    hasMoved = true","                }","                break","            case 3:","                if (headY + 1 < grid[0].length && (snake[2].y != headY + 1 || trys > 50)) {","                    snake[0].y++","                    hasMoved = true","                }","                break","        }","    }","    grid[snake[0].x][snake[0].y] += 50","    ctx.fillStyle = '#000'","    ctx.fillRect(headX * fontSize, headY * fontSize, fontSize, fontSize)","    ctx.fillStyle = `rgb(0,${grid[headX][headY]},0)`","    ctx.fillText('1', headX * fontSize, headY * fontSize)","}","","export function start(canvas, ctx) {","    grid = [[]]","    fillGrid(canvas, ctx)","","    snakes = new Array(3).fill(0).map(() => new Array(25).fill(0).map(() => ({ x: Math.floor(Math.random() * grid.length), y: Math.floor(Math.random() * grid[0].length) })))","}"],"output\\backgrounds\\pong.js":["const fontSize = (/android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i).test(navigator.userAgent || navigator.vendor || window.opera) ? 50 : 25","","let [width, height] = [0, 0]","","let [lastWidth, lastHeight] = [0, 0]","","let balls = new Array(fontSize == 50 ? 2 : 5).fill(0)","let paddles = [0, 0]","","let paddleSize","","function resetCanvas(canvas, ctx) {","    width = canvas.width = window.innerWidth","    height = canvas.height = window.innerHeight","","    ctx.fillStyle = '#000'","    ctx.fillRect(0, 0, width, height)","    ctx.font = `${fontSize}px 'Fira Code'`","    ctx.textBaseline = 'top'","","    ctx.fillStyle = 'rgb(0,50,0)'","    for (let x = 0; x < width / fontSize; x++)","        for (let y = 0; y < height / fontSize; y++)","            ctx.fillText('0', x * fontSize, y * fontSize)","}","","const dirs = [{ x: 0, y: 0 }, { x: 1, y: 0 }, { x: -1, y: 0 }, { x: 0, y: 1 }, { x: 0, y: -1 }]","","export function update(canvas, ctx) {","    if (lastWidth != window.innerWidth || lastHeight != innerHeight)","        resetCanvas(canvas, ctx)","    lastWidth = window.innerWidth","    lastHeight = window.innerHeight","","    for (let x of [0, Math.floor(width / fontSize - 1)]) {","        ctx.fillStyle = '#000'","        ctx.fillRect(x * fontSize, 0, fontSize, height)","        ctx.fillStyle = 'rgb(0,50,0)'","        for (let y = 0; y < height / fontSize; y++)","            ctx.fillText('0', x * fontSize, y * fontSize)","    }","    balls.forEach(ball =>","        dirs.forEach(dir => {","            ctx.fillStyle = '#000'","            ctx.fillRect((ball.lx + dir.x) * fontSize, (ball.ly + dir.y) * fontSize, fontSize, fontSize)","","            ctx.fillStyle = 'rgb(0,50,0)'","            ctx.fillText('0', (ball.lx + dir.x) * fontSize, (ball.ly + dir.y) * fontSize)","        })","    )","    ctx.fillStyle = 'rgb(0,255,0)'","    balls.forEach(ball =>","        dirs.forEach(dir => {","            ctx.fillStyle = '#000'","            ctx.fillRect((ball.x + dir.x) * fontSize, (ball.y + dir.y) * fontSize, fontSize, fontSize)","","            ctx.fillStyle = 'rgb(0,255,0)'","            ctx.fillText('1', (ball.x + dir.x) * fontSize, (ball.y + dir.y) * fontSize)","        })","    )","","    ctx.fillStyle = 'rgb(0,255,0)'","    paddles.forEach((paddle, index) => {","        ctx.fillStyle = '#000'","        ctx.fillRect(index * Math.floor(width / fontSize - 1) * fontSize, paddle * fontSize, fontSize, paddleSize * fontSize)","","        ctx.fillStyle = '#0f0'","        for (let i = 0; i < paddleSize; i++) {","            ctx.fillText('1', index * Math.floor(width / fontSize - 1) * fontSize, (paddle + i) * fontSize)","        }","    })","    balls.forEach(ball => {","        ball.lx = ball.x","        ball.ly = ball.y","","        ball.x += ball.sx","        ball.y += ball.sy","","        if (ball.x == 0) ball.sx = 1","        if (ball.y == 0) ball.sy = 1","        if (ball.x == Math.floor(width / fontSize) - 2) ball.sx = -1","        if (ball.y == Math.floor(height / fontSize) - 2) ball.sy = -1","    })","","    balls.sort((a, b) => (a.sx * width + a.x) - (b.sx * width + b.x))","    paddles[0] -= Math.max(-3, Math.min(3, paddles[0] - (balls[0].y - (paddleSize - 1) / 2)))","","    balls.unshift(balls.pop())","    paddles[1] -= Math.max(-3, Math.min(3, paddles[1] - (balls[0].y - (paddleSize - 1) / 2)))","}","","export function start(canvas, ctx) {","    resetCanvas(canvas, ctx)","    for (let i = 0; i < balls.length; i++) {","        balls[i] = {}","        balls[i].sx = Math.floor(Math.random() * 2) * 2 - 1","        balls[i].sy = Math.floor(Math.random() * 2) * 2 - 1","        balls[i].x = Math.round(width / fontSize / 2) + Math.round((i - balls.length / 2 + .5) * width / fontSize / balls.length / 2)","        balls[i].y = Math.round(height / fontSize / 2) + Math.round((Math.random() * 2 - 1) * (height / fontSize / 3))","        balls[i].lx = balls[i].x","        balls[i].ly = balls[i].y","    }","    paddles.map(() => Math.round(height / fontSize / 2))","    paddleSize = Math.round(height / fontSize / 3 / 2) * 2 + 1","}"],"output\\backgrounds\\rain.js":["const fontSize = (/android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i).test(navigator.userAgent || navigator.vendor || window.opera) ? 50 : 25","","let [width, height] = [0, 0]","","let [lastWidth, lastHeight] = [0, 0]","","let columns = []","let offsets = []","","let words","","let needWords = false","","fetch('./mem.json')","    .then(response => response.json())","    .then(data => {","        const specialChars = '`~!@#$%^&*()_-+={[}]|\\\\:;\"\\'<,>.?/1234567890'.split('')","        words = data.uniqueLines.join(' ')","        while (specialChars.some(char => words.includes(char)))","            specialChars.forEach(char =>","                words = words.split(char).join(' ')","            )","        words = words.split(' ').filter(word => word != '')","","        if (needWords) {","            for (let i = 0; i < height * 2; i += fontSize)","                columns.forEach((colum, index) => drip(colum, index))","            needWords = false","        }","    })","    .catch(error => {","        console.error('Error fetching mem for stats:', error)","    })","","","function fillColumns() {","    columns = [...columns, ...new Array(Math.ceil(width / fontSize)).fill(0).map(() => [])].splice(0, Math.ceil(width / fontSize))","    offsets = [...offsets, ...new Array(Math.ceil(width / fontSize)).fill(0)].splice(0, Math.ceil(width / fontSize))","}","","function drip(colum, index) {","    if (Math.random() < .1) {","        if (offsets[index] == 0) {","            const word = (words[Math.floor(Math.random() * words.length)] + '   ').split('')","            offsets[index] = word.length","            const color = `rgb(0,${Math.round(Math.random() * 205) + 50},0)`","            word.forEach((char, index) => colum.unshift([word[word.length - index - 1], color]))","        } else","            offsets[index]--","    } else if (offsets[index] > 0) offsets[index]--","    else colum.unshift([''])","    colum = colum.splice(Math.ceil(height / fontSize) + offsets[index])","}","","export function update(canvas, ctx) {","    if (words == undefined) return","","    if (lastWidth != window.innerWidth || lastHeight != innerHeight) {","        width = canvas.width = window.innerWidth","        height = canvas.height = window.innerHeight","        fillColumns()","    }","    lastWidth = window.innerWidth","    lastHeight = window.innerHeight","","    ctx.font = `${fontSize}px 'Fira Code'`","    ctx.textBaseline = 'top'","","    ctx.fillStyle = '#000'","    ctx.fillRect(0, 0, width, height)","","    columns.forEach((colum, x) => {","        colum.forEach((item, y) => {","            ctx.fillStyle = item[1]","            ctx.fillText(item[0], x * fontSize, (y - offsets[x]) * fontSize)","        })","    })","","    columns.forEach((colum, index) => {","        if (Math.random() < .1) drip(colum, index)","    })","}","","export function start(canvas) {","    width = canvas.width = window.innerWidth","    height = canvas.height = window.innerHeight","    columns = []","    offsets = []","    fillColumns()","    if (words == undefined)","        needWords = true","    else","        for (let i = 0; i < height * 2; i += fontSize)","            columns.forEach((colum, index) => drip(colum, index))","}"],"output\\backgrounds\\randomSymbols.js":["const fontSize = (/android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i).test(navigator.userAgent || navigator.vendor || window.opera) ? 50 : 25","","const chars = '`~!@#$%^&*()_-+={[}]|\\\\:;\"\\'<,>.?/'.split('')","","let [width, height] = [0, 0]","","let [lastWidth, lastHeight] = [0, 0]","","let grid = [[]]","","function fillGrid(canvas,ctx) {","    width = canvas.width = window.innerWidth","    height = canvas.height = window.innerHeight","","    grid = [...grid, ...new Array(Math.ceil(width / fontSize)).fill(0).map(() => [])].splice(0, Math.ceil(width / fontSize) + 1).map(colum => [...colum, ...new Array(Math.ceil(height / fontSize)).fill(0).map(() => Math.floor(Math.random() * 255))].splice(0, Math.ceil(height / fontSize) + 1))","","    ctx.fillStyle = '#000'","    ctx.fillRect(0, 0, width, height)","    ctx.font = `${fontSize}px 'Fira Code'`","    ctx.textBaseline = 'top'","","    for (let x = 0; x < width / fontSize; x++)","        for (let y = 0; y < height / fontSize; y++) {","            ctx.fillStyle = `rgb(0,${grid[x][y]},0)`","            ctx.fillText(chars[grid[x][y] % chars.length], x * fontSize, y * fontSize)","        }","}","","export function update(canvas,ctx) {","    if (lastWidth != window.innerWidth || lastHeight != innerHeight)","        fillGrid(canvas,ctx)","    lastWidth = window.innerWidth","    lastHeight = window.innerHeight","","    ctx.font = `${fontSize}px 'Fira Code'`","    ctx.textBaseline = 'top'","","    for (let i = 0; i < Math.random() * 25; i++) {","        const x = Math.floor(Math.random() * grid.length)","        const y = Math.floor(Math.random() * grid[0].length)","        grid[x][y] = Math.floor(Math.random() * 255)","        ctx.fillStyle = '#000'","        ctx.fillRect(x * fontSize, y * fontSize, fontSize, fontSize)","        ctx.fillStyle = `rgb(0,${grid[x][y]},0)`","        ctx.fillText(chars[grid[x][y] % chars.length], x * fontSize, y * fontSize)","    }","}","","export function start(canvas,ctx) {","    fillGrid(canvas,ctx)","}","","export function stop() {","    grid = [[]]","}"],"output\\backgrounds\\uniqueCode.js":["const fontSize = (/android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i).test(navigator.userAgent || navigator.vendor || window.opera) ? 50 : 25","","let [width, height] = [0, 0]","","let [lastWidth, lastHeight] = [0, 0]","","let uniqueLines, lineColors, fontWidth, numberOfUniqueLines","","function stringToNumberHash(str) {","    let hash = 0","    for (let i = 0; i < str.length; i++) {","        hash = str.charCodeAt(i) + ((hash << 5) - hash)","    }","    const maxInt32 = Math.pow(2, 31) - 1","    return (hash & maxInt32) / maxInt32","}","","","fetch('./mem.json')","    .then(response => response.json())","    .then(data => {","        uniqueLines = data.uniqueLines","        lineColors = data.uniqueLines.reduce((acc, line) => ({ ...acc, [line]: stringToNumberHash(line) * 205 + 50 }), {})","        numberOfUniqueLines = data.uniqueLines.length","    })","    .catch(error => {","        console.error('Error fetching mem for stats:', error)","    })","","const linesPerSec = fontSize == 50 ? 5 : 10","","export function update(canvas, ctx) {","    if (uniqueLines != undefined) {","        if (lastWidth != window.innerWidth || lastHeight != innerHeight) {","            width = canvas.width = window.innerWidth","            height = canvas.height = window.innerHeight","        }","        lastWidth = window.innerWidth","        lastHeight = window.innerHeight","","        ctx.font = `${fontSize}px 'Fira Code'`","        ctx.textBaseline = 'top'","","        ctx.fillStyle = '#000'","        ctx.fillRect(0, 0, canvas.width, canvas.height)","","        const lineOffset = String(numberOfUniqueLines).length * fontWidth","        const offset = Date.now() / (1000 / linesPerSec)","        const lineLength = Math.ceil((width - lineOffset) / fontWidth)","        for (let y = -1; y < height / fontSize + 1; y++) {","            const lineNumber = numberOfUniqueLines - (Math.floor(offset) - y + numberOfUniqueLines) % numberOfUniqueLines","            const line = uniqueLines[lineNumber - 1]","            const textY = (y + offset % 1) * fontSize","            ctx.fillStyle = `rgb(0,${lineColors[line]},0)`","            ctx.fillText(lineNumber, (lineOffset - String(lineNumber).length * fontWidth) / 2, textY)","            ctx.fillText(('|' + line).slice(0, lineLength), lineOffset, textY)","        }","    }","}","","export function start(canvas, ctx) {","    ctx.font = `${fontSize}px 'Fira Code'`","    fontWidth = ctx.measureText('0').width","}"],"output\\index.html":["<!DOCTYPE html>","<html lang=\"en\">","<title>Jack's project hub</title>","","<head>","    <meta charset=\"UTF-8\">","    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">","    <link rel=\"stylesheet\" href=\"./siteStyles.css\">","    <script src=\"./backgroundManager.js\"></script>","    <script src=\"./updateStats.js\"></script>","","    <!-- Primary Meta Tags -->","    <meta name=\"title\" content=\"Jack's project hub\" />","    <meta name=\"description\"","        content=\"THE place to read about all of my projects, with exclusive content not seen elsewhere!\" />","","    <!-- Open Graph / Facebook -->","    <meta property=\"og:type\" content=\"website\" />","    <meta property=\"og:url\" content=\"https://jacks-project-hub.vercel.app/\" />","    <meta property=\"og:title\" content=\"Jack's project hub\" />","    <meta property=\"og:description\"","        content=\"THE place to read about all of my projects, with exclusive content not seen elsewhere!\" />","    <meta property=\"og:image\" content=\"https://jacks-project-hub.vercel.app/preview.png\" />","","    <!-- Twitter -->","    <meta property=\"twitter:card\" content=\"summary_large_image\" />","    <meta property=\"twitter:url\" content=\"https://jacks-project-hub.vercel.app/\" />","    <meta property=\"twitter:title\" content=\"Jack's project hub\" />","    <meta property=\"twitter:description\"","        content=\"THE place to read about all of my projects, with exclusive content not seen elsewhere!\" />","    <meta property=\"twitter:image\" content=\"https://jacks-project-hub.vercel.app/preview.png\" />","</head>","","<body>","    <canvas id=\"backgroundCanvas\"></canvas>","    <div id=\"overlay\">","        <div id=\"content\">","            <div id=\"titleDiv\">","                <div id=\"titleText\">","                    Custom blog","                </div>","                <div id=\"stats\">","                    <!-- will autofill on website load -->","                </div>","            </div>","            <div id=\"posts\">","                <div class=\"post\" onclick=\"window.location.href='./posts/Making a custom blog/'\">\n    <div class=\"title\">\n        \n        <div class=\"markup\" style=\"color:#fff; font-style:normal; font-weight:normal; font-size:calc(xx-large * 0.25); text-decoration: none;margin:0; padding:0; word-wrap:break-word; width:100%; height:100%;\">\n            <div style=\"text-align:center;\">Making a <span style=\"color:#0f0; font-weight:bold;\"><code>|[custom]</code></span> blog</div>\n        </div>\n        \n    </div>\n    \n        <div class=\"preview\">\n            \n        <div class=\"markup\" style=\"color:#0f0; font-style:normal; font-weight:normal; font-size:small; text-decoration: none;margin:0; padding:0; word-wrap:break-word; width:100%; height:100%;\">\n            <div style=\"text-align:center;\">I like to create posts, but have never found a good platform to do so.<br>Follow along as I create my own blog site, complete with custom markup, live backgrounds, and more!</div>\n        </div>\n        \n        </div>\n        </div>","            </div>","        </div>","    </div>","</body>","","</html>"],"output\\postStyles.css":["@font-face {","    font-family: 'Fira Code';","    src: url('../../firaCode.ttf') format('truetype');","    font-weight: normal;","    font-style: normal;","}","","html,","body {","    margin: 0;","    padding: 0;","    overflow: hidden auto;","    background-color: #000;","    font-family: 'Fira Code';","}","","#overlay {","    position: absolute;","    top: 0;","    left: 0;","    width: 100%;","    min-height: 100vm;","    z-index: 1;","    padding: 1px;","    display: flex;","    justify-content: center;","    align-items: center;","}","","#content {","    width: 80%;","    background-color: #3336;","    border: 5px solid #15661566;","    margin: 50px 0 50px 0;","}","","@media (max-aspect-ratio: 1/1) {","    #content {","        width: 95%;","    }","}","","code {","    font-family: 'Fira Code', monospace;","    background-color: #000;","    border: 2px solid #333;","}","","#stats {","    display: flex;","    flex-direction: column;","    background-color: #6669;","    border: 5px solid #3339;","    padding: 5px;","    text-align: center;","    color: #0f0;","}","","#returnButton {","    background-color: #6669;","    border: 5px solid #3339;","    padding: 5px;","    text-align: center;","}","","#returnButton>a {","    color: #0f0","}","","#post {","    background-color: #6669;","    margin: 10px;","    padding: 25px;","    border: 5px solid #3339;","}","","#backgroundCanvas {","    position: fixed;","    display: block;","}","","img,","video {","    width: 100%;","    object-fit:fill;","    border: 5px solid #3339;","}","",".video_wrapper {","    filter: blur(5px) saturate(.5);","    color: #0000;","    transition: all .25s ease-in-out","}","",".video_wrapper:hover {","    filter: blur(0) saturate(1);","    color: #fff;","}","",".video_wrapper span {","    position: absolute;","    top: 50%;","    left: 50%;","    transform: translate(-50%, -50%);","    font-size: 2em;","    text-align: center;","    width: 100%;","    height: 100%;","    display: flex;","    justify-content: center;","    align-items: center;","}","","#returnToTopButton {","    background-color: #6669;","    border: 5px solid #3339;","    padding: 5px;","    text-align: center;","    color: #0f0;","    text-decoration: underline;","}","","#returnToTopButton span {","    cursor: pointer;","}"],"output\\siteStyles.css":["@font-face {","    font-family: 'Fira Code';","    src: url('./firaCode.ttf') format('truetype');","    font-weight: normal;","    font-style: normal;","}","","html,","body {","    margin: 0;","    padding: 0;","    overflow: hidden auto;","    background-color: #000;","    font-family: 'Fira Code';","}","","#backgroundCanvas {","    position: fixed;","    display: block;","    transition: filter 1s ease-in-out;","}","","#backgroundCanvas.blur {","    filter: blur(25px) brightness(0);","}","","#overlay {","    position: absolute;","    top: 0;","    left: 0;","    width: 100%;","    height: 100%;","    z-index: 1;","    padding: 1px;","    display: flex;","    justify-content: center;","    align-items: center;","}","","#content {","    max-width: 80%;","    background-color: #3336;","    border: 5px solid #15661566;","    margin: 50px 0 50px 0;","}","","@media (max-aspect-ratio: 1/1) {","    #content {","        max-width: 100%;","    }","}","","code {","    font-family: 'Fira Code', monospace;","    background-color: #000;","    border: 2px solid #333;","}","","#titleDiv {","    text-align: center;","    color: #0f0;","}","","#titleText {","    font-size: xx-large","}","","#stats {","    display: flex;","    flex-direction: column;","    background-color: #6669;","    border: 5px solid #3339;","    padding: 5px;","}","","#posts {","    display: flex;","    align-items: center;","    justify-content: center;","    flex-wrap: wrap;","    margin: 10px;","    background-color: #6669;","    border: 5px solid #3339;","}","",".post {","    margin: 10px;","    padding: 10px;","    max-width: 50%;","    background-color: #0006;","    border: 5px solid #0f06;","    color: #0f0;","    cursor: pointer;","}","","@media (max-aspect-ratio: 1/1) {","    .post {","        max-width: 100%;","    }","}","",".post .title {","    background-color: #0006;","    padding: 5px;","    text-align: center;","    border: 2px solid #0f06;","    margin-bottom: 10px","}"],"output\\updateStats.js":["function addStat(parent, text) {","    let div = document.createElement('div')","    div.innerHTML = text","    parent.appendChild(div)","}","document.addEventListener('DOMContentLoaded', () => {","    fetch('./mem.json')","        .then(response => response.json())","        .then(mem => {","            const div = document.getElementById('stats')","            addStat(div, `Last updated: <code>${Math.floor((Date.now() - mem.lastUpdate) / 86400000)}</code> days ago`)","            addStat(div, `Created out of <code>${mem.numberOfLines}</code> lines of code`)","            addStat(div, `Current hash: <code>${mem.outputHash}</code>`)","        })","        .catch(error => {","            console.error('Error fetching mem for stats:', error)","        })","})"],"postBackgroundManager.js":["document.addEventListener('DOMContentLoaded', async () => {","    const background = await import('./background.js')","    const canvas = document.getElementById('backgroundCanvas')","    const ctx = canvas.getContext('2d')","    if (background.start != undefined) await background.start(canvas, ctx)","","    const maxUps = 60","    let lastUpdate = 0","","    async function update() {","        lastUpdate = Date.now()","        const canvas = document.getElementById('backgroundCanvas')","        if (background.update != undefined) {","            await background.update(canvas, ctx)","            requestAnimationFrame(() => setTimeout(update, 1000 / maxUps - (Date.now() - lastUpdate)))","        }","    }","    update()","})"],"postStyles.css":["@font-face {","    font-family: 'Fira Code';","    src: url('../../firaCode.ttf') format('truetype');","    font-weight: normal;","    font-style: normal;","}","","html,","body {","    margin: 0;","    padding: 0;","    overflow: hidden auto;","    background-color: #000;","    font-family: 'Fira Code';","}","","#overlay {","    position: absolute;","    top: 0;","    left: 0;","    width: 100%;","    min-height: 100vm;","    z-index: 1;","    padding: 1px;","    display: flex;","    justify-content: center;","    align-items: center;","}","","#content {","    width: 80%;","    background-color: #3336;","    border: 5px solid #15661566;","    margin: 50px 0 50px 0;","}","","@media (max-aspect-ratio: 1/1) {","    #content {","        width: 95%;","    }","}","","code {","    font-family: 'Fira Code', monospace;","    background-color: #000;","    border: 2px solid #333;","}","","#stats {","    display: flex;","    flex-direction: column;","    background-color: #6669;","    border: 5px solid #3339;","    padding: 5px;","    text-align: center;","    color: #0f0;","}","","#returnButton {","    background-color: #6669;","    border: 5px solid #3339;","    padding: 5px;","    text-align: center;","}","","#returnButton>a {","    color: #0f0","}","","#post {","    background-color: #6669;","    margin: 10px;","    padding: 25px;","    border: 5px solid #3339;","}","","#backgroundCanvas {","    position: fixed;","    display: block;","}","","img,","video {","    width: 100%;","    object-fit:fill;","    border: 5px solid #3339;","}","",".video_wrapper {","    filter: blur(5px) saturate(.5);","    color: #0000;","    transition: all .25s ease-in-out","}","",".video_wrapper:hover {","    filter: blur(0) saturate(1);","    color: #fff;","}","",".video_wrapper span {","    position: absolute;","    top: 50%;","    left: 50%;","    transform: translate(-50%, -50%);","    font-size: 2em;","    text-align: center;","    width: 100%;","    height: 100%;","    display: flex;","    justify-content: center;","    align-items: center;","}","","#returnToTopButton {","    background-color: #6669;","    border: 5px solid #3339;","    padding: 5px;","    text-align: center;","    color: #0f0;","    text-decoration: underline;","}","","#returnToTopButton span {","    cursor: pointer;","}"],"siteBackgroundManager.js":["document.addEventListener('DOMContentLoaded', async () => {","    function mixPaths() {","        const lastPath = backgroundPaths[backgroundPaths.length - 1]","        do backgroundPaths.sort(() => Math.random() * 2 - 1)","        while (backgroundPaths.length > 1 && backgroundPaths[0] == lastPath)","    }","    mixPaths()","","    let backgroundIndex = -1","","    const minTimePerBackground = 1000 * 30","    const blurTime = 1000 * 1","    let backgroundStarted = 0","","    let blurred = false","","    let cycle = true","","    let currentBackground = {}","","    let loadedBackgrounds = []","","    const maxUps = 60","    let lastUpdate = 0","","    async function update() {","        lastUpdate = Date.now()","","        const canvas = document.getElementById('backgroundCanvas')","        const ctx = canvas.getContext('2d')","","        if (cycle && minTimePerBackground - (Date.now() - backgroundStarted) <= blurTime && !blurred) {","            canvas.classList.add('blur')","            blurred = true","        }","","        if (cycle && Date.now() - backgroundStarted >= minTimePerBackground) {","            if (currentBackground.stop != undefined) await currentBackground.stop(canvas, ctx)","            backgroundIndex = (backgroundIndex + 1) % backgroundPaths.length","            if (backgroundIndex == 0) mixPaths()","            if (!loadedBackgrounds.includes(backgroundPaths[backgroundIndex])) await new Promise(r => {","                const script = document.createElement('script')","                script.type = 'module'","                script.src = backgroundPaths[backgroundIndex]","                script.onload = r","                document.head.appendChild(script)","                loadedBackgrounds.push(backgroundPaths[backgroundIndex])","            })","            currentBackground = await import(backgroundPaths[backgroundIndex])","            if (currentBackground.start != undefined) await currentBackground.start(canvas, ctx)","            canvas.classList.remove('blur')","            blurred = false","            backgroundStarted = Date.now()","        }","        if (currentBackground.update != undefined) await currentBackground.update(canvas, ctx)","","        //has to be set after the first update so the first background will always get loaded","        cycle = (backgroundPaths.length > 1)","","        requestAnimationFrame(() => setTimeout(update, 1000 / maxUps - (Date.now() - lastUpdate)))","    }","    update()","})"],"siteStyles.css":["@font-face {","    font-family: 'Fira Code';","    src: url('./firaCode.ttf') format('truetype');","    font-weight: normal;","    font-style: normal;","}","","html,","body {","    margin: 0;","    padding: 0;","    overflow: hidden auto;","    background-color: #000;","    font-family: 'Fira Code';","}","","#backgroundCanvas {","    position: fixed;","    display: block;","    transition: filter 1s ease-in-out;","}","","#backgroundCanvas.blur {","    filter: blur(25px) brightness(0);","}","","#overlay {","    position: absolute;","    top: 0;","    left: 0;","    width: 100%;","    height: 100%;","    z-index: 1;","    padding: 1px;","    display: flex;","    justify-content: center;","    align-items: center;","}","","#content {","    max-width: 80%;","    background-color: #3336;","    border: 5px solid #15661566;","    margin: 50px 0 50px 0;","}","","@media (max-aspect-ratio: 1/1) {","    #content {","        max-width: 100%;","    }","}","","code {","    font-family: 'Fira Code', monospace;","    background-color: #000;","    border: 2px solid #333;","}","","#titleDiv {","    text-align: center;","    color: #0f0;","}","","#titleText {","    font-size: xx-large","}","","#stats {","    display: flex;","    flex-direction: column;","    background-color: #6669;","    border: 5px solid #3339;","    padding: 5px;","}","","#posts {","    display: flex;","    align-items: center;","    justify-content: center;","    flex-wrap: wrap;","    margin: 10px;","    background-color: #6669;","    border: 5px solid #3339;","}","",".post {","    margin: 10px;","    padding: 10px;","    max-width: 50%;","    background-color: #0006;","    border: 5px solid #0f06;","    color: #0f0;","    cursor: pointer;","}","","@media (max-aspect-ratio: 1/1) {","    .post {","        max-width: 100%;","    }","}","",".post .title {","    background-color: #0006;","    padding: 5px;","    text-align: center;","    border: 2px solid #0f06;","    margin-bottom: 10px","}"],"updateHomeStats.js":["function addStat(parent, text) {","    let div = document.createElement('div')","    div.innerHTML = text","    parent.appendChild(div)","}","document.addEventListener('DOMContentLoaded', () => {","    fetch('./mem.json')","        .then(response => response.json())","        .then(mem => {","            const div = document.getElementById('stats')","            addStat(div, `Last updated: <code>${Math.floor((Date.now() - mem.lastUpdate) / 86400000)}</code> days ago`)","            addStat(div, `Created out of <code>${mem.numberOfLines}</code> lines of code`)","            addStat(div, `Current hash: <code>${mem.outputHash}</code>`)","        })","        .catch(error => {","            console.error('Error fetching mem for stats:', error)","        })","})"],"updatePostStats.js":["function addStat(parent, text) {","    let div = document.createElement('div')","    div.innerHTML = text","    parent.appendChild(div)","}","document.addEventListener('DOMContentLoaded', () => {","    fetch('../../mem.json')","        .then(response => response.json())","        .then(mem => {","            const div = document.getElementById('stats')","            addStat(div, `First published: <code>${Math.floor((Date.now() - mem.postsCreated[postName]) / 86400000)}</code> days ago`)","            addStat(div, `Last updated: <code>${Math.floor((Date.now() - mem.postsUpdated[postName]) / 86400000)}</code> days ago`)","            addStat(div, `Current hash: <code>${mem.postHashes[postName]}</code>`)","        })","        .catch(error => {","            console.error('Error fetching mem for stats:', error)","        })","})"]},"postsUpdated":{"Making a custom blog":1717781555244},"postsCreated":{"Making a custom blog":1717538615782},"postHashes":{"Making a custom blog":"624f69007b30baaf1c9424b55f90ea0d"}}